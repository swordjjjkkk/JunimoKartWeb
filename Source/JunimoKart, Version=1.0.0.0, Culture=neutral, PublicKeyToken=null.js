/* Generated by JSIL v0.8.2 build 38545. See http://jsil.org/ for more information. */ 
'use strict';
var $asm00 = JSIL.DeclareAssembly("JunimoKart, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("JunimoKart.Program"), "Main", JSIL.MethodSignature.Void);

JSIL.DeclareNamespace("StardewValley");
/* class StardewValley.InputState */ 

(function InputState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Int64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Collections.Generic.IEnumerable$b1.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.UInt32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Console)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Input.Keys), null))) ();
  };


  function InputState__ctor () {
    this._simulatedMousePosition = $T00().get_Zero().MemberwiseClone();
    this._ignoredKeys = $S00().Construct();
    this._pressedKeys = $S00().Construct();
    this._lastKeyStateTick = -1;
  }; 

  function InputState_GetGamePadState () {
    if ($T02().playerOneIndex === $T03().$Cast(-1)) {
      var result = new ($T04())();
    } else {
      result = this._currentGamepadState.MemberwiseClone();
    }
    return result;
  }; 

  function InputState_GetKeyboardState () {
    var flag = !$T02().game1.get_IsMainInstance() || 
    !$T02().game1.HasKeyboardFocus();
    if (flag) {
      var result = new ($T06())();
    } else {
      var flag2 = $T07().op_Inequality(
        $T07().FromNumber(this._lastKeyStateTick), 
        $T02().get_ticks()
      ) || 
      (this._keyState === null);
      if (flag2) {
        var flag3 = ((this._ignoredKeys).get_Count() | 0) === 0;
        if (flag3) {
          this._keyState = this._currentKeyboardState.MemberwiseClone();
        } else {
          (this._pressedKeys).Clear();
          $T01().prototype.AddRange.call(this._pressedKeys, $T08().$Cast((this._currentKeyboardState).GetPressedKeys()));

          for (var i = 0; i < ((this._ignoredKeys).get_Count() | 0); i = ((i + 1) | 0)) {
            var key = (this._ignoredKeys).get_Item(i);
            var flag4 = !(this._pressedKeys).Contains(key);
            if (flag4) {
              (this._ignoredKeys).RemoveAt(i);
              i = ((i - 1) | 0);
            }
          }

          for (var j = 0; j < ((this._pressedKeys).get_Count() | 0); j = ((j + 1) | 0)) {
            var key2 = (this._pressedKeys).get_Item(j);
            var flag5 = (this._ignoredKeys).Contains(key2);
            if (flag5) {
              (this._pressedKeys).RemoveAt(j);
              j = ((j - 1) | 0);
            }
          }
          this._keyState = new ($T06())($T01().prototype.ToArray.call(this._pressedKeys));
        }
        this._lastKeyStateTick = ($T02().get_ticks().ToNumber(4294967295, true) | 0);
      }
      result = JSIL.Nullable_Value(this._keyState).MemberwiseClone();
    }
    return result;
  }; 

  function InputState_GetMouseState () {
    var flag = !$T02().game1.get_IsMainInstance();
    if (flag) {
      var result = new ($T0B())(this._simulatedMousePosition.X, this._simulatedMousePosition.Y, 0, $T0C().Released, $T0C().Released, $T0C().Released, $T0C().Released, $T0C().Released);
    } else {
      result = this._currentMouseState.MemberwiseClone();
    }
    return result;
  }; 

  function InputState_IgnoreKeys (keys) {
    var flag = (keys.length >>> 0) > (0 >>> 0);
    if (flag) {
      $T01().prototype.AddRange.call(this._ignoredKeys, $T08().$Cast(keys));
      var keys_to_ignore = "";

      for (var i = 0; i < (keys.length | 0); i = ((i + 1) | 0)) {
        var key = keys[i];
        keys_to_ignore = ((keys_to_ignore + key.toString() + " "));
      }
      $T11().WriteLine(JSIL.ConcatString("Ignoring keys: ", keys_to_ignore.trim()));
    }
  }; 

  function InputState_SetMousePosition (x, y) {
    var flag = !$T02().game1.get_IsMainInstance();
    if (flag) {
      this._simulatedMousePosition.X = (x | 0);
      this._simulatedMousePosition.Y = (y | 0);
    } else {
      $T12().SetPosition(x, y);
      this._currentMouseState = new ($T0B())(x, y, (this._currentMouseState).get_ScrollWheelValue(), (this._currentMouseState).get_LeftButton(), (this._currentMouseState).get_MiddleButton(), (this._currentMouseState).get_RightButton(), (this._currentMouseState).get_XButton1(), (this._currentMouseState).get_XButton2());
    }
  }; 

  function InputState_Update () {
  }; 

  function InputState_UpdateStates () {
    this._currentKeyboardState = $T13().GetState().MemberwiseClone();
    this._currentMouseState = $T12().GetState().MemberwiseClone();
    if ($T02().playerOneIndex >= $T03().One) {
      this._currentGamepadState = $T14().GetState($T02().playerOneIndex).MemberwiseClone();
    } else {
      this._currentGamepadState = new ($T04())();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.InputState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InputState__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetGamePadState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")), 
      InputState_GetGamePadState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetKeyboardState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")), 
      InputState_GetKeyboardState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetMouseState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      InputState_GetMouseState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IgnoreKeys", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")])), 
      InputState_IgnoreKeys
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetMousePosition", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      InputState_SetMousePosition
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Void, 
      InputState_Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UpdateStates", 
      JSIL.MethodSignature.Void, 
      InputState_UpdateStates
    );

    $.Field({Static:false, Public:false}, "_simulatedMousePosition", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:false}, "_ignoredKeys", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]));

    $.Field({Static:false, Public:false}, "_pressedKeys", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]));

    $.Field({Static:false, Public:false}, "_keyState", $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")]));

    $.Field({Static:false, Public:false}, "_lastKeyStateTick", $.Int32);

    $.Field({Static:false, Public:false}, "_currentKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Field({Static:false, Public:false}, "_currentMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Field({Static:false, Public:false}, "_currentGamepadState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.NoiseGenerator */ 

(function NoiseGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Random, null))) ();
  };


  function NoiseGenerator_get_Amplitude () {
    return $thisType.NoiseGenerator$Amplitude$value;
  }; 

  function NoiseGenerator_get_Frequency () {
    return $thisType.NoiseGenerator$Frequency$value;
  }; 

  function NoiseGenerator_get_Octaves () {
    return $thisType.NoiseGenerator$Octaves$value;
  }; 

  function NoiseGenerator_get_Persistence () {
    return $thisType.NoiseGenerator$Persistence$value;
  }; 

  function NoiseGenerator_get_Seed () {
    return $thisType.NoiseGenerator$Seed$value;
  }; 

  function NoiseGenerator_Interpolate (x, y, a) {
    var value = (1 - (Math.cos((+a * 3.1415926535897931)))) * 0.5;
    return ((+x * (1 - value)) + (+y * value));
  }; 

  function NoiseGenerator_Noise (x, y) {
    var total = 0;
    var freq = +$thisType.NoiseGenerator$Frequency$value;
    var amp = +$thisType.NoiseGenerator$Amplitude$value;

    for (var i = 0; i < ($thisType.NoiseGenerator$Octaves$value | 0); i = ((i + 1) | 0)) {
      total += +$thisType.Smooth(+x * freq, +y * freq) * amp;
      freq *= 2;
      amp *= +$thisType.NoiseGenerator$Persistence$value;
    }
    var flag = total < -2.4;
    if (flag) {
      total = -2.4;
    } else {
      var flag2 = total > 2.4;
      if (flag2) {
        total = 2.4;
      }
    }
    return +((total / 2.4));
  }; 

  function NoiseGenerator_NoiseGeneration (x, y) {
    var i = (((x | 0) + Math.imul(y, 57)) | 0);
    i = (i << 13) ^ i;
    return (1 - +((+(((Math.imul(i, ((Math.imul(Math.imul(i, i), 15731) + 789221) | 0)) + ($thisType.NoiseGenerator$Seed$value | 0)) | 0) & 2147483647) / 1073741824)));
  }; 

  function NoiseGenerator_set_Amplitude (value) {
    $thisType.NoiseGenerator$Amplitude$value = +value;
  }; 

  function NoiseGenerator_set_Frequency (value) {
    $thisType.NoiseGenerator$Frequency$value = +value;
  }; 

  function NoiseGenerator_set_Octaves (value) {
    $thisType.NoiseGenerator$Octaves$value = (value | 0);
  }; 

  function NoiseGenerator_set_Persistence (value) {
    $thisType.NoiseGenerator$Persistence$value = +value;
  }; 

  function NoiseGenerator_set_Seed (value) {
    $thisType.NoiseGenerator$Seed$value = (value | 0);
  }; 

  function NoiseGenerator_Smooth (x, y) {
    var x2 = +$thisType.NoiseGeneration(((x) | 0), ((y) | 0));
    var n6 = +$thisType.NoiseGeneration(((((x) | 0) + 1) | 0), ((y) | 0));
    var n7 = +$thisType.NoiseGeneration(((x) | 0), ((((y) | 0) + 1) | 0));
    var n8 = +$thisType.NoiseGeneration(((((x) | 0) + 1) | 0), ((((y) | 0) + 1) | 0));
    var x3 = +$thisType.Interpolate(x2, n6, +x - +(((x) | 0)));
    var i2 = +$thisType.Interpolate(n7, n8, +x - +(((x) | 0)));
    return $thisType.Interpolate(x3, i2, +y - +(((y) | 0)));
  }; 

  JSIL.MakeStaticClass("StardewValley.NoiseGenerator", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "get_Amplitude", 
      JSIL.MethodSignature.Return($.Double), 
      NoiseGenerator_get_Amplitude
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Frequency", 
      JSIL.MethodSignature.Return($.Double), 
      NoiseGenerator_get_Frequency
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Octaves", 
      JSIL.MethodSignature.Return($.Int32), 
      NoiseGenerator_get_Octaves
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Persistence", 
      JSIL.MethodSignature.Return($.Double), 
      NoiseGenerator_get_Persistence
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Seed", 
      JSIL.MethodSignature.Return($.Int32), 
      NoiseGenerator_get_Seed
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "Interpolate", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double
        ]), 
      NoiseGenerator_Interpolate
    );

    $.Method({Static:true , Public:true }, "Noise", 
      new JSIL.MethodSignature($.Double, [$.Int32, $.Int32]), 
      NoiseGenerator_Noise
    );

    $.Method({Static:true , Public:true }, "NoiseGeneration", 
      new JSIL.MethodSignature($.Double, [$.Int32, $.Int32]), 
      NoiseGenerator_NoiseGeneration
    );

    $.Method({Static:true , Public:true }, "set_Amplitude", 
      JSIL.MethodSignature.Action($.Double), 
      NoiseGenerator_set_Amplitude
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_Frequency", 
      JSIL.MethodSignature.Action($.Double), 
      NoiseGenerator_set_Frequency
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_Octaves", 
      JSIL.MethodSignature.Action($.Int32), 
      NoiseGenerator_set_Octaves
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_Persistence", 
      JSIL.MethodSignature.Action($.Double), 
      NoiseGenerator_set_Persistence
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_Seed", 
      JSIL.MethodSignature.Action($.Int32), 
      NoiseGenerator_set_Seed
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "Smooth", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double]), 
      NoiseGenerator_Smooth
    );

    $.Field({Static:true , Public:false}, "NoiseGenerator$Seed$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:true , Public:false}, "NoiseGenerator$Octaves$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:true , Public:false}, "NoiseGenerator$Amplitude$value", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:true , Public:false}, "NoiseGenerator$Persistence$value", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:true , Public:false}, "NoiseGenerator$Frequency$value", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; });


    function NoiseGenerator__cctor () {
      $thisType.NoiseGenerator$Seed$value = ($S00().Construct().Next(2147483647) | 0);
      $thisType.NoiseGenerator$Octaves$value = 8;
      $thisType.NoiseGenerator$Amplitude$value = 1;
      $thisType.NoiseGenerator$Frequency$value = 0.015;
      $thisType.NoiseGenerator$Persistence$value = 0.65;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NoiseGenerator__cctor
    );

    $.Property({Static:true , Public:true }, "Seed", $.Int32);

    $.Property({Static:true , Public:true }, "Octaves", $.Int32);

    $.Property({Static:true , Public:true }, "Amplitude", $.Double);

    $.Property({Static:true , Public:true }, "Persistence", $.Double);

    $.Property({Static:true , Public:true }, "Frequency", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Utility */ 

(function Utility$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm06.System.Int32, $asm06.System.Int32, 
        $asm06.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Microsoft.Xna.Framework.Graphics.RasterizerState, null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm06.System.Single]))) ();
  };


  function Utility__ctor () {
  }; 

  function Utility_Clamp$00 (value, min, max) {
    var flag = +max < +min;
    if (flag) {
      var num = +min;
      min = +max;
      max = num;
    }
    var flag2 = +value < +min;
    if (flag2) {
      value = +min;
    }
    var flag3 = +value > +max;
    if (flag3) {
      value = +max;
    }
    return value;
  }; 

  function Utility_Clamp$01 (value, min, max) {
    var flag = (max | 0) < (min | 0);
    if (flag) {
      var num = (min | 0);
      min = (max | 0);
      max = num;
    }
    var flag2 = (value | 0) < (min | 0);
    if (flag2) {
      value = (min | 0);
    }
    var flag3 = (value | 0) > (max | 0);
    if (flag3) {
      value = (max | 0);
    }
    return value;
  }; 

  function Utility_CollectGarbage () {
  }; 

  function Utility_ConstrainScissorRectToScreen (scissor_rect) {
    var flag = (scissor_rect.get_Top() | 0) < 0;
    if (flag) {
      var amount_to_trim5 = (-scissor_rect.get_Top() | 0);
      scissor_rect.Height = (((scissor_rect.Height | 0) - amount_to_trim5) | 0);
      scissor_rect.Y = (((scissor_rect.Y | 0) + amount_to_trim5) | 0);
    }
    var flag2 = (scissor_rect.get_Bottom() | 0) > ($T07().viewport.get_Height() | 0);
    if (flag2) {
      amount_to_trim5 = (((scissor_rect.get_Bottom() | 0) - ($T07().viewport.get_Height() | 0)) | 0);
      scissor_rect.Height = (((scissor_rect.Height | 0) - amount_to_trim5) | 0);
    }
    var flag3 = (scissor_rect.get_Left() | 0) < 0;
    if (flag3) {
      amount_to_trim5 = (-scissor_rect.get_Left() | 0);
      scissor_rect.Width = (((scissor_rect.Width | 0) - amount_to_trim5) | 0);
      scissor_rect.X = (((scissor_rect.X | 0) + amount_to_trim5) | 0);
    }
    var flag4 = (scissor_rect.get_Right() | 0) > ($T07().viewport.get_Width() | 0);
    if (flag4) {
      amount_to_trim5 = (((scissor_rect.get_Right() | 0) - ($T07().viewport.get_Width() | 0)) | 0);
      scissor_rect.Width = (((scissor_rect.Width | 0) - amount_to_trim5) | 0);
    }
    return scissor_rect;
  }; 

  function Utility_GetPrismaticColor (offset, speedMultiplier) {
    var current_index = ((((((+((Math.fround($T07().currentGameTime.get_TotalGameTime().get_TotalMilliseconds()) * +speedMultiplier) / 1500)) | 0) + (offset | 0)) | 0) % ($thisType.PRISMATIC_COLORS.length | 0)) | 0);
    var next_index = ((((current_index + 1) | 0) % ($thisType.PRISMATIC_COLORS.length | 0)) | 0);
    var position = +(((Math.fround($T07().currentGameTime.get_TotalGameTime().get_TotalMilliseconds()) * +speedMultiplier) / 1500)) % 1;
    var prismatic_color = new ($T00())();
    prismatic_color.set_R(((+$thisType.Lerp(
          +((+(($thisType.PRISMATIC_COLORS[current_index]).get_R()) / 255)), 
          +((+(($thisType.PRISMATIC_COLORS[next_index]).get_R()) / 255)), 
          position
        ) * 255) | 0));
    prismatic_color.set_G(((+$thisType.Lerp(
          +((+(($thisType.PRISMATIC_COLORS[current_index]).get_G()) / 255)), 
          +((+(($thisType.PRISMATIC_COLORS[next_index]).get_G()) / 255)), 
          position
        ) * 255) | 0));
    prismatic_color.set_B(((+$thisType.Lerp(
          +((+(($thisType.PRISMATIC_COLORS[current_index]).get_B()) / 255)), 
          +((+(($thisType.PRISMATIC_COLORS[next_index]).get_B()) / 255)), 
          position
        ) * 255) | 0));
    prismatic_color.set_A(((+$thisType.Lerp(
          +((+(($thisType.PRISMATIC_COLORS[current_index]).get_A()) / 255)), 
          +((+(($thisType.PRISMATIC_COLORS[next_index]).get_A()) / 255)), 
          position
        ) * 255) | 0));
    return prismatic_color;
  }; 

  function Utility_GetRandom$b1 (T, list, random) {
    var flag = (list === null) || 
    ((list.get_Count() | 0) === 0);
    if (flag) {
      var result = (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
      ;
    } else {
      var flag2 = random === null;
      if (flag2) {
        random = $T07().random;
      }
      result = JSIL.CloneParameter(T, list.get_Item(random.Next(list.get_Count())));
    }
    return result;
  }; 

  function Utility_getRandomPositionInThisRectangle (r, random) {
    return $S02().Construct(+(random.Next(r.X, (((r.X | 0) + (r.Width | 0)) | 0))), +(random.Next(r.Y, (((r.Y | 0) + (r.Height | 0)) | 0))));
  }; 

  function Utility_Lerp (a, b, t) {
    return (+a + (+t * (+b - +a)));
  }; 

  function Utility_MakeCompletelyOpaque (color) {
    var flag = (color.get_A() | 0) >= 255;
    if (flag) {
      var result = color.MemberwiseClone();
    } else {
      color.set_A(255);
      result = color.MemberwiseClone();
    }
    return result;
  }; 

  function Utility_MoveTowards (from, to, delta) {
    var flag = (Math.abs((+to - +from))) <= +delta;
    if (flag) {
      var result = +to;
    } else {
      result = +from + (+($S03().CallStatic($T0E(), "Sign", null, +to - +from)) * +delta);
    }
    return result;
  }; 

  function Utility_PointToVector2 (p) {
    return $S02().Construct(+(p.X), +(p.Y));
  }; 

  function Utility_RandomFloat (min, max, random) {
    var flag = random === null;
    if (flag) {
      random = $T07().random;
    }
    return $thisType.Lerp(min, max, Math.fround(random.NextDouble()));
  }; 

  function Utility_Vector2ToPoint (v) {
    return new ($T0F())(((v.X) | 0), ((v.Y) | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Utility", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Utility__ctor
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Utility_Clamp$00
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      Utility_Clamp$01
    );

    $.Method({Static:true , Public:false}, "CollectGarbage", 
      JSIL.MethodSignature.Void, 
      Utility_CollectGarbage
    );

    $.Method({Static:true , Public:true }, "ConstrainScissorRectToScreen", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Utility_ConstrainScissorRectToScreen
    );

    $.Method({Static:true , Public:true }, "GetPrismaticColor", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$.Int32, $.Single]), 
      Utility_GetPrismaticColor
    );

    $.Method({Static:true , Public:true }, "GetRandom", 
      new JSIL.MethodSignature("!!0", [$asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"]), $asm06.TypeRef("System.Random")], ["T"]), 
      Utility_GetRandom$b1
    );

    $.Method({Static:true , Public:true }, "getRandomPositionInThisRectangle", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm06.TypeRef("System.Random")]), 
      Utility_getRandomPositionInThisRectangle
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Utility_Lerp
    );

    $.Method({Static:true , Public:true }, "MakeCompletelyOpaque", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), 
      Utility_MakeCompletelyOpaque
    );

    $.Method({Static:true , Public:true }, "MoveTowards", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Utility_MoveTowards
    );

    $.Method({Static:true , Public:true }, "PointToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Utility_PointToVector2
    );

    $.Method({Static:true , Public:true }, "RandomFloat", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $asm06.TypeRef("System.Random")
        ]), 
      Utility_RandomFloat
    );

    $.Method({Static:true , Public:true }, "Vector2ToPoint", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Utility_Vector2ToPoint
    );

    $.Field({Static:true , Public:true }, "PRISMATIC_COLORS", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ScissorEnabled", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"));


    function Utility__cctor () {
      $thisType.PRISMATIC_COLORS = JSIL.Array.New($T00(), [$T00().get_Red(), $S00().Construct(255, 120, 0), $S00().Construct(255, 217, 0), $T00().get_Lime(), $T00().get_Cyan(), $T00().get_Violet()]);
      var expr_6B = $S01().Construct();
      expr_6B.set_ScissorTestEnable(true);
      $thisType.ScissorEnabled = expr_6B;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Utility__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("StardewValley.Minigames");
/* class StardewValley.Minigames.OldMineCart */ 

(function OldMineCart$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.OldMineCart_Spark))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Minigames.OldMineCart_Spark)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.Linq.Enumerable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.UInt32)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm06.System.NotImplementedException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm06.System.Object)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.StardewValley.NoiseGenerator)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.OldMineCart_Spark), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Matrix, [$asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.SpriteFont, $asm06.System.String, 
        $asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.NotImplementedException, null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm06.System.Int32, $asm06.System.Int32, 
        $asm06.System.Int32
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };


  function OldMineCart__ctor (whichTheme, mode) {
    this.pixelScale = 4;
    this.noiseSeed = ($T02().random.Next(0, 2147483647) | 0);
    this.waterfallWidth = 1;
    this.distanceToTravel = -1;
    this.track = $S00().Construct();
    this.lakeDecor = $S00().Construct();
    this.ceiling = $S00().Construct();
    this.obstacles = $S00().Construct();
    this.sparkShower = $S01().Construct();
    this.changeScreenSize();
    this.maxJumpHeight = +((64 / (this.pixelScale | 0) | 0)) * 5;
    this.texture = $T02().content.Load$b1($T05())("MineCart");
    this.ytileOffset = (((((this.screenHeight | 0) / 2) | 0) / (this.tileSize | 0)) | 0);
    this.gameMode = (mode | 0);
    this.setGameModeParameters();
    this.setUpTheme(whichTheme);
    this.createBeginningOfLevel();
    this.screenDarkness = 1;
  }; 

  function OldMineCart_changeScreenSize () {
    this.pixelScale = 4;
    var transformScale = ((
      (($T02().viewport.get_Height() | 0) < 1000)
         ? 3
         : 4)
     | 0);
    this.screenWidth = ((($T02().viewport.get_Width() | 0) / transformScale) | 0);
    this.screenHeight = ((($T02().viewport.get_Height() | 0) / transformScale) | 0);
    this.tileSize = ((64 / (this.pixelScale | 0)) | 0);
    this.ytileOffset = (((((this.screenHeight | 0) / 2) | 0) / (this.tileSize | 0)) | 0);
    this.maxJumpHeight = +((64 / (this.pixelScale | 0) | 0)) * 5;
    this.transformMatrix = $S02().CallStatic($T08(), "CreateScale", null, +transformScale).MemberwiseClone();
  }; 

  function OldMineCart_createBeginningOfLevel () {

    for (var i = 0; i < (((((this.screenWidth | 0) / (this.tileSize | 0)) | 0) + 4) | 0); i = ((i + 1) | 0)) {
      (this.track).Add(new ($T09())($T02().random.Next(1, 3), 0));
      (this.ceiling).Add(new ($T09())($T02().random.Next(200), 0));
      (this.obstacles).Add($T09().get_Zero().MemberwiseClone());
      (this.lakeDecor).Add(new ($T09())($T02().random.Next(2), $T02().random.Next((((this.ytileOffset | 0) + 3) | 0), (((this.screenHeight | 0) / (this.tileSize | 0)) | 0))));
    }
  }; 

  function OldMineCart_createSparkShower$00 () {
    var number = ($T02().random.Next(3, 7) | 0);

    for (var i = 0; i < number; i = ((i + 1) | 0)) {
      (this.sparkShower).Add(new ($T0A())((+(Math.imul(6, this.tileSize) - 3) + +this.mineCartXOffset), (((+this.mineCartYPosition + +((this.ytileOffset | 0) * (this.tileSize | 0))) + +(this.tileSize)) - 4), +((+($T02().random.Next(-200, 5)) / 100)), +((+(-+($T02().random.Next(5, 150))) / 100))));
    }
  }; 

  function OldMineCart_createSparkShower$01 (number) {

    for (var i = 0; i < (number | 0); i = ((i + 1) | 0)) {
      (this.sparkShower).Add(new ($T0A())((+(Math.imul(6, this.tileSize) - 3) + +this.mineCartXOffset), (((+this.mineCartYPosition + +((this.ytileOffset | 0) * (this.tileSize | 0))) + +(this.tileSize)) - 4), +((+($T02().random.Next(-200, 5)) / 100)), +((+(-+($T02().random.Next(5, 150))) / 100))));
    }
  }; 

  function OldMineCart_doMainGameUpdates () {
    return false;
  }; 

  function OldMineCart_draw (b) {
    var $temp00;
    b.Begin(
      $T0C().Deferred, 
      $T0D().AlphaBlend, 
      $T0E().PointClamp, 
      null, 
      null, 
      null, 
      this.transformMatrix.MemberwiseClone()
    );

    for (var i = 0; i <= (((((this.screenWidth | 0) / (this.tileSize | 0)) | 0) + 1) | 0); i = ((i + 1) | 0)) {
      $S03().CallVirtual("Draw", null, b, this.texture, new ($T0F())(((Math.imul(i, this.tileSize) - ((this.lakeSpeedAccumulator) | 0)) | 0), Math.imul(this.tileSize, 9), this.tileSize, (((this.screenHeight | 0) - 96) | 0)), new ($T0F())(0, 80, 16, 97), this.lakeTint.MemberwiseClone());
    }

    for (var i2 = 0; i2 < ((this.lakeDecor).get_Count() | 0); i2 = ((i2 + 1) | 0)) {
      $S04().CallVirtual("Draw", null, b, 
        this.texture, 
        $S05().Construct((+(i2 * (this.tileSize | 0)) - +this.lakeSpeedAccumulator), +(($T11().ElementAt$b1($T09())(this.lakeDecor, i2).Y | 0) * (this.tileSize | 0))), 
        new ($T0F())(((32 + Math.imul($T11().ElementAt$b1($T09())(this.lakeDecor, i2).X, this.tileSize)) | 0), 0, 16, 16), 
        (
          (($T11().ElementAt$b1($T09())(this.lakeDecor, i2).X | 0) === 0)
             ? this.midBGTint
             : this.lakeTint)
        .MemberwiseClone()
      );
    }

    for (var i3 = 0; i3 <= (((((this.screenWidth | 0) / 96) | 0) + 2) | 0); i3 = ((i3 + 1) | 0)) {
      $S04().CallVirtual("Draw", null, b, this.texture, $S05().Construct(((0 - +this.backBGPosition) + +(i3 * 96)), +((this.tileSize | 0) * 2)), new ($T0F())(64, 162, 96, 111), this.backBGTint.MemberwiseClone());
    }

    for (var i4 = 0; i4 < (((((this.screenWidth | 0) / 96) | 0) + 2) | 0); i4 = ((i4 + 1) | 0)) {
      $S04().CallVirtual("Draw", null, b, this.texture, $S05().Construct(((0 - +this.midBGPosition) + +(i4 * 96)), 0), new ($T0F())(64, 0, 96, 162), this.midBGTint.MemberwiseClone());
    }

    for (var i5 = 0; i5 < ((this.track).get_Count() | 0); i5 = ((i5 + 1) | 0)) {
      var flag = ($T11().ElementAt$b1($T09())(this.track, i5).X >>> 0) > (0 >>> 0);
      if (flag) {
        $S04().CallVirtual("Draw", null, b, 
          this.texture, 
          $S05().Construct(((0 - +this.speedAccumulator) + +(i5 * (this.tileSize | 0))), +(Math.imul(((($T11().ElementAt$b1($T09())(this.track, i5).Y | 0) + (this.ytileOffset | 0)) | 0), this.tileSize) - (this.tileSize | 0))), 
          new ($T0F())(((160 + Math.imul(((($T11().ElementAt$b1($T09())(this.track, i5).X | 0) - 1) | 0), 16)) | 0), 144, 16, 32), 
          this.trackTint.MemberwiseClone()
        );
        var darkness = 0;

        for (var j = ((($T11().ElementAt$b1($T09())(this.track, i5).Y | 0) + 1) | 0); j < (((this.screenHeight | 0) / (this.tileSize | 0)) | 0); j = ((j + 1) | 0)) {
          $S04().CallVirtual("Draw", null, b, this.texture, $S05().Construct(((0 - +this.speedAccumulator) + +(i5 * (this.tileSize | 0))), +(((j + (this.ytileOffset | 0)) | 0) * (this.tileSize | 0))), new ($T0F())(((16 + Math.imul((
                    (((j % 2) | 0) === 0)
                       ? ((((($T11().ElementAt$b1($T09())(this.track, i5).X | 0) + 1) | 0) % 2) | 0)
                       : ((($T11().ElementAt$b1($T09())(this.track, i5).X | 0) % 2) | 0))
                  , 16)) | 0), 32, 16, 16), this.trackTint.MemberwiseClone());
          $S04().CallVirtual("Draw", null, b, 
            this.texture, 
            $S05().Construct(((0 - +this.speedAccumulator) + +(i5 * (this.tileSize | 0))), +(((j + (this.ytileOffset | 0)) | 0) * (this.tileSize | 0))), 
            new ($T0F())(((16 + Math.imul((
                    (((j % 2) | 0) === 0)
                       ? ((((($T11().ElementAt$b1($T09())(this.track, i5).X | 0) + 1) | 0) % 2) | 0)
                       : ((($T11().ElementAt$b1($T09())(this.track, i5).X | 0) % 2) | 0))
                  , 16)) | 0), 32, 16, 16), 
            $T15().op_Multiply(this.trackShadowTint.MemberwiseClone(), darkness).MemberwiseClone()
          );
          darkness += 0.1;
        }
      }
    }

    for (var i6 = 0; i6 < ((this.obstacles).get_Count() | 0); i6 = ((i6 + 1) | 0)) {
      var x = ((this.obstacles).get_Item(i6).X | 0);
      var num = x;
      if (num !== 1) {
        if (num === 2) {
          $S06().CallVirtual("Draw", null, b, 
            $T02().debrisSpriteSheet, 
            $S05().Construct(((0 - +this.speedAccumulator) + +(i6 * (this.tileSize | 0))), +(((((this.obstacles).get_Item(i6).Y | 0) + (this.ytileOffset | 0)) | 0) * (this.tileSize | 0))), 
            $T02().getSourceRectForStandardTileSheet($T02().debrisSpriteSheet, 8, -1, -1).MemberwiseClone(), 
            $T15().get_White().MemberwiseClone(), 
            0, 
            $S05().Construct(32, 0), 
            0.25, 
            $T16().None, 
            0
          );
        }
      } else {
        $S04().CallVirtual("Draw", null, b, 
          this.texture, 
          $S05().Construct(((0 - +this.speedAccumulator) + +(i6 * (this.tileSize | 0))), +(((((this.obstacles).get_Item(i6).Y | 0) + (this.ytileOffset | 0)) | 0) * (this.tileSize | 0))), 
          new ($T0F())(16, 0, 16, 16), 
          $T15().get_White().MemberwiseClone()
        );
      }
    }
    if ((((((this.respawnCounter | 0) / 200) | 0) % 2) | 0) === 0) {
      $S06().CallVirtual("Draw", null, b, 
        this.texture, 
        $S05().Construct((+(Math.imul(6, this.tileSize) + (((this.tileSize | 0) / 2) | 0)) + +this.mineCartXOffset), ((((+((this.ytileOffset | 0) * (this.tileSize | 0)) + +this.mineCartYPosition) + +(this.tileSize)) - +this.minecartBumpOffset) - 4)), 
        new ($T0F())(0, 0, 16, 16), 
        $T15().get_White().MemberwiseClone(), 
        (
          (+this.minecartDY < 0)
             ? +((+((+this.minecartDY / 3.14159274)) / 2))
             : 0)
        , 
        $S05().Construct(16, 16), 
        1, 
        $T16().None, 
        0
      );
      $S06().CallVirtual("Draw", null, b, 
        this.texture, 
        $S05().Construct((+(Math.imul(6, this.tileSize) + (((this.tileSize | 0) / 2) | 0)) + +this.mineCartXOffset), (((((+((this.ytileOffset | 0) * (this.tileSize | 0)) + +this.mineCartYPosition) + +(this.tileSize)) - +this.minecartBumpOffset) - 4) + 8)), 
        new ($T0F())(0, 8, 16, 8), 
        $T15().get_White().MemberwiseClone(), 
        (
          (+this.minecartDY < 0)
             ? +((+((+this.minecartDY / 3.14159274)) / 4))
             : 0)
        , 
        $S05().Construct(16, 16), 
        1, 
        $T16().None, 
        0.1
      );
    }

    for (var a$0 = this.sparkShower._items, i$0 = 0, l$0 = (this.sparkShower._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      $S07().CallVirtual("Draw", null, b, $T02().staminaRect, new ($T0F())(((s.x) | 0), ((s.y) | 0), (((this.pixelScale | 0) / 4) | 0), (((this.pixelScale | 0) / 4) | 0)), s.c.MemberwiseClone());
    }

    for (var k = 0; k < (this.waterfallWidth | 0); k = ((k + 2) | 0)) {

      for (var l = -2; l <= (((((this.screenHeight | 0) / (this.tileSize | 0)) | 0) + 1) | 0); l = ((l + 1) | 0)) {
        $S04().CallVirtual("Draw", null, b, this.texture, $S05().Construct((+((this.screenWidth | 0) + Math.imul(this.tileSize, k)) - +this.waterFallPosition), (+(l * (this.tileSize | 0)) + (+this.lakeSpeedAccumulator * 2))), new ($T0F())(48, 32, 16, 16), this.waterfallTint.MemberwiseClone());
      }
    }
    if (((this.gameMode | 0) !== 2) && ((this.totalMotion | 0) < (((this.distanceToTravel | 0) + (((this.screenWidth | 0) / (this.tileSize | 0)) | 0)) | 0))) {
      if ((this.gameMode | 0) !== 4) {

        for (var m = 0; m < (this.livesLeft | 0); m = ((m + 1) | 0)) {
          $S04().CallVirtual("Draw", null, b, this.texture, $S05().Construct(+((((this.screenWidth | 0) - Math.imul(m, (((this.tileSize | 0) + 2) | 0))) | 0) - (this.tileSize | 0)), 0), new ($T0F())(0, 0, 16, 16), $T15().get_White().MemberwiseClone());
        }
      }
      $S07().CallVirtual("Draw", null, b, $T02().staminaRect, new ($T0F())(this.pixelScale, this.pixelScale, Math.imul(this.tileSize, 8), this.pixelScale), $T15().get_LightGray().MemberwiseClone());
      $S07().CallVirtual("Draw", null, b, $T02().staminaRect, new ($T0F())((((this.pixelScale | 0) + ((+((+(this.totalMotion) / +((this.distanceToTravel | 0) + (((this.screenWidth | 0) / (this.tileSize | 0)) | 0)))) * +(Math.imul(this.tileSize, 8) - (this.pixelScale | 0))) | 0)) | 0), this.pixelScale, this.pixelScale, this.pixelScale), $T15().get_Aquamarine().MemberwiseClone());

      for (var n = 0; n < 4; n = ((n + 1) | 0)) {
        $S07().CallVirtual("Draw", null, b, $T02().staminaRect, new ($T0F())((((this.pixelScale | 0) + Math.imul(this.tileSize, 8)) | 0), (((this.pixelScale | 0) + Math.imul(n, (((this.pixelScale | 0) / 4) | 0))) | 0), (((this.pixelScale | 0) / 4) | 0), (((this.pixelScale | 0) / 4) | 0)), (
            (((n % 2) | 0) === 0)
               ? $T15().get_White()
               : $T15().get_Black())
          .MemberwiseClone());
        $S07().CallVirtual("Draw", null, b, $T02().staminaRect, new ($T0F())((((((this.pixelScale | 0) + Math.imul(this.tileSize, 8)) | 0) + (((this.pixelScale | 0) / 4) | 0)) | 0), (((this.pixelScale | 0) + Math.imul(n, (((this.pixelScale | 0) / 4) | 0))) | 0), (((this.pixelScale | 0) / 4) | 0), (((this.pixelScale | 0) / 4) | 0)), (
            (((n % 2) | 0) === 0)
               ? $T15().get_Black()
               : $T15().get_White())
          .MemberwiseClone());
      }
      $S08().CallVirtual("DrawString", null, b, 
        $T02().dialogueFont, 
        String($T00().$Box((((this.levelsBeat | 0) + 1) | 0))), 
        $S05().Construct(+(Math.imul(this.pixelScale, 2) + Math.imul(this.tileSize, 8)), +((+(this.pixelScale) / 2))), 
        $T15().get_Orange().MemberwiseClone(), 
        0, 
        $T10().get_Zero().MemberwiseClone(), 
        0.25, 
        $T16().None, 
        0
      );
    } else {
      if ((this.gameMode | 0) === 2) {
        $S08().CallVirtual("DrawString", null, b, 
          $T02().dialogueFont, 
          JSIL.ConcatString("Finished: ", (this.totalMotion).toString()), 
          $S05().Construct(1, 1), 
          $T15().get_White().MemberwiseClone(), 
          0, 
          $T10().get_Zero().MemberwiseClone(), 
          0.25, 
          $T16().None, 
          0
        );
        $S08().CallVirtual("DrawString", null, b, 
          $T02().dialogueFont, 
          JSIL.ConcatString("Best Score", ($T02().minecartHighScore).toString()), 
          $S05().Construct(128, 1), 
          $T15().get_White().MemberwiseClone(), 
          0, 
          $T10().get_Zero().MemberwiseClone(), 
          0.25, 
          $T16().None, 
          0
        );
      }
    }
    if (+this.screenDarkness > 0) {
      $S07().CallVirtual("Draw", null, b, $T02().staminaRect, new ($T0F())(0, 0, this.screenWidth, (((this.screenHeight | 0) + (this.tileSize | 0)) | 0)), $T15().op_Multiply($T15().get_Black().MemberwiseClone(), this.screenDarkness).MemberwiseClone());
    }
    b.End();
  }; 

  function OldMineCart_forceQuit () {
    this.unload();
    return true;
  }; 

  function OldMineCart_jump () {
    if (!((+this.minecartDY >= 1) || ((this.respawnCounter | 0) > 0))) {
      if (!this.isJumping) {
        this.movingOnSlope = 0;
        this.minecartPositionBeforeJump = +this.mineCartYPosition;
        this.isJumping = true;
      }
      if (!this.reachedJumpApex) {
        this.minecartDY = +$T18().Max(-4.5, +this.minecartDY - 0.6);
        if (+this.minecartDY <= -4.5) {
          this.reachedJumpApex = true;
        }
      }
    }
  }; 

  function OldMineCart_leftClickHeld (x, y) {
    if (this.isJumping && !this.reachedJumpApex) {
      this.minecartDY = +$T18().Max(-4.5, +this.minecartDY - 0.6);
      if (+this.minecartDY === -4.5) {
        this.reachedJumpApex = true;
      }
    }
  }; 

  function OldMineCart_minigameId () {
    return "OldMineCart";
  }; 

  function OldMineCart_receiveEventPoke (data) {
    throw $S09().Construct();
  }; 

  function OldMineCart_receiveKeyPress (k) {
    var flag = (JSIL.ObjectEqualsInstance(k, $T1A().Escape, !false, $T1B().__Type__));
    if (flag) {
      this.unload();
      $T02().playSound("bigDeSelect");
    }
  }; 

  function OldMineCart_receiveKeyRelease (k) {
  }; 

  function OldMineCart_receiveLeftClick (x, y, playSound) {
    this.jump();
  }; 

  function OldMineCart_receiveRightClick (x, y, playSound) {
  }; 

  function OldMineCart_releaseJump () {
    var flag = this.isJumping;
    if (flag) {
      this.reachedJumpApex = true;
    }
  }; 

  function OldMineCart_releaseLeftClick (x, y) {
    this.releaseJump();
  }; 

  function OldMineCart_releaseRightClick (x, y) {
  }; 

  function OldMineCart_restartLevel () {
    (this.track).Clear();
    (this.ceiling).Clear();
    (this.lakeDecor).Clear();
    (this.obstacles).Clear();
    this.totalMotion = 0;
    this.speedAccumulator = 0;
    this.currentTrackY = 0;
    this.mineCartYPosition = 0;
    this.minecartDY = 0;
    this.isJumping = false;
    this.reachedJumpApex = false;
    this.reachedFinish = false;
    this.movingOnSlope = 0;
    this.mineCartXOffset = 0;
    this.createBeginningOfLevel();
    this.setGameModeParameters();
  }; 

  function OldMineCart_setGameModeParameters () {
    var num = (this.gameMode | 0);
    var num2 = num;
    if (num2 !== 0) {
      if (num2 === 3) {
        this.distanceToTravel = 200;
        this.livesLeft = 3;
      }
    } else {
      this.distanceToTravel = 200;
      this.livesLeft = 3;
    }
  }; 

  function OldMineCart_setUpTheme (whichTheme) {
    switch (whichTheme) {
      case 0: 
        this.backBGTint = $S0A().Construct(254, 254, 254);
        this.midBGTint = $S0A().Construct(254, 254, 254);
        this.caveTint = $S0A().Construct(230, 244, 254);
        this.lakeTint = $S0A().Construct(150, 210, 255);
        this.waterfallTint = $T15().op_Multiply($T15().get_LightCyan().MemberwiseClone(), 0.5).MemberwiseClone();
        this.trackTint = $T15().get_LightCyan().MemberwiseClone();
        this.speed = 0.085;
        $T1C().NoiseGenerator$Amplitude$value = 2.8;
        $T1C().NoiseGenerator$Frequency$value = 0.18;
        this.heightChangeThreshold = 0.85;
        this.obstacleOccurance = 0.05;
        this.heightFluctuationsThreshold = 0.35;
        this.trackShadowTint = $T15().get_DarkSlateBlue().MemberwiseClone();
        break;

      case 1: 
        this.backBGTint = $T15().get_DarkRed().MemberwiseClone();
        this.midBGTint = $T15().get_DarkSalmon().MemberwiseClone();
        this.caveTint = $T15().get_DarkRed().MemberwiseClone();
        this.lakeTint = $T15().get_DarkRed().MemberwiseClone();
        this.trackTint = $T15().get_DarkGray().MemberwiseClone();
        this.waterfallTint = $T15().op_Multiply($T15().get_Red().MemberwiseClone(), 0.9).MemberwiseClone();
        this.trackShadowTint = $T15().get_DarkOrange().MemberwiseClone();
        this.speed = 0.12;
        this.heightChangeThreshold = 0.8;
        $T1C().NoiseGenerator$Amplitude$value = 3;
        $T1C().NoiseGenerator$Frequency$value = 0.18;
        this.obstacleOccurance = 0.05;
        this.heightFluctuationsThreshold = 0.2;
        break;

      case 2: 
        this.backBGTint = $S0A().Construct(50, 150, 225);
        this.midBGTint = $S0A().Construct(120, 170, 225);
        this.caveTint = $T15().get_SlateGray().MemberwiseClone();
        this.lakeTint = $S0A().Construct(30, 120, 215);
        this.waterfallTint = $T15().op_Multiply($T15().get_White().MemberwiseClone(), 0.5).MemberwiseClone();
        this.trackTint = $T15().get_Gray().MemberwiseClone();
        this.speed = 0.085;
        $T1C().NoiseGenerator$Amplitude$value = 3;
        $T1C().NoiseGenerator$Frequency$value = 0.15;
        this.heightChangeThreshold = 0.9;
        this.obstacleOccurance = 0.05;
        this.heightFluctuationsThreshold = 0.4;
        this.trackShadowTint = $T15().get_DarkSlateBlue().MemberwiseClone();
        break;

      case 3: 
        this.backBGTint = $S0A().Construct(60, 60, 60);
        this.midBGTint = $S0A().Construct(60, 60, 60);
        this.caveTint = $S0A().Construct(70, 70, 70);
        this.lakeTint = $S0A().Construct(60, 70, 80);
        this.trackTint = $T15().get_DimGray().MemberwiseClone();
        this.waterfallTint = $T15().op_Multiply($T15().get_Black().MemberwiseClone(), 0).MemberwiseClone();
        this.trackShadowTint = $T15().get_Black().MemberwiseClone();
        this.speed = 0.1;
        this.heightChangeThreshold = 0.7;
        $T1C().NoiseGenerator$Amplitude$value = 3;
        $T1C().NoiseGenerator$Frequency$value = 0.2;
        this.obstacleOccurance = 0;
        this.heightFluctuationsThreshold = 0.2;
        break;

      case 4: 
        this.backBGTint = $T15().get_SeaGreen().MemberwiseClone();
        this.midBGTint = $T15().get_Green().MemberwiseClone();
        this.caveTint = $S0A().Construct(255, 200, 60);
        this.lakeTint = $T15().get_Lime().MemberwiseClone();
        this.trackTint = $T15().get_LightSlateGray().MemberwiseClone();
        this.waterfallTint = $T15().op_Multiply($T15().get_ForestGreen().MemberwiseClone(), 0.5).MemberwiseClone();
        this.trackShadowTint = $S0A().Construct(0, 180, 50);
        this.speed = 0.08;
        this.heightChangeThreshold = 0.6;
        $T1C().NoiseGenerator$Amplitude$value = 3.1;
        $T1C().NoiseGenerator$Frequency$value = 0.24;
        this.obstacleOccurance = 0.05;
        this.heightFluctuationsThreshold = 0.15;
        break;

      case 5: 
        this.backBGTint = $T15().get_DarkKhaki().MemberwiseClone();
        this.midBGTint = $T15().get_SandyBrown().MemberwiseClone();
        this.caveTint = $T15().get_SandyBrown().MemberwiseClone();
        this.lakeTint = $T15().get_MediumAquamarine().MemberwiseClone();
        this.trackTint = $T15().get_Beige().MemberwiseClone();
        this.waterfallTint = $T15().op_Multiply($T15().get_MediumAquamarine().MemberwiseClone(), 0.9).MemberwiseClone();
        this.trackShadowTint = $S0A().Construct(60, 60, 60);
        this.speed = 0.085;
        this.heightChangeThreshold = 0.8;
        $T1C().NoiseGenerator$Amplitude$value = 2;
        $T1C().NoiseGenerator$Frequency$value = 0.12;
        this.obstacleOccurance = 0.05;
        this.heightFluctuationsThreshold = 0.25;
        break;

    }
    this.currentTheme = (whichTheme | 0);
  }; 

  function OldMineCart_tick (time) {
    if (!(this.reachedFinish || 
        (((this.livesLeft | 0) <= 0) && 
          ((this.gameMode | 0) !== 2))) && (+this.screenDarkness > 0)) {
      this.screenDarkness = +this.screenDarkness - (+((time.get_ElapsedGameTime()).get_Milliseconds()) * 0.002);
    }
    var trackLine = ((
      (($T11().ElementAt$b1($T09())(this.track, 6).X | 0) === 0)
         ? 9999
         : ((Math.imul($T11().ElementAt$b1($T09())(this.track, 6).Y, this.tileSize) + (((
              (($T11().ElementAt$b1($T09())(this.track, 6).X | 0) === 3)
                 ? (0 - +this.speedAccumulator)
                 : (
                  (($T11().ElementAt$b1($T09())(this.track, 6).X | 0) === 4)
                     ? (+this.speedAccumulator - 16)
                     : 0)
            )
          ) | 0)) | 0))
     | 0);
    var flag2 = ((this.respawnCounter | 0) <= 0) || 
    (((this.track).get_Item(6).X | 0) === 0) || 
    (((this.obstacles).get_Item(6).X | 0) === 1) || 
    (((this.obstacles).get_Item(7).X | 0) === 1);
    if (flag2) {
      this.speedAccumulator = +this.speedAccumulator + (+((time.get_ElapsedGameTime()).get_Milliseconds()) * +this.speed);
      trackLine = ((
        (($T11().ElementAt$b1($T09())(this.track, 6).X | 0) === 0)
           ? 9999
           : ((Math.imul($T11().ElementAt$b1($T09())(this.track, 6).Y, this.tileSize) + (((
                (($T11().ElementAt$b1($T09())(this.track, 6).X | 0) === 3)
                   ? (0 - +this.speedAccumulator)
                   : (
                    (($T11().ElementAt$b1($T09())(this.track, 6).X | 0) === 4)
                       ? (+this.speedAccumulator - 16)
                       : 0)
              )
            ) | 0)) | 0))
       | 0);
      if (+this.speedAccumulator >= +(this.tileSize)) {
        var flag4 = !(this.isJumping || 
          ((this.movingOnSlope | 0) !== 0)) && 
        (+$T02().random.NextDouble() < 0.5);
        if (flag4) {
          this.minecartBumpOffset = +($T02().random.Next(1, 3));
        }
        if ((((((this.totalMotion | 0) + 1) | 0) % 1000) | 0) === 0) {
          $T02().playSound("newArtifact");
        } else {
          if ((((((this.totalMotion | 0) + 1) | 0) % 100) | 0) === 0) {
            $T02().playSound("Pickup_Coin15");
          }
        }
        this.totalMotion = (((this.totalMotion | 0) + 1) | 0);
        if ((this.totalMotion | 0) > ($T02().minecartHighScore | 0)) {
          $T02().minecartHighScore = (this.totalMotion | 0);
        }
        if (((this.distanceToTravel | 0) !== -1) && ((this.totalMotion | 0) >= (((this.distanceToTravel | 0) + (((this.screenWidth | 0) / (this.tileSize | 0)) | 0)) | 0))) {
          if (!this.reachedFinish) {
            $T02().playSound("reward");
          }
          this.reachedFinish = true;
        }
        (this.track).RemoveAt(0);
        (this.ceiling).RemoveAt(0);
        (this.obstacles).RemoveAt(0);
        if (((this.distanceToTravel | 0) === -1) || ((this.totalMotion | 0) < (this.distanceToTravel | 0))) {
          var noiseValue = +$T1C().Noise(this.totalMotion, this.noiseSeed);
          var trackToAdd = $T09().get_Zero().MemberwiseClone();
          var flag11 = (noiseValue > +this.heightChangeThreshold) && 
          (+this.lastNoiseValue <= +this.heightChangeThreshold);
          if (flag11) {
            this.currentTrackY = ($T18().Max((((this.currentTrackY | 0) - ($T02().random.Next(1, 2) | 0)) | 0), -6) | 0);
          } else {
            var flag12 = (noiseValue < +this.heightChangeThreshold) && 
            (+this.lastNoiseValue >= +this.heightChangeThreshold);
            if (flag12) {
              this.currentTrackY = ($T18().Min((((this.currentTrackY | 0) + ($T02().random.Next(1, (
                      ((this.currentTrackY | 0) <= -3)
                         ? 6
                         : 3)
                  ) | 0)) | 0), 4) | 0);
            } else {
              var flag13 = (Math.abs((noiseValue - +this.lastNoiseValue))) > +this.heightFluctuationsThreshold;
              if (flag13) {
                var flag14 = ((this.track).get_Item(((((this.track).get_Count() | 0) - 1) | 0)).X | 0) === 0;
                if (flag14) {
                  this.currentTrackY = ($T18().Max(-6, $T18().Min(6, (((this.currentTrackY | 0) + ($T02().random.Next(1, 1) | 0)) | 0))) | 0);
                } else {
                  this.currentTrackY = ($T18().Max($T18().Min(4, (((this.currentTrackY | 0) + ($T02().random.Next(-3, 3) | 0)) | 0)), -6) | 0);
                }
              }
            }
          }
          if (noiseValue >= -0.5) {
            (trackToAdd = trackToAdd.MemberwiseClone(), 
              $T09().prototype._ctor.call(trackToAdd, $T02().random.Next(1, 3), this.currentTrackY));
          } else {
            var foundTrack = false;

          $loop0: 
            for (var i = 0; i < ((4 - ((
                  (+$T02().random.NextDouble() < 0.1)
                     ? 1
                     : 0)
                 | 0)) | 0); i = ((i + 1) | 0)) {
              var flag16 = ((this.track).get_Item(((((((this.track).get_Count() | 0) - 1) | 0) - i) | 0)).X >>> 0) > (0 >>> 0);
              if (flag16) {
                foundTrack = true;
                break $loop0;
              }
            }
            trackToAdd = (
              foundTrack
                 ? new ($T09())(0, 999)
                 : new ($T09())($T02().random.Next(1, 3), (
                    ((+$T02().random.NextDouble() < 0.5) && 
                      ((this.currentTrackY | 0) < 6))
                       ? this.currentTrackY
                       : (((this.currentTrackY | 0) + 1) | 0))
                ))
            .MemberwiseClone();
          }
          var flag17 = (((this.track).get_Item(((((this.track).get_Count() | 0) - 1) | 0)).X | 0) === 0) && 
          ((trackToAdd.X >>> 0) > (0 >>> 0));
          if (flag17) {
            trackToAdd.Y = ($T18().Min(6, (((trackToAdd.Y | 0) + 1) | 0)) | 0);
          }
          var flag18 = (trackToAdd.Y | 0) === ((((this.track).get_Item(((((this.track).get_Count() | 0) - 1) | 0)).Y | 0) - 1) | 0);
          if (flag18) {
            (this.track).RemoveAt(((((this.track).get_Count() | 0) - 1) | 0));
            (this.track).Add(new ($T09())(3, (((this.currentTrackY | 0) + 1) | 0)));
          } else {
            var flag19 = (trackToAdd.Y | 0) === ((((this.track).get_Item(((((this.track).get_Count() | 0) - 1) | 0)).Y | 0) + 1) | 0);
            if (flag19) {
              trackToAdd.X = 4;
            }
          }
          (this.track).Add(trackToAdd.MemberwiseClone());
          (this.ceiling).Add(new ($T09())($T02().random.Next(200), $T18().Min((((((this.currentTrackY | 0) - 5) | 0) + (this.ytileOffset | 0)) | 0), $T18().Max(0, ((($S0B().CallStatic($T11(), "Last$b1", [$asm01.Microsoft.Xna.Framework.Point], this.ceiling).Y | 0) + ((
                      (+$T02().random.NextDouble() < 0.15)
                         ? $T02().random.Next(-1, 2)
                         : 0)
                     | 0)) | 0)))));
          var foundGap = false;

        $loop1: 
          for (var j = 0; j < 2; j = ((j + 1) | 0)) {
            var flag20 = (((this.track).get_Item(((((((this.track).get_Count() | 0) - 1) | 0) - j) | 0)).X | 0) === 0) || 
            (((this.track).get_Item(((((((((this.track).get_Count() | 0) - 1) | 0) - j) | 0) - 1) | 0)).Y | 0) !== ((this.track).get_Item(((((((this.track).get_Count() | 0) - 1) | 0) - j) | 0)).Y | 0));
            if (flag20) {
              foundGap = true;
              break $loop1;
            }
          }
          var flag21 = !(foundGap || 
            (+$T02().random.NextDouble() >= +this.obstacleOccurance) || 
            ((this.currentTrackY | 0) <= -2) || 
            (($S0B().CallStatic($T11(), "Last$b1", [$asm01.Microsoft.Xna.Framework.Point], this.track).X | 0) === 3)) && 
          (($S0B().CallStatic($T11(), "Last$b1", [$asm01.Microsoft.Xna.Framework.Point], this.track).X | 0) !== 4);
          if (flag21) {
            (this.obstacles).Add(new ($T09())(1, this.currentTrackY));
          } else {
            (this.obstacles).Add($T09().get_Zero().MemberwiseClone());
          }
          this.lastNoiseValue = noiseValue;
        } else {
          (this.track).Add(new ($T09())($T02().random.Next(1, 3), this.currentTrackY));
          (this.ceiling).Add(new ($T09())($T02().random.Next(200), $S0B().CallStatic($T11(), "Last$b1", [$asm01.Microsoft.Xna.Framework.Point], this.ceiling).Y));
          (this.obstacles).Add($T09().get_Zero().MemberwiseClone());
          (this.lakeDecor).Add(new ($T09())($T02().random.Next(2), $T02().random.Next((((this.ytileOffset | 0) + 1) | 0), (((this.screenHeight | 0) / (this.tileSize | 0)) | 0))));
        }
        this.speedAccumulator = +this.speedAccumulator % +(this.tileSize);
      }
      this.lakeSpeedAccumulator = +this.lakeSpeedAccumulator + (+((time.get_ElapsedGameTime()).get_Milliseconds()) * +((+this.speed / 4)));
      if (+this.lakeSpeedAccumulator >= +(this.tileSize)) {
        this.lakeSpeedAccumulator = +this.lakeSpeedAccumulator % +(this.tileSize);
        (this.lakeDecor).RemoveAt(0);
        (this.lakeDecor).Add(new ($T09())($T02().random.Next(2), $T02().random.Next((((this.ytileOffset | 0) + 3) | 0), (((this.screenHeight | 0) / (this.tileSize | 0)) | 0))));
      }
      this.backBGPosition = +this.backBGPosition + (+((time.get_ElapsedGameTime()).get_Milliseconds()) * +((+this.speed / 5)));
      this.backBGPosition = +this.backBGPosition % 96;
      this.midBGPosition = +this.midBGPosition + (+((time.get_ElapsedGameTime()).get_Milliseconds()) * +((+this.speed / 4)));
      this.midBGPosition = +this.midBGPosition % 96;
      this.waterFallPosition = +this.waterFallPosition + (+((time.get_ElapsedGameTime()).get_Milliseconds()) * +(((+this.speed * 6) / 5)));
      if (+this.waterFallPosition > +((Math.imul(this.screenWidth, 3) / 2 | 0))) {
        this.waterFallPosition = +this.waterFallPosition % +((Math.imul(this.screenWidth, 3) / 2 | 0));
        this.waterfallWidth = ($T02().random.Next(6) | 0);
      }
    } else {
      this.respawnCounter = (((this.respawnCounter | 0) - ((time.get_ElapsedGameTime()).get_Milliseconds() | 0)) | 0);
      this.mineCartYPosition = +trackLine;
    }
    var flag24 = !(((Math.abs((+this.mineCartYPosition - +trackLine))) > 6) || 
      (+this.minecartDY < 0)) && 
    ((this.movingOnSlope | 0) === 0);
    if (flag24) {
      if (+this.minecartDY > 0) {
        this.mineCartYPosition = +trackLine;
        this.minecartDY = 0;
        this.isJumping = false;
        this.reachedJumpApex = false;
        this.createSparkShower();
      }
      var flag26 = ((this.track).get_Item(6).X | 0) === 3;
      if (flag26) {
        this.movingOnSlope = 1;
        this.createSparkShower();
      } else {
        var flag27 = ((this.track).get_Item(6).X | 0) === 4;
        if (flag27) {
          this.movingOnSlope = 2;
          this.createSparkShower();
        }
      }
    } else {
      var flag28 = !(this.isJumping || 
        ((Math.abs((+this.mineCartYPosition - +trackLine))) > 6)) && 
      ((((this.track).get_Item(6).X | 0) === 3) || 
        (((this.track).get_Item(6).X | 0) === 4));
      if (flag28) {
        this.mineCartYPosition = +trackLine;
        var flag29 = (+this.mineCartYPosition === +trackLine) && 
        (((this.track).get_Item(6).X | 0) === 3);
        if (flag29) {
          this.movingOnSlope = 1;
          if ((this.respawnCounter | 0) <= 0) {
            this.createSparkShower($T02().random.Next(2));
          }
        } else {
          var flag31 = (+this.mineCartYPosition === +trackLine) && 
          (((this.track).get_Item(6).X | 0) === 4);
          if (flag31) {
            this.movingOnSlope = 2;
            if ((this.respawnCounter | 0) <= 0) {
              this.createSparkShower($T02().random.Next(2));
            }
          }
        }
        this.minecartDY = 0;
      } else {
        this.movingOnSlope = 0;
        this.minecartDY = +this.minecartDY + +(
          (!(!this.reachedJumpApex && 
              this.isJumping) && 
            (+this.mineCartYPosition !== +trackLine))
             ? 0.21
             : 0)
        ;
        if (+this.minecartDY > 0) {
          this.minecartDY = +$T18().Min(this.minecartDY, 9);
        }
        if ((+this.minecartDY > 0) || ((+this.minecartPositionBeforeJump - +this.mineCartYPosition) <= +this.maxJumpHeight)) {
          this.mineCartYPosition = +this.mineCartYPosition + +this.minecartDY;
        }
      }
    }
    var flag35 = this.reachedFinish;
    if (flag35) {
      this.mineCartXOffset = +this.mineCartXOffset + (+this.speed * +((time.get_ElapsedGameTime()).get_Milliseconds()));
      var flag36 = +$T02().random.NextDouble() < 0.25;
      if (flag36) {
        this.createSparkShower();
      }
    }
    if (+this.mineCartXOffset > +((((this.screenWidth | 0) - Math.imul(6, this.tileSize)) | 0) + (this.tileSize | 0))) {
      var num = (this.gameMode | 0);
      var num2 = num;
      if (num2 !== 0) {
        if (num2 === 3) {
          this.screenDarkness = +this.screenDarkness + +((+((time.get_ElapsedGameTime()).get_Milliseconds()) / 2000));
          if (+this.screenDarkness >= 1) {
            this.reachedFinish = false;
            this.currentTheme = (((((this.currentTheme | 0) + 1) | 0) % 6) | 0);
            this.levelsBeat = (((this.levelsBeat | 0) + 1) | 0);
            if ((this.levelsBeat | 0) === 6) {
              this.unload();
            } else {
              this.setUpTheme(this.currentTheme);
              this.restartLevel();
            }
          }
        }
      } else {
        this.screenDarkness = +this.screenDarkness + +((+((time.get_ElapsedGameTime()).get_Milliseconds()) / 2000));
        if (+this.screenDarkness >= 1) {
          var result = true;
          return result;
        }
      }
    }
    var flag41 = (+this.speedAccumulator >= +(((this.tileSize | 0) / 2 | 0))) && 
    ((((+(+this.mineCartYPosition / +(this.tileSize))) | 0) === ((this.obstacles).get_Item(7).Y | 0)) || 
      (((+((+this.mineCartYPosition / +(this.tileSize))) - +((this.tileSize | 0) - 1)) | 0) === ((this.obstacles).get_Item(7).Y | 0)));
    if (flag41) {
      var x = ((this.obstacles).get_Item(7).X | 0);
      var num3 = x;
      if (num3 !== 1) {
        if (num3 === 2) {
          $T02().playSound("money");
          (this.obstacles).RemoveAt(6);
          (this.obstacles).Insert(6, $T09().get_Zero().MemberwiseClone());
        }
      } else {
        $T02().playSound("woodWhack");
        this.mineCartYPosition = +(this.screenHeight);
      }
    }
    if (+this.mineCartYPosition > +(this.screenHeight)) {
      this.mineCartYPosition = -999999;
      this.livesLeft = (((this.livesLeft | 0) - 1) | 0);
      $T02().playSound("fishEscape");
      if (((this.gameMode | 0) === 0) && (+(this.livesLeft) < 0)) {
        this.mineCartYPosition = 999999;
        this.livesLeft = (((this.livesLeft | 0) + 1) | 0);
        this.screenDarkness = +this.screenDarkness + (+((time.get_ElapsedGameTime()).get_Milliseconds()) * 0.001);
        if (+this.screenDarkness >= 1) {
          result = true;
          return result;
        }
      } else {
        if (((this.gameMode | 0) === 4) || (((this.gameMode | 0) === 3) && 
            ((this.livesLeft | 0) < 0))) {
          if ((this.gameMode | 0) === 3) {
            this.levelsBeat = 0;
            this.setUpTheme(5);
          }
          this.restartLevel();
        } else {
          this.respawnCounter = 1400;
          this.minecartDY = 0;
          this.isJumping = false;
          this.reachedJumpApex = false;
          if ((this.gameMode | 0) === 2) {
            this.totalMotion = 0;
          }
        }
      }
    }
    this.minecartBumpOffset = +$T18().Max(0, +this.minecartBumpOffset - 0.5);

    for (var k = ((((this.sparkShower).get_Count() | 0) - 1) | 0); k >= 0; k = ((k - 1) | 0)) {
      (this.sparkShower).get_Item(k).dy += 0.105;
      (this.sparkShower).get_Item(k).x += +(this.sparkShower).get_Item(k).dx;
      (this.sparkShower).get_Item(k).y += +(this.sparkShower).get_Item(k).dy;
      ((this.sparkShower).get_Item(k).c).set_B(((0 + +$T18().Max(0, (Math.sin(+((+((time.get_TotalGameTime()).get_Milliseconds()) / +((62.831853071795862 / (this.sparkShower).get_Item(k).dx)))))) * 255)) | 0));
      var flag48 = this.reachedFinish;
      if (flag48) {
        ((this.sparkShower).get_Item(k).c).set_R(((0 + +$T18().Max(0, (Math.sin(+((+(((time.get_TotalGameTime()).get_Milliseconds() | 0) + 50) / +((62.831853071795862 / (this.sparkShower).get_Item(k).dx)))))) * 255)) | 0));
        ((this.sparkShower).get_Item(k).c).set_G(((0 + +$T18().Max(0, (Math.sin(+((+(((time.get_TotalGameTime()).get_Milliseconds() | 0) + 100) / +((62.831853071795862 / (this.sparkShower).get_Item(k).dx)))))) * 255)) | 0));
        var flag49 = (((this.sparkShower).get_Item(k).c).get_R() | 0) === 0;
        if (flag49) {
          ((this.sparkShower).get_Item(k).c).set_R(255);
        }
        var flag50 = (((this.sparkShower).get_Item(k).c).get_G() | 0) === 0;
        if (flag50) {
          ((this.sparkShower).get_Item(k).c).set_G(255);
        }
      }
      var flag51 = +(this.sparkShower).get_Item(k).y > +(this.screenHeight);
      if (flag51) {
        (this.sparkShower).RemoveAt(k);
      }
    }
    result = false;
    return result;
  }; 

  function OldMineCart_unload () {
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.OldMineCart", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      OldMineCart__ctor
    );

    $.Method({Static:false, Public:true }, "changeScreenSize", 
      JSIL.MethodSignature.Void, 
      OldMineCart_changeScreenSize
    );

    $.Method({Static:false, Public:true }, "createBeginningOfLevel", 
      JSIL.MethodSignature.Void, 
      OldMineCart_createBeginningOfLevel
    );

    $.Method({Static:false, Public:true }, "createSparkShower", 
      JSIL.MethodSignature.Void, 
      OldMineCart_createSparkShower$00
    );

    $.Method({Static:false, Public:true }, "createSparkShower", 
      JSIL.MethodSignature.Action($.Int32), 
      OldMineCart_createSparkShower$01
    );

    $.Method({Static:false, Public:true }, "doMainGameUpdates", 
      JSIL.MethodSignature.Return($.Boolean), 
      OldMineCart_doMainGameUpdates
    );

    $.Method({Static:false, Public:true }, "draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      OldMineCart_draw
    );

    $.Method({Static:false, Public:true }, "forceQuit", 
      JSIL.MethodSignature.Return($.Boolean), 
      OldMineCart_forceQuit
    );

    $.Method({Static:false, Public:false}, "jump", 
      JSIL.MethodSignature.Void, 
      OldMineCart_jump
    );

    $.Method({Static:false, Public:true }, "leftClickHeld", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      OldMineCart_leftClickHeld
    );

    $.Method({Static:false, Public:true }, "minigameId", 
      JSIL.MethodSignature.Return($.String), 
      OldMineCart_minigameId
    );

    $.Method({Static:false, Public:true }, "receiveEventPoke", 
      JSIL.MethodSignature.Action($.Int32), 
      OldMineCart_receiveEventPoke
    );

    $.Method({Static:false, Public:true }, "receiveKeyPress", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      OldMineCart_receiveKeyPress
    );

    $.Method({Static:false, Public:true }, "receiveKeyRelease", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      OldMineCart_receiveKeyRelease
    );

    $.Method({Static:false, Public:true }, "receiveLeftClick", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      OldMineCart_receiveLeftClick
    );

    $.Method({Static:false, Public:true }, "receiveRightClick", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      OldMineCart_receiveRightClick
    );

    $.Method({Static:false, Public:false}, "releaseJump", 
      JSIL.MethodSignature.Void, 
      OldMineCart_releaseJump
    );

    $.Method({Static:false, Public:true }, "releaseLeftClick", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      OldMineCart_releaseLeftClick
    );

    $.Method({Static:false, Public:true }, "releaseRightClick", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      OldMineCart_releaseRightClick
    );

    $.Method({Static:false, Public:false}, "restartLevel", 
      JSIL.MethodSignature.Void, 
      OldMineCart_restartLevel
    );

    $.Method({Static:false, Public:true }, "setGameModeParameters", 
      JSIL.MethodSignature.Void, 
      OldMineCart_setGameModeParameters
    );

    $.Method({Static:false, Public:true }, "setUpTheme", 
      JSIL.MethodSignature.Action($.Int32), 
      OldMineCart_setUpTheme
    );

    $.Method({Static:false, Public:true }, "tick", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      OldMineCart_tick
    );

    $.Method({Static:false, Public:true }, "unload", 
      JSIL.MethodSignature.Void, 
      OldMineCart_unload
    );

    $.Constant({Static:true , Public:true }, "track1", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "track2", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "noTrack", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "trackSlopeLeft", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "trackSlopeRight", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "minecartObstacle", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "coinObstacle", $.Int32, 2);

    $.Field({Static:false, Public:true }, "pixelScale", $.Int32);

    $.Constant({Static:true , Public:true }, "maxTrackDeviationFromZero", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "tilesBeyondViewportToSimulate", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "bgLoopWidth", $.Int32, 96);

    $.Constant({Static:true , Public:true }, "tileOfMineCart", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "gapsBeforeForcedTrack", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "tracksBeforeConsideredObstacle", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "gravity", $.Single, 0.21);

    $.Constant({Static:true , Public:true }, "snapMinecartToTrackThreshold", $.Single, 6);

    $.Constant({Static:true , Public:true }, "maxDY", $.Single, 4.5);

    $.Field({Static:false, Public:true }, "maxJumpHeight", $.Single);

    $.Constant({Static:true , Public:true }, "jumpStrengthPerTick", $.Single, 0.6);

    $.Constant({Static:true , Public:true }, "dyThreshAtWhichJumpIsImpossible", $.Single, 1);

    $.Constant({Static:true , Public:true }, "frostArea", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "lavaArea", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "waterArea", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "darkArea", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "heavenlyArea", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "brownArea", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "noSlope", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "slopingUp", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "slopingDown", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "mineLevelMode", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "arcadeTitleScreenMode", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "infiniteMode", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "progressMode", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "highScoreMode", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "respawnTime", $.Int32, 1400);

    $.Constant({Static:true , Public:true }, "distanceToTravelInMineMode", $.Int32, 350);

    $.Constant({Static:true , Public:true }, "ceilingHeightFluctuation", $.Double, 0.15);

    $.Constant({Static:true , Public:true }, "coinOccurance", $.Double, 0.01);

    $.Field({Static:false, Public:false}, "speed", $.Single);

    $.Field({Static:false, Public:false}, "speedAccumulator", $.Single);

    $.Field({Static:false, Public:false}, "lakeSpeedAccumulator", $.Single);

    $.Field({Static:false, Public:false}, "backBGPosition", $.Single);

    $.Field({Static:false, Public:false}, "midBGPosition", $.Single);

    $.Field({Static:false, Public:false}, "waterFallPosition", $.Single);

    $.Field({Static:false, Public:false}, "noiseSeed", $.Int32);

    $.Field({Static:false, Public:false}, "currentTrackY", $.Int32);

    $.Field({Static:false, Public:false}, "screenWidth", $.Int32);

    $.Field({Static:false, Public:false}, "screenHeight", $.Int32);

    $.Field({Static:false, Public:false}, "tileSize", $.Int32);

    $.Field({Static:false, Public:false}, "waterfallWidth", $.Int32);

    $.Field({Static:false, Public:false}, "ytileOffset", $.Int32);

    $.Field({Static:false, Public:false}, "totalMotion", $.Int32);

    $.Field({Static:false, Public:false}, "movingOnSlope", $.Int32);

    $.Field({Static:false, Public:false}, "levelsBeat", $.Int32);

    $.Field({Static:false, Public:false}, "gameMode", $.Int32);

    $.Field({Static:false, Public:false}, "livesLeft", $.Int32);

    $.Field({Static:false, Public:false}, "distanceToTravel", $.Int32);

    $.Field({Static:false, Public:false}, "respawnCounter", $.Int32);

    $.Field({Static:false, Public:false}, "currentTheme", $.Int32);

    $.Field({Static:false, Public:false}, "mineCartYPosition", $.Single);

    $.Field({Static:false, Public:false}, "mineCartXOffset", $.Single);

    $.Field({Static:false, Public:false}, "minecartDY", $.Single);

    $.Field({Static:false, Public:false}, "minecartPositionBeforeJump", $.Single);

    $.Field({Static:false, Public:false}, "minecartBumpOffset", $.Single);

    $.Field({Static:false, Public:false}, "lastNoiseValue", $.Double);

    $.Field({Static:false, Public:false}, "heightChangeThreshold", $.Double);

    $.Field({Static:false, Public:false}, "obstacleOccurance", $.Double);

    $.Field({Static:false, Public:false}, "heightFluctuationsThreshold", $.Double);

    $.Field({Static:false, Public:false}, "isJumping", $.Boolean);

    $.Field({Static:false, Public:false}, "reachedJumpApex", $.Boolean);

    $.Field({Static:false, Public:false}, "reachedFinish", $.Boolean);

    $.Field({Static:false, Public:false}, "screenDarkness", $.Single);

    $.Field({Static:false, Public:false}, "texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "track", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Field({Static:false, Public:false}, "lakeDecor", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Field({Static:false, Public:false}, "ceiling", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Field({Static:false, Public:false}, "obstacles", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Field({Static:false, Public:false}, "sparkShower", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.OldMineCart+Spark")]));

    $.Field({Static:false, Public:false}, "backBGTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "midBGTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "caveTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "lakeTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "waterfallTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "trackShadowTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "trackTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "transformMatrix", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.OldMineCart+Spark */ 

(function Spark$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };


  function Spark__ctor (x, y, dx, dy) {
    this.x = +x;
    this.y = +y;
    this.dx = +dx;
    this.dy = +dy;
    this.c = $T01().get_Yellow().MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.OldMineCart+Spark", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Spark__ctor
    );

    $.Field({Static:false, Public:true }, "x", $.Single);

    $.Field({Static:false, Public:true }, "y", $.Single);

    $.Field({Static:false, Public:true }, "c", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:true }, "dx", $.Single);

    $.Field({Static:false, Public:true }, "dy", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart */ 

(function MineCart$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_LakeDecor))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Spark))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Entity))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Collections.Generic.HashSet$b1.Of($asm00.StardewValley.Minigames.MineCart_CollectableFruits))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_GeneratorRoll))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Collections.Generic.Dictionary$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Collections.Generic.List$b1.Of($asm06.System.Type)))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.JunimoKart.ICue)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Func$b1.Of($asm06.System.Boolean))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_StraightAwayGenerator)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GoalIndicator)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_LevelTransition)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_CheckpointIndicator)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_ObstacleTypes)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm06.System.Activator)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm06.System.Comparison$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm06.System.Collections.Generic.Dictionary$b2.Of($asm06.System.Int32, $asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track)))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_$l$gc)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Type))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GameStates)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_CollectableFruits)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_LakeDecor)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Pickup)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Fruit)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Coin)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Spark)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.JunimoKart.HighScores)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Whale)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerBubbleSpawner)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_HugeSlime)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_ICollideable)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize(System.Array.Of($asm00.StardewValley.Minigames.MineCart_LevelTransition))) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm06.System.NotImplementedException)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm06.System.Object)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm00.StardewValley.NoiseGenerator)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Roadblock)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_FallingBoulderSpawner)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GeneratorRoll)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_SmallGapGenerator)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BunnyHopGenerator)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm06.System.Func$b3.Of(
        $asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, 
        $asm06.System.Boolean
    ))) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_WillOWisp)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_RapidHopsGenerator)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_NoxiousMushroom)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MushroomBalanceTrackGenerator)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MushroomBunnyHopGenerator)) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_CosmeticFallingBoulder)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MapJunimo)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm09.System.Linq.Enumerable)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm06.System.Collections.Generic.IEnumerable$b1.Of($asm00.StardewValley.Minigames.MineCart_LevelTransition))) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm06.System.Func$b2.Of($asm00.StardewValley.Minigames.MineCart_LevelTransition, $asm06.System.Boolean))) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm07.System.Diagnostics.Stopwatch)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm06.System.Int64)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_FallingBoulder)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Whale_CurrentState)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MushroomSpring)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack))) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BalanceTrack)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_EndingJunimo)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm00.JunimoKart.AI)) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MapJunimo_MoveState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_LakeDecor), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Spark), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Entity), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.System.Collections.Generic.HashSet$b1.Of($asm00.StardewValley.Minigames.MineCart_CollectableFruits), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_GeneratorRoll), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.Dictionary$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Collections.Generic.List$b1.Of($asm06.System.Type)), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm06.System.Single]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Object, [$asm06.System.Type]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track), null))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_Track]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Comparison`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")])]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Type), null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Rectangle, [$asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.String]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.SpriteFont, $asm06.System.String, 
        $asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Int32")])]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.NotImplementedException, null))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.Dictionary$b2.Of($asm06.System.Int32, $asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track)), null))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm06.System.Int32, $asm06.System.Int32, 
        $asm06.System.Int32
      ]))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Boolean, [$asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator]))) ();
  };
  var $S1F = function () {
    return ($S1F = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S20 = function () {
    return ($S20 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Boolean")))) ();
  };
  var $S21 = function () {
    return ($S21 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Boolean, [$asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator]))) ();
  };
  var $S22 = function () {
    return ($S22 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Boolean, [$asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator]))) ();
  };
  var $S23 = function () {
    return ($S23 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S24 = function () {
    return ($S24 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S25 = function () {
    return ($S25 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Boolean, [$asm00.StardewValley.Minigames.MineCart_LevelTransition]))) ();
  };
  var $S26 = function () {
    return ($S26 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S27 = function () {
    return ($S27 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Boolean, [$asm00.StardewValley.Minigames.MineCart_LevelTransition]))) ();
  };
  var $S28 = function () {
    return ($S28 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack), null))) ();
  };
  var $S29 = function () {
    return ($S29 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+BalanceTrack")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_ICollideable.GetBounds)) ();
  };


  function MineCart__ctor (whichTheme, mode) {
    this.pixelScale = 4;
    this.infiniteModeLevels = JSIL.Array.New($T00(), [0, 1, 2, 3, 5, 9, 4, 6]);
    this._shakeOffset = $T01().get_Zero().MemberwiseClone();
    this.slimeBossPosition = -100;
    this.currentFruitCheckIndex = -1;
    this.noiseSeed = ($T03().random.Next(0, 2147483647) | 0);
    this.completelyPerfect = true;
    this.waterfallWidth = 1;
    this.distanceToTravel = -1;
    this.cutsceneText = "";
    this.lakeDecor = $S00().Construct();
    this.obstacles = $S01().Construct();
    this.sparkShower = $S02().Construct();
    this.levelThemesFinishedThisRun = $S03().Construct();
    this.midBGSource = new ($T08())(64, 0, 96, 162);
    this.backBGSource = new ($T08())(64, 162, 96, 111);
    this.lakeBGSource = new ($T08())(0, 80, 16, 97);
    this._lastTilePosition = -1;
    this.slimeResetPosition = -80;
    this._currentHighScores = $S04().Construct();
    this._entities = $S05().Construct();
    this._collectedFruit = $S06().Construct();
    this._generatorRolls = $S07().Construct();
    this._validObstacles = $S08().Construct();
    this.initLevelTransitions();
    this.changeScreenSize();
    this.texture = $T03().content.Load$b1($T0E())("MineCart");
    this.minecartLoop = $T03().minecartLoop;
    (this.minecartLoop).Play();
    (this.minecartLoop).Pause();
    this.backBGYOffset = Math.imul(this.tileSize, 2);
    this.ytileOffset = (((((this.screenHeight | 0) / 2) | 0) / (this.tileSize | 0)) | 0);
    this.gameMode = (mode | 0);
    this.bottomTile = (((((this.screenHeight | 0) / (this.tileSize | 0)) | 0) - 1) | 0);
    this.topTile = 4;
    this.currentTheme = (whichTheme | 0);
    this.startTheme = (whichTheme | 0);
    this.ShowTitle();
  }; 

  function MineCart__GenerateMoreTrack () {

  $loop0: 
    while (+((this.generatorPosition.X | 0) * (this.tileSize | 0)) <= ((+this.screenLeftBound + +(this.screenWidth)) + +(16 * (this.tileSize | 0)))) {
      if (this._trackGenerator === null) {
        if ((this.generatorPosition.X | 0) >= (this.distanceToTravel | 0)) {
          this._trackGenerator = null;
          break $loop0;
        }
        var tries = 0;

      $loop1: 
        while (tries < 2) {

          var $label0 = 0;
        $labelgroup0: 
          while (true) {
            switch ($label0) {
              case 0: /* $entry0 */ 

              $loop2: 
                for (var i = 0; i < ((this._generatorRolls).get_Count() | 0); i = ((i + 1) | 0)) {
                  if (this._forcedNextGenerator !== null) {
                    this._trackGenerator = this._forcedNextGenerator;
                    this._forcedNextGenerator = null;
                    break $loop2;
                  }
                  var flag4 = !(((this._generatorRolls).get_Item(i).generator === this._lastGenerator) || 
                    (+$T03().random.NextDouble() >= (this._generatorRolls).get_Item(i).chance)) && 
                  (((this._generatorRolls).get_Item(i).additionalGenerationCondition === null) || 
                    (this._generatorRolls).get_Item(i).additionalGenerationCondition());
                  if (flag4) {
                    this._trackGenerator = (this._generatorRolls).get_Item(i).generator;
                    this._forcedNextGenerator = (this._generatorRolls).get_Item(i).forcedNextGenerator;
                    break $loop2;
                  }
                }
                if (this._trackGenerator !== null) {
                  break $loop1;
                }
                if (this._trackGenerator === null) {
                  if (this._lastGenerator !== null) {
                    this._lastGenerator = null;
                  } else {
                    this._trackGenerator = ((((new ($T13())(this))).SetLength(2, 2)).SetStaggerChance(0)).SetCheckpoint(false);
                    this._forcedNextGenerator = null;
                  }
                }

                $label0 = 1 /* goto IL_197 */ ;
                continue $labelgroup0;
              case 1: /* IL_197 */ 
                tries = ((tries + 1) | 0);

                break $labelgroup0;
            }
          }
        }
        (this._trackGenerator).Initialize();
        this._lastGenerator = this._trackGenerator;
      }
      if (this._trackGenerator !== null) {
        (this._trackGenerator).GenerateTrack();
      }
      if ((this.generatorPosition.X | 0) >= (this.distanceToTravel | 0)) {
        break $loop0;
      }
      this._trackGenerator = null;
    }
    if ((this.generatorPosition.X | 0) >= (this.distanceToTravel | 0)) {
      var track = this.AddTrack(this.generatorPosition.X, this.generatorPosition.Y, $T16().Straight);
      if (this._goalIndicator === null) {
        this._goalIndicator = this.AddEntity$b1($T17())(new ($T17())());
        this._goalIndicator.position.X = (+(this.generatorPosition.X) + 0.5) * +(this.tileSize);
        this._goalIndicator.position.Y = +(track.GetYAtPoint(this._goalIndicator.position.X));
      } else {
        this.CreatePickup($S09().CallStatic($T01(), "op_Multiply", null, $S0A().Construct((+(this.generatorPosition.X) + 0.5), +((this.generatorPosition.Y | 0) - 1)), +(this.tileSize)).MemberwiseClone(), true);
      }
      this.generatorPosition.X = (((this.generatorPosition.X | 0) + 1) | 0);
    }
  }; 

  function MineCart__IsGeneratingOnLowerHalf () {
    return ((this.generatorPosition.Y | 0) >= (((((this.topTile | 0) + (this.bottomTile | 0)) | 0) / 2) | 0));
  }; 

  function MineCart__IsGeneratingOnUpperHalf () {
    return ((this.generatorPosition.Y | 0) <= (((((this.topTile | 0) + (this.bottomTile | 0)) | 0) / 2) | 0));
  }; 

  function MineCart_$linitLevelTransitions$gb__166_0 () {
    return this.lastLevelWasPerfect;
  }; 

  function MineCart_$linitLevelTransitions$gb__166_1 () {
    return (+this.secondsOnThisLevel <= 60);
  }; 

  function MineCart_$lShowMap$gb__201_0 (t) {
    return (((t.startLevel | 0) === (this.currentTheme | 0)) && ((t.destinationLevel | 0) === (this.startTheme | 0)));
  }; 

  function MineCart_$lShowTitle$gb__167_0 (t) {
    return ((t.destinationLevel | 0) === (this.startTheme | 0));
  }; 

  function MineCart_AddCheckpoint (tile_x) {
    if ((this.gameMode | 0) !== 2) {
      tile_x = (this.GetValidCheckpointPosition(tile_x) | 0);
      var flag2 = !(((tile_x | 0) === (this.furthestGeneratedCheckpoint | 0)) || 
        ((tile_x | 0) <= (((this.furthestGeneratedCheckpoint | 0) + 8) | 0))) && 
      this.IsTileInBounds(((+(+this.GetTrackForXPosition(+((tile_x | 0) * (this.tileSize | 0))).position.Y / +(this.tileSize))) | 0));
      if (flag2) {
        this.furthestGeneratedCheckpoint = (tile_x | 0);
        var checkpoint_indicator = this.AddEntity$b1($T19())(new ($T19())());
        checkpoint_indicator.position.X = (+tile_x + 0.5) * +(this.tileSize);
        checkpoint_indicator.position.Y = +((this.GetTrackForXPosition(+((tile_x | 0) * (this.tileSize | 0)))).GetYAtPoint(+checkpoint_indicator.position.X + 5));
        (this.checkpointPositions).Add(tile_x);
      }
    }
  }; 

  function MineCart_AddEntity$b1 (T, new_entity) {
    (this._entities).Add(JSIL.CloneParameter(T, $T1B().$Cast(new_entity)));
    ($T1B().$Cast(new_entity)).Initialize(this);
    return new_entity;
  }; 

  function MineCart_AddObstacle (track, obstacle_type) {
    if (track === null) {
      var result = null;
    } else {
      var flag2 = !(this._validObstacles).ContainsKey(obstacle_type);
      if (flag2) {
        result = null;
      } else {
        var type2 = $T1E().GetRandom$b1($T1A())((this._validObstacles).get_Item(obstacle_type), null);
        var obstacle = this.AddEntity$b1($T1D())($T1D().$As($S0B().CallStatic($T1F(), "CreateInstance", null, type2)));
        if (!obstacle.CanSpawnHere(track)) {
          obstacle.Destroy();
          result = null;
        } else {
          obstacle.position.X = +track.position.X + +(((this.tileSize | 0) / 2 | 0));
          obstacle.position.Y = +(track.GetYAtPoint(obstacle.position.X));
          track.obstacle = obstacle;
          obstacle.InitializeObstacle(track);
          result = obstacle;
        }
      }
    }
    return result;
  }; 

  function MineCart_AddTrack$00 (x, y, type) {
    if ((type === $T16().UpSlope) || (type === $T16().SlimeUpSlope)) {
      y = (((y | 0) + 1) | 0);
    }
    this._trackAddedFlip = !this._trackAddedFlip;
    var track_object = new ($T15())(type, this._trackAddedFlip);
    track_object.position.X = +((x | 0) * (this.tileSize | 0));
    track_object.position.Y = +((y | 0) * (this.tileSize | 0));
    return this.AddTrack(track_object);
  }; 

  function MineCart_AddTrack$01 (track_object) {
    var arg_83_1 = null;
    var track = this.AddEntity$b1($T15())(track_object);
    var x = ((+(+track.position.X / +(this.tileSize))) | 0);
    var flag = !(this._tracks).ContainsKey(x);
    if (flag) {
      (this._tracks).set_Item(x, $S0C().Construct());
    }
    ((this._tracks).get_Item(x)).Add(track_object);
    var arg_83_0 = (this._tracks).get_Item(x);
    if ((arg_83_1 = $T23().$l$g9__178_0) === null) {
      arg_83_1 = $T23().$l$g9__178_0 = $T20().New($T23().$l$g9, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_$l$gc, "$lAddTrack$gb__178_0", $S0D(), false, false));
    }
    $S0E().Call($T22().prototype, "Sort", null, arg_83_0, arg_83_1);
    return track;
  }; 

  function MineCart_AddValidObstacle (obstacle_type, type) {
    if (this._validObstacles !== null) {
      var flag2 = !(this._validObstacles).ContainsKey(obstacle_type);
      if (flag2) {
        (this._validObstacles).set_Item(obstacle_type, $S0F().Construct());
      }
      ((this._validObstacles).get_Item(obstacle_type)).Add(type);
    }
  }; 

  function MineCart_CanPause () {
    if (this.gameState === $T25().Ingame) {
      var result = true;
    } else {
      if (this.gameState === $T25().FruitsSummary) {
        result = true;
      } else {
        if (this.gameState === $T25().Cutscene) {
          result = true;
        } else {
          result = this.gameState === $T25().Map;
        }
      }
    }
    return result;
  }; 

  function MineCart_changeScreenSize () {
    this.screenWidth = 400;
    this.screenHeight = 220;
    var viewport_width = ($T03().viewport.get_Width() | 0);
    var viewport_height = ($T03().viewport.get_Height() | 0);
    this.pixelScale = +($T27().Min(5, ((Math.floor($T27().Min(+((viewport_width / (this.screenWidth | 0) | 0)) * 1, +((viewport_height / (this.screenHeight | 0) | 0)) * 1))) | 0)));
    this.upperLeft = $S0A().Construct((+((viewport_width / 2 | 0)) * 1), (+((viewport_height / 2 | 0)) * 1));
    this.upperLeft.X = +this.upperLeft.X - (+(((this.screenWidth | 0) / 2 | 0)) * +this.pixelScale);
    this.upperLeft.Y = +this.upperLeft.Y - (+(((this.screenHeight | 0) / 2 | 0)) * +this.pixelScale);
    this.tileSize = 16;
    this.ytileOffset = (((((this.screenHeight | 0) / 2) | 0) / (this.tileSize | 0)) | 0);
  }; 

  function MineCart_CollectCoin (amount) {
    if ((this.gameMode | 0) === 3) {
      this.coinCount = (((this.coinCount | 0) + (amount | 0)) | 0);
      if ((this.coinCount | 0) >= 100) {
        $T03().playSound("yoba");
        var added_lives = (((this.coinCount | 0) / 100) | 0);
        this.coinCount = (((this.coinCount | 0) % 100) | 0);
        this.livesLeft = (((this.livesLeft | 0) + added_lives) | 0);
      }
    } else {
      this.score = (((this.score | 0) + 30) | 0);
      this.UpdateScoreState();
    }
  }; 

  function MineCart_CollectFruit (fruit_type) {
    (this._collectedFruit).Add(fruit_type);
    if ((this.gameMode | 0) === 3) {
      this.CollectCoin(10);
    } else {
      this.score = (((this.score | 0) + 1000) | 0);
      this.UpdateScoreState();
    }
  }; 

  function MineCart_createBeginningOfLevel () {
    this.CreateLakeDecor();

    for (var i = 0; i < 15; i = ((i + 1) | 0)) {
      this.AddTrack(this.generatorPosition.X, this.generatorPosition.Y, $T16().Straight);
      this.generatorPosition.X = (((this.generatorPosition.X | 0) + 1) | 0);
    }
  }; 

  function MineCart_CreateBGDecor () {

    for (var i = 0; i < 16; i = ((i + 1) | 0)) {
      (this.lakeDecor).Add(new ($T2A())(this, this.currentTheme, true, i));
    }
  }; 

  function MineCart_CreateLakeDecor () {

    for (var i = 0; i < 16; i = ((i + 1) | 0)) {
      (this.lakeDecor).Add(new ($T2A())(this, this.currentTheme, false, -1));
    }
  }; 

  function MineCart_CreatePickup (position, fruit_only) {
    var flag = (+position.Y < +(this.tileSize)) && 
    !fruit_only;
    if (flag) {
      var result = null;
    } else {
      var pickup = null;
      var spawned_fruit = 0;

      for (var i = 0; (i < 3) && (this._spawnedFruit).Contains($T29().$Cast(i)); i = ((i + 1) | 0)) {
        spawned_fruit = ((spawned_fruit + 1) | 0);
      }
      var flag2 = spawned_fruit <= 2;
      if (flag2) {
        var boundary_position = 0;
        switch (spawned_fruit) {
          case 0: 
            boundary_position = (0.15 * +(this.distanceToTravel)) * +(this.tileSize);
            break;

          case 1: 
            boundary_position = (0.48 * +(this.distanceToTravel)) * +(this.tileSize);
            break;

          case 2: 
            boundary_position = (0.81 * +(this.distanceToTravel)) * +(this.tileSize);
            break;

        }
        var flag3 = +position.X >= boundary_position;
        if (flag3) {
          (this._spawnedFruit).Add($T29().$Cast(spawned_fruit));
          pickup = this.AddEntity$b1($T2B())(new ($T2D())($T29().$Cast(spawned_fruit)));
        }
      }
      var flag4 = (pickup === null) && 
      !fruit_only;
      if (flag4) {
        pickup = this.AddEntity$b1($T2B())(new ($T2E())());
      }
      var flag5 = pickup !== null;
      if (flag5) {
        pickup.position = position.MemberwiseClone();
      }
      result = pickup;
    }
    return result;
  }; 

  function MineCart_createSparkShower$02 (position) {
    var number = ($T03().random.Next(3, 7) | 0);

    for (var i = 0; i < number; i = ((i + 1) | 0)) {
      (this.sparkShower).Add(new ($T2F())((+position.X - 3), position.Y, +((+($T03().random.Next(-200, 5)) / 100)), +((+(-+($T03().random.Next(5, 150))) / 100))));
    }
  }; 

  function MineCart_createSparkShower$03 () {
    var number = ($T03().random.Next(3, 7) | 0);

    for (var i = 0; i < number; i = ((i + 1) | 0)) {
      (this.sparkShower).Add(new ($T2F())((+(this.player).get_drawnPosition().X - 3), (this.player).get_drawnPosition().Y, +((+($T03().random.Next(-200, 5)) / 100)), +((+(-+($T03().random.Next(5, 150))) / 100))));
    }
  }; 

  function MineCart_createSparkShower$04 (number) {

    for (var i = 0; i < (number | 0); i = ((i + 1) | 0)) {
      (this.sparkShower).Add(new ($T2F())((+(this.player).get_drawnPosition().X - 3), (((+this.player.position.Y * +(this.tileSize)) + +(this.tileSize)) - 4), +((+($T03().random.Next(-200, 5)) / 100)), +((+(-+($T03().random.Next(5, 150))) / 100))));
    }
  }; 

  function MineCart_Die () {
    if (!(((this.respawnCounter | 0) > 0) || 
        (+this.deathTimer > 0) || 
        this.reachedFinish || !this.player.enabled)) {
      (this.player).OnDie();
      this.AddEntity$b1($T31())(new ($T31())(new ($T08())(16, 96, 16, 16), this.player.position.MemberwiseClone(), +($T03().random.Next(-80, 81)), +($T03().random.Next(-100, -49)), 0, 1, 1, 1, 1, 0.1, 0.45, false, 0));
      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(32, 96, 16, 16), $T01().op_Addition(this.player.position.MemberwiseClone(), $S0A().Construct(0, (0 - +this.player.characterExtraHeight))).MemberwiseClone(), +($T03().random.Next(-80, 81)), +($T03().random.Next(-150, -99)), 0.1, 1, 1, 0.6666667, 1, 0.1, 0.45, false, 0))).SetColor($T32().get_Lime().MemberwiseClone());
      this.player.position.Y = -1000;
      $T03().playSound("fishEscape");
      this.player.enabled = false;
      this.lastLevelWasPerfect = false;
      this.completelyPerfect = false;
      if (this.gameState !== $T25().Cutscene) {
        this.livesLeft = (((this.livesLeft | 0) - 1) | 0);
        if (((this.gameMode | 0) !== 3) || ((this.livesLeft | 0) < 0)) {
          this.gameOver = true;
          this.fadeDelta = 1;
          if ((this.gameMode | 0) === 2) {
            var flag5 = (($T34().Get().get_Item(0)).get_Value() | 0) < (this.score | 0);
            if (flag5) {
            }
            $T34().AddScore("Player", this.score);
            this.RefreshHighScore();
          }
        } else {
          this.player.position.X = +this.checkpointPosition;

          for (var i = 0; i < 6; i = ((i + 1) | 0)) {
            var runway_track = this.GetTrackForXPosition((+((+this.checkpointPosition / +(this.tileSize))) + +i) * +(this.tileSize));
            var flag6 = (runway_track !== null) && 
            (runway_track.obstacle !== null);
            if (flag6) {
              (runway_track.obstacle).Destroy();
              runway_track.obstacle = null;
            }
          }
          (this.player).SnapToFloor();
          this.deathTimer = 0.25;
          this.respawnCounter = 1400;
        }
      }
    }
  }; 

  function MineCart_doMainGameUpdates () {
    return false;
  }; 

  function MineCart_draw (b) {
    var $temp00, $temp01;
    var score_offset = new ($T01())(), draw_position = new ($T01())(), shadow_offset = new ($T01())(), draw_position2 = new ($T01())(), source_rect = new ($T08())();
    this._shakeOffset = $S0A().Construct($T1E().Lerp(0 - +this.shakeMagnitude, this.shakeMagnitude, Math.fround($T03().random.NextDouble())), $T1E().Lerp(0 - +this.shakeMagnitude, this.shakeMagnitude, Math.fround($T03().random.NextDouble())));
    var flag = this.gamePaused;
    if (flag) {
      this._shakeOffset = $T01().get_Zero().MemberwiseClone();
    }
    b.Begin(
      $T36().BackToFront, 
      $T37().AlphaBlend, 
      $T38().PointClamp, 
      null, 
      $T39().CullNone
    );
    if (this.gameState !== $T25().Map) {
      if (this.gameState !== $T25().FruitsSummary) {
        if (this.gameState !== $T25().Cutscene) {

          for (var i6 = 0; i6 <= (((((this.screenWidth | 0) / (this.tileSize | 0)) | 0) + 1) | 0); i6 = ((i6 + 1) | 0)) {
            b.Draw(
              this.texture, 
              $S10().CallVirtual("TransformDraw", null, this, new ($T08())(((Math.imul(i6, this.tileSize) - ((((this.lakeSpeedAccumulator) | 0) % (this.tileSize | 0)) | 0)) | 0), Math.imul(this.tileSize, 9), this.tileSize, (((this.screenHeight | 0) - 96) | 0))).MemberwiseClone(), 
              this.lakeBGSource.MemberwiseClone(), 
              this.lakeTint.MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              $T3A().None, 
              0.9
            );
          }

          for (var i7 = 0; i7 < ((this.lakeDecor).get_Count() | 0); i7 = ((i7 + 1) | 0)) {
            ((this.lakeDecor).get_Item(i7)).Draw(b);
          }

          for (var i8 = 0; i8 <= (((((this.screenWidth | 0) / (this.backBGSource.Width | 0)) | 0) + 2) | 0); i8 = ((i8 + 1) | 0)) {
            $S11().CallVirtual("Draw", null, b, 
              this.texture, 
              $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(((0 - +this.backBGPosition) + +(i8 * (this.backBGSource.Width | 0))), +(this.backBGYOffset))).MemberwiseClone(), 
              this.backBGSource.MemberwiseClone(), 
              this.backBGTint.MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              this.GetPixelScale(), 
              $T3A().None, 
              0.7
            );
          }

          for (var i9 = 0; i9 < (((((this.screenWidth | 0) / (this.midBGSource.Width | 0)) | 0) + 2) | 0); i9 = ((i9 + 1) | 0)) {
            $S11().CallVirtual("Draw", null, b, 
              this.texture, 
              $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(((0 - +this.midBGPosition) + +(i9 * (this.midBGSource.Width | 0))), +(((162 - (this.midBGSource.Height | 0)) | 0) + (this.midBGYOffset | 0)))).MemberwiseClone(), 
              this.midBGSource.MemberwiseClone(), 
              this.midBGTint.MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              this.GetPixelScale(), 
              $T3A().None, 
              0.6
            );
          }
        }
      }
    }

    for (var a$0 = this._entities._items, i$0 = 0, l$0 = (this._entities._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var entity = a$0[i$0];
      if (entity.IsOnScreen()) {
        entity.Draw(b);
      }
    }

    for (var a$1 = this.sparkShower._items, i$1 = 0, l$1 = (this.sparkShower._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var s = a$1[i$1];
      b.Draw(
        $T03().staminaRect, 
        $S10().CallVirtual("TransformDraw", null, this, new ($T08())(((s.x) | 0), ((s.y) | 0), 1, 1)).MemberwiseClone(), 
        null, 
        s.c.MemberwiseClone(), 
        0, 
        $T01().get_Zero().MemberwiseClone(), 
        $T3A().None, 
        0.3
      );
    }
    if (this.gameState === $T25().Title) {
      $S11().CallVirtual("Draw", null, b, 
        this.texture, 
        $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(+((((this.screenWidth | 0) / 2) | 0) - 128), +((((this.screenHeight | 0) / 2) | 0) - 35))).MemberwiseClone(), 
        new ($T08())(256, 409, 256, 71), 
        $T32().get_White().MemberwiseClone(), 
        0, 
        $T01().get_Zero().MemberwiseClone(), 
        this.GetPixelScale(), 
        $T3A().None, 
        0.25
      );
      if ((this.gameMode | 0) === 2) {
        (score_offset = score_offset.MemberwiseClone(), 
          $T01().prototype._ctor.call(score_offset, 125, 0));
        (draw_position = draw_position.MemberwiseClone(), 
          $T01().prototype._ctor.call(draw_position, +(((this.screenWidth | 0) / 2 | 0)) - +((+score_offset.X / 2)), 155));

        for (var i10 = 0; (i10 < 5) && (i10 < ((this._currentHighScores).get_Count() | 0)); i10 = ((i10 + 1) | 0)) {
          var color = $T32().get_White().MemberwiseClone();
          var flag8 = i10 === 0;
          if (flag8) {
            color = $T1E().GetPrismaticColor(0, 1).MemberwiseClone();
          }
          var score = (this._currentHighScores).get_Item(i10).MemberwiseClone();
          if ($T03().dialogueFont !== null) {
            var score_text_width = (((($S13().CallVirtual("MeasureString", null, $T03().dialogueFont, String($T00().$Box(score.get_Value()))).X) | 0) / 4) | 0);
            $S14().CallVirtual("DrawString", null, b, 
              $T03().dialogueFont, 
              JSIL.ConcatString("#", (((i10 + 1) | 0)).toString()), 
              $S12().CallVirtual("TransformDraw", null, this, draw_position.MemberwiseClone()).MemberwiseClone(), 
              color.MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              +((+this.GetPixelScale() / 4)), 
              $T3A().None, 
              0.199
            );
            $S14().CallVirtual("DrawString", null, b, 
              $T03().dialogueFont, 
              score.get_Key(), 
              $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position.MemberwiseClone(), $S0A().Construct(16, 0)).MemberwiseClone()).MemberwiseClone(), 
              color.MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              +((+this.GetPixelScale() / 4)), 
              $T3A().None, 
              0.199
            );
            $S14().CallVirtual("DrawString", null, b, 
              $T03().dialogueFont, 
              String($T00().$Box(score.get_Value())), 
              $S12().CallVirtual("TransformDraw", null, this, $T01().op_Subtraction($T01().op_Addition(draw_position.MemberwiseClone(), score_offset.MemberwiseClone()).MemberwiseClone(), $S0A().Construct(+score_text_width, 0)).MemberwiseClone()).MemberwiseClone(), 
              color.MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              +((+this.GetPixelScale() / 4)), 
              $T3A().None, 
              0.199
            );
            (shadow_offset = shadow_offset.MemberwiseClone(), 
              $T01().prototype._ctor.call(shadow_offset, 1, 1));
            $S14().CallVirtual("DrawString", null, b, 
              $T03().dialogueFont, 
              JSIL.ConcatString("#", (((i10 + 1) | 0)).toString()), 
              $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position.MemberwiseClone(), shadow_offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
              $T32().get_Black().MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              +((+this.GetPixelScale() / 4)), 
              $T3A().None, 
              0.1999
            );
            $S14().CallVirtual("DrawString", null, b, 
              $T03().dialogueFont, 
              score.get_Key(), 
              $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition($T01().op_Addition(draw_position.MemberwiseClone(), $S0A().Construct(16, 0)).MemberwiseClone(), shadow_offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
              $T32().get_Black().MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              +((+this.GetPixelScale() / 4)), 
              $T3A().None, 
              0.1999
            );
            $S14().CallVirtual("DrawString", null, b, 
              $T03().dialogueFont, 
              String($T00().$Box(score.get_Value())), 
              $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition($T01().op_Subtraction($T01().op_Addition(draw_position.MemberwiseClone(), score_offset.MemberwiseClone()).MemberwiseClone(), $S0A().Construct(+score_text_width, 0)).MemberwiseClone(), shadow_offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
              $T32().get_Black().MemberwiseClone(), 
              0, 
              $T01().get_Zero().MemberwiseClone(), 
              +((+this.GetPixelScale() / 4)), 
              $T3A().None, 
              0.1999
            );
            draw_position.Y = +draw_position.Y + 10;
          }
        }
      }
    } else {
      if (this.gameState === $T25().Map) {
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(0, 0)).MemberwiseClone(), 
          new ($T08())(0, 512, 400, 224), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.6
        );
        var flag11 = !(this.levelThemesFinishedThisRun).Contains(3);
        if (flag11) {
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(221, 104)).MemberwiseClone(), 
            new ($T08())(455, 512, 57, 64), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.21
          );
        }
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(369, 51)).MemberwiseClone(), 
          new ($T08())(480, 579, 31, 32), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.21
        );
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(109, 198)).MemberwiseClone(), 
          new ($T08())(420, 512, 25, 26), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.21
        );
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(229, 213)).MemberwiseClone(), 
          new ($T08())(425, 541, 9, 11), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.21
        );
      } else {
        if (this.gameState !== $T25().FruitsSummary) {
          if (this.gameState === $T25().Cutscene) {
            if ($T03().dialogueFont !== null) {
              $S14().CallVirtual("DrawString", null, b, 
                $T03().dialogueFont, 
                this.cutsceneText, 
                $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct(+((((this.screenWidth | 0) / 2) | 0) - ((+(+((+$S13().CallVirtual("MeasureString", null, $T03().dialogueFont, this.cutsceneText).X / 2)) / 4)) | 0)), 32)).MemberwiseClone(), 
                $T32().get_White().MemberwiseClone(), 
                0, 
                $T01().get_Zero().MemberwiseClone(), 
                +((+this.GetPixelScale() / 4)), 
                $T3A().None, 
                0.199
              );
            }
          } else {

            for (var j = 0; j < (this.waterfallWidth | 0); j = ((j + 2) | 0)) {

              for (var k = -2; k <= (((((this.screenHeight | 0) / (this.tileSize | 0)) | 0) + 1) | 0); k = ((k + 1) | 0)) {
                $S11().CallVirtual("Draw", null, b, 
                  this.texture, 
                  $S12().CallVirtual("TransformDraw", null, this, $S0A().Construct((+((this.screenWidth | 0) + Math.imul(this.tileSize, j)) - +this.waterFallPosition), +(Math.imul(k, this.tileSize) + (((((+this._totalTime * 48) + +((this.tileSize | 0) * 100)) | 0) % (this.tileSize | 0)) | 0)))).MemberwiseClone(), 
                  new ($T08())(48, 32, 16, 16), 
                  this.waterfallTint.MemberwiseClone(), 
                  0, 
                  $T01().get_Zero().MemberwiseClone(), 
                  this.GetPixelScale(), 
                  $T3A().None, 
                  0.2
                );
              }
            }
          }
        }
      }
    }
    if (!this.gamePaused && ((this.gameState === $T25().Ingame) || 
        (this.gameState === $T25().Cutscene) || 
        (this.gameState === $T25().FruitsSummary) || 
        (this.gameState === $T25().Map))) {
      this._shakeOffset = $T01().get_Zero().MemberwiseClone();
      (draw_position2 = draw_position2.MemberwiseClone(), 
        $T01().prototype._ctor.call(draw_position2, 4, 4));
      if ((this.gameMode | 0) === 2) {
        if ($T03().dialogueFont !== null) {
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            JSIL.ConcatString("Score: ", (this.score).toString()), 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.1
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            JSIL.ConcatString("Score: ", (this.score).toString()), 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.11
          );
          draw_position2.Y = +draw_position2.Y + 10;
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            JSIL.ConcatString("Best: ", (this.currentHighScore).toString()), 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.1
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            JSIL.ConcatString("Best: ", (this.currentHighScore).toString()), 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.11
          );
        }
      } else {
        draw_position2.X = 4;

        for (var l = 0; l < (this.livesLeft | 0); l = ((l + 1) | 0)) {
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(160, 32, 16, 16), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.07
          );
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(160, 32, 16, 16), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.071
          );
          draw_position2.X = +draw_position2.X + 18;
          var flag18 = (+draw_position2.X > 90) && 
          (l < (((this.livesLeft | 0) - 1) | 0));
          if (flag18) {
            draw_position2.X = 4;
            draw_position2.Y = +draw_position2.Y + 18;
          }
        }
        draw_position2.X = 4;
        draw_position2.X = +draw_position2.X + 36;

        for (var m = (this.livesLeft | 0); m < 3; m = ((m + 1) | 0)) {
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(160, 48, 16, 16), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.07
          );
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(160, 48, 16, 16), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.071
          );
          draw_position2.X = +draw_position2.X - 18;
        }
      }
      draw_position2.X = 4;
      draw_position2.Y = +draw_position2.Y + 18;

      for (var n = 0; n < 3; n = ((n + 1) | 0)) {
        var shake_magnitude = $T01().get_Zero().MemberwiseClone();
        var flag19 = (+this.currentFruitCheckMagnitude > 0) && 
        (n === (((this.currentFruitCheckIndex | 0) - 1) | 0));
        if (flag19) {
          shake_magnitude.X = +$T1E().Lerp(0 - +this.currentFruitCheckMagnitude, this.currentFruitCheckMagnitude, Math.fround($T03().random.NextDouble()));
          shake_magnitude.Y = +$T1E().Lerp(0 - +this.currentFruitCheckMagnitude, this.currentFruitCheckMagnitude, Math.fround($T03().random.NextDouble()));
        }
        var flag20 = (this._collectedFruit).Contains($T29().$Cast(n));
        if (flag20) {
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), shake_magnitude.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(((160 + Math.imul(n, 16)) | 0), 0, 16, 16), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.07
          );
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition($T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone(), shake_magnitude.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(((160 + Math.imul(n, 16)) | 0), 0, 16, 16), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.075
          );
        } else {
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), shake_magnitude.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(((160 + Math.imul(n, 16)) | 0), 16, 16, 16), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.07
          );
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition($T01().op_Addition(draw_position2.MemberwiseClone(), shake_magnitude.MemberwiseClone()).MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(((160 + Math.imul(n, 16)) | 0), 16, 16, 16), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $S0A().Construct(0, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.075
          );
        }
        draw_position2.X = +draw_position2.X + 18;
      }
      if ((this.gameMode | 0) === 3) {
        draw_position2.X = 4;
        draw_position2.Y = +draw_position2.Y + 18;
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
          new ($T08())(0, 272, 9, 11), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $S0A().Construct(0, 0), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.07
        );
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
          new ($T08())(0, 272, 9, 11), 
          $T32().get_Black().MemberwiseClone(), 
          0, 
          $S0A().Construct(0, 0), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.08
        );
        draw_position2.X = +draw_position2.X + 12;
        if ($T03().dialogueFont !== null) {
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.01
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $T01().op_Addition($S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), $S0A().Construct(-3, -3)).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.02
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $T01().op_Addition($S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), $S0A().Construct(-2, -2)).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.02
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $T01().op_Addition($S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), $S0A().Construct(-1, -1)).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.02
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $T01().op_Addition($S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), $S0A().Construct(-3.5, -3.5)).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.02
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $T01().op_Addition($S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), $S0A().Construct(-1.5, -1.5)).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.02
          );
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            $T00().__Type__.__PublicInterface__.$ToString(this.coinCount, "00", null), 
            $T01().op_Addition($S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), $S0A().Construct(-2.5, -2.5)).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.02
          );
        }
      }
      if (this.gameState === $T25().Ingame) {
        var left_edge = +((+((this.screenWidth | 0) - 192) / 2));
        var right_edge = left_edge + 192;
        (draw_position2 = draw_position2.MemberwiseClone(), 
          $T01().prototype._ctor.call(draw_position2, left_edge, 4));

        for (var i11 = 0; i11 < 12; i11 = ((i11 + 1) | 0)) {
          (source_rect = source_rect.MemberwiseClone(), 
            $T08().prototype._ctor.call(source_rect, 192, 48, 16, 16));
          var flag24 = i11 === 0;
          if (flag24) {
            (source_rect = source_rect.MemberwiseClone(), 
              $T08().prototype._ctor.call(source_rect, 176, 48, 16, 16));
          } else {
            var flag25 = i11 >= 11;
            if (flag25) {
              (source_rect = source_rect.MemberwiseClone(), 
                $T08().prototype._ctor.call(source_rect, 207, 48, 16, 16));
            }
          }
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            source_rect.MemberwiseClone(), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.15
          );
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            source_rect.MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.17
          );
          draw_position2.X = +draw_position2.X + 16;
        }
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
          new ($T08())(176, 64, 16, 16), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.15
        );
        draw_position2.X = +draw_position2.X + 8;
        var level_text = (String($T00().$Box((((this.levelsBeat | 0) + 1) | 0))));
        draw_position2.Y = +draw_position2.Y + 3;
        if ($T03().dialogueFont !== null) {
          $S14().CallVirtual("DrawString", null, b, 
            $T03().dialogueFont, 
            level_text, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Subtraction(draw_position2.MemberwiseClone(), $S0A().Construct(+((+((+$S13().CallVirtual("MeasureString", null, $T03().dialogueFont, level_text).X / 2)) / 4)), 0)).MemberwiseClone()).MemberwiseClone(), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            +((+this.GetPixelScale() / 4)), 
            $T3A().None, 
            0.1
          );
        }
        draw_position2.X = +draw_position2.X + 1;
        draw_position2.Y = +draw_position2.Y + 1;
        (draw_position2 = draw_position2.MemberwiseClone(), 
          $T01().prototype._ctor.call(draw_position2, left_edge, 4));
        if ((this.player !== null) && this.player.visible) {
          draw_position2.X = +$T1E().Lerp(left_edge, right_edge, $T27().Min(+((+this.player.position.X / +((this.distanceToTravel | 0) * (this.tileSize | 0)))), 1));
        }
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
          new ($T08())(240, 48, 16, 16), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $S0A().Construct(8, 0), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.12
        );
        $S11().CallVirtual("Draw", null, b, 
          this.texture, 
          $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
          new ($T08())(240, 48, 16, 16), 
          $T32().get_Black().MemberwiseClone(), 
          0, 
          $S0A().Construct(8, 0), 
          this.GetPixelScale(), 
          $T3A().None, 
          0.13
        );
        if (+this.checkpointPosition > (+(this.tileSize) * 0.5)) {
          draw_position2.X = +$T1E().Lerp(left_edge, right_edge, +((+this.checkpointPosition / +((this.distanceToTravel | 0) * (this.tileSize | 0)))));
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, draw_position2.MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(224, 48, 16, 16), 
            $T32().get_White().MemberwiseClone(), 
            0, 
            $S0A().Construct(8, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.125
          );
          $S11().CallVirtual("Draw", null, b, 
            this.texture, 
            $S12().CallVirtual("TransformDraw", null, this, $T01().op_Addition(draw_position2.MemberwiseClone(), $S0A().Construct(1, 1)).MemberwiseClone()).MemberwiseClone(), 
            new ($T08())(224, 48, 16, 16), 
            $T32().get_Black().MemberwiseClone(), 
            0, 
            $S0A().Construct(8, 0), 
            this.GetPixelScale(), 
            $T3A().None, 
            0.135
          );
        }
      }
    }
    if (+this.screenDarkness > 0) {
      b.Draw(
        $T03().staminaRect, 
        $S10().CallVirtual("TransformDraw", null, this, new ($T08())(0, 0, this.screenWidth, (((this.screenHeight | 0) + (this.tileSize | 0)) | 0))).MemberwiseClone(), 
        null, 
        $T32().op_Multiply($T32().get_Black().MemberwiseClone(), this.screenDarkness).MemberwiseClone(), 
        0, 
        $T01().get_Zero().MemberwiseClone(), 
        $T3A().None, 
        0.145
      );
    }
    var flag30 = this.gamePaused;
    if (flag30) {
      b.Draw(
        $T03().staminaRect, 
        $S10().CallVirtual("TransformDraw", null, this, new ($T08())(0, 0, this.screenWidth, (((this.screenHeight | 0) + (this.tileSize | 0)) | 0))).MemberwiseClone(), 
        null, 
        $T32().op_Multiply($T32().get_Black().MemberwiseClone(), 0.75).MemberwiseClone(), 
        0, 
        $T01().get_Zero().MemberwiseClone(), 
        $T3A().None, 
        0.145
      );
      var draw_position3 = new ($T01())();
      draw_position3.X = +(((this.screenWidth | 0) / 2 | 0));
      draw_position3.Y = +(((this.screenHeight | 0) / 4 | 0));
      if ($T03().dialogueFont !== null) {
        $S14().CallVirtual("DrawString", null, b, 
          $T03().dialogueFont, 
          "Paused", 
          $S12().CallVirtual("TransformDraw", null, this, $T01().op_Subtraction(draw_position3.MemberwiseClone(), $S0A().Construct(+((+((+$S13().CallVirtual("MeasureString", null, $T03().dialogueFont, "Paused").X / 2)) / 4)), 0)).MemberwiseClone()).MemberwiseClone(), 
          $T32().get_White().MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          +((+this.GetPixelScale() / 4)), 
          $T3A().None, 
          0.1
        );
      }
    }
    b.End();
    $T03().isUsingBackToFrontSorting = false;
  }; 

  function MineCart_EndCutscene () {
    var flag = !(this.minecartLoop).get_IsPaused();
    if (flag) {
      (this.minecartLoop).Pause();
    }
    this.gameState = $T25().Ingame;
    this.ResetState();
    this.setUpTheme(this.currentTheme);
    this.PlayLevelMusic();
    this.player.enabled = true;
    this.createBeginningOfLevel();
    this.player.position.X = +(this.tileSize) * 0.5;
    (this.player).SnapToFloor();
    this.checkpointPosition = +this.player.position.X;
    this.furthestGeneratedCheckpoint = 0;
    this.lastLevelWasPerfect = true;
    this.secondsOnThisLevel = 0;
    if ((this.currentTheme | 0) === 2) {
      this.AddEntity$b1($T3D())(new ($T3D())());
      this.AddEntity$b1($T3E())(new ($T3E())());
    }
    if ((this.currentTheme | 0) === 5) {
      this.AddEntity$b1($T3F())(new ($T3F())()).position = $S0A().Construct(0, 0);
    }
    this.screenDarkness = 1;
    this.fadeDelta = -1;
    if (((this.gameMode | 0) === 3) && ((this.currentTheme | 0) === 7)) {
      this.unload();
    }
  }; 

  function MineCart_forceQuit () {
    this.unload();
    return true;
  }; 

  function MineCart_get_totalTime () {
    return this._totalTime;
  }; 

  function MineCart_get_totalTimeMS () {
    return (+this._totalTime * 1000);
  }; 

  function MineCart_GetOverlap$b1 (T, source) {
    var $temp00;
    var $s00 = new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [T]), null);
    $s00.Construct();
    var source_rect = $IM00().Call(source, null).MemberwiseClone();

    for (var a$0 = this._entities._items, i$0 = 0, l$0 = (this._entities._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var entity = a$0[i$0];
      var flag = !(!entity.IsActive() || 
        ($T40().$As(entity) === null)) && 
      T.$Is(entity);
      if (flag) {
        var other_rect = $IM00().Call($T40().$As(entity), null).MemberwiseClone();
        var flag2 = source_rect.Intersects(other_rect.MemberwiseClone());
        if (flag2) {
          var result = JSIL.CloneParameter(T, T.$As(entity));
          return result;
        }
      }
    }
    result = (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;
    return result;
  }; 

  function MineCart_GetOverlaps$b1 (T, source) {
    var $temp00;
    var $s00 = new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [T]), null);
    var overlaps = $s00.Construct();
    var source_rect = $IM00().Call(source, null).MemberwiseClone();

    for (var a$0 = this._entities._items, i$0 = 0, l$0 = (this._entities._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var entity = a$0[i$0];
      var flag = !(!entity.IsActive() || 
        ($T40().$As(entity) === null)) && 
      T.$Is(entity);
      if (flag) {
        var other_rect = $IM00().Call($T40().$As(entity), null).MemberwiseClone();
        var flag2 = source_rect.Intersects(other_rect.MemberwiseClone());
        if (flag2) {
          overlaps.Add(JSIL.CloneParameter(T, T.$As(entity)));
        }
      }
    }
    return overlaps;
  }; 

  function MineCart_GetPixelScale () {
    return this.pixelScale;
  }; 

  function MineCart_GetTrackForXPosition (x) {
    var tile_position = ((+(+x / +(this.tileSize))) | 0);
    var flag = !(this._tracks).ContainsKey(tile_position);
    if (flag) {
      var result = null;
    } else {
      result = ((this._tracks).get_Item(tile_position)).get_Item(0);
    }
    return result;
  }; 

  function MineCart_GetTracksForXPosition (x) {
    var tile_position = ((+(+x / +(this.tileSize))) | 0);
    var flag = !(this._tracks).ContainsKey(tile_position);
    if (flag) {
      var result = null;
    } else {
      result = (this._tracks).get_Item(tile_position);
    }
    return result;
  }; 

  function MineCart_GetValidCheckpointPosition (x_pos) {

  $loop0: 
    for (var i = 0; i < 16; i = ((i + 1) | 0)) {
      var flag = this.GetTrackForXPosition(+((x_pos | 0) * (this.tileSize | 0))) !== null;
      if (flag) {
        break $loop0;
      }
      x_pos = (((x_pos | 0) - 1) | 0);
    }

  $loop1: 
    for (; i < 16; i = ((i + 1) | 0)) {
      var flag2 = this.GetTrackForXPosition(+((x_pos | 0) * (this.tileSize | 0))) === null;
      if (flag2) {
        x_pos = (((x_pos | 0) + 1) | 0);
        break $loop1;
      }
      x_pos = (((x_pos | 0) - 1) | 0);
    }
    var flag3 = this.GetTrackForXPosition(+((x_pos | 0) * (this.tileSize | 0))) === null;
    if (flag3) {
      var result = (this.furthestGeneratedCheckpoint | 0);
    } else {
      var valid_x_pos2 = (x_pos | 0);
      var tile_y = ((+(+this.GetTrackForXPosition(+((x_pos | 0) * (this.tileSize | 0))).position.Y / +(this.tileSize))) | 0);
      x_pos = (((x_pos | 0) + 1) | 0);
      var consecutive_valid_tracks = 0;

      for (i = 0; i < 16; i = ((i + 1) | 0)) {
        var current_track = this.GetTrackForXPosition(+((x_pos | 0) * (this.tileSize | 0)));
        if (current_track === null) {
          result = (this.furthestGeneratedCheckpoint | 0);
          return result;
        }
        var flag5 = (Math.abs(((((+(+current_track.position.Y / +(this.tileSize))) | 0) - tile_y) | 0))) <= 1;
        if (flag5) {
          consecutive_valid_tracks = ((consecutive_valid_tracks + 1) | 0);
          var flag6 = consecutive_valid_tracks >= 3;
          if (flag6) {
            result = valid_x_pos2;
            return result;
          }
        } else {
          consecutive_valid_tracks = 0;
          valid_x_pos2 = (x_pos | 0);
          tile_y = ((+(+this.GetTrackForXPosition(+((x_pos | 0) * (this.tileSize | 0))).position.Y / +(this.tileSize))) | 0);
        }
        x_pos = (((x_pos | 0) + 1) | 0);
      }
      result = (this.furthestGeneratedCheckpoint | 0);
    }
    return result;
  }; 

  function MineCart_initLevelTransitions () {
    var arg_93_5 = null, arg_D6_5 = null, arg_143_5 = null;
    var expr_09 = JSIL.Array.New($T18(), 15);
    expr_09[0] = new ($T18())(-1, 0, 2, 5, "rrr", null);
    expr_09[1] = new ($T18())(0, 8, 5, 5, "rddrrd", $T12().New(this, null, new JSIL.MethodPointerInfo($thisType, "$linitLevelTransitions$gb__166_0", $S15(), false, false)));
    expr_09[2] = new ($T18())(0, 1, 5, 5, "rddlddrdd", null);
    expr_09[3] = new ($T18())(1, 3, 6, 11, "drdrrrrrrrrruuuuu", $T12().New(this, null, new JSIL.MethodPointerInfo($thisType, "$linitLevelTransitions$gb__166_1", $S16(), false, false)));
    if ((arg_93_5 = $T23().$l$g9__166_2) === null) {
      arg_93_5 = $T23().$l$g9__166_2 = $T12().New($T23().$l$g9, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_$l$gc, "$linitLevelTransitions$gb__166_2", $S17(), false, false));
    }
    expr_09[4] = new ($T18())(1, 5, 6, 11, "rrurruuu", arg_93_5);
    expr_09[5] = new ($T18())(1, 2, 6, 11, "rrurrrrddr", null);
    if ((arg_D6_5 = $T23().$l$g9__166_3) === null) {
      arg_D6_5 = $T23().$l$g9__166_3 = $T12().New($T23().$l$g9, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_$l$gc, "$linitLevelTransitions$gb__166_3", $S18(), false, false));
    }
    expr_09[6] = new ($T18())(8, 5, 8, 8, "ddrruuu", arg_D6_5);
    expr_09[7] = new ($T18())(8, 2, 8, 8, "ddrrrrddr", null);
    expr_09[8] = new ($T18())(5, 3, 10, 7, "urruulluurrrrrddddddr", null);
    expr_09[9] = new ($T18())(2, 3, 13, 12, "rurruuu", null);
    if ((arg_143_5 = $T23().$l$g9__166_4) === null) {
      arg_143_5 = $T23().$l$g9__166_4 = $T12().New($T23().$l$g9, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_$l$gc, "$linitLevelTransitions$gb__166_4", $S19(), false, false));
    }
    expr_09[10] = new ($T18())(3, 9, 16, 8, "rruuluu", arg_143_5);
    expr_09[11] = new ($T18())(3, 4, 16, 8, "rrddrddr", null);
    expr_09[12] = new ($T18())(4, 6, 20, 12, "ruuruuuuuu", null);
    expr_09[13] = new ($T18())(9, 6, 17, 4, "rrdrrru", null);
    expr_09[14] = new ($T18())(6, 7, 22, 4, "rr", null);
    this.LEVEL_TRANSITIONS = expr_09;
  }; 

  function MineCart_IsTileInBounds (y) {
    var flag = (y | 0) < (this.topTile | 0);
    if (flag) {
      var result = false;
    } else {
      var flag2 = (y | 0) > (this.bottomTile | 0);
      result = !flag2;
    }
    return result;
  }; 

  function MineCart_KeepTileInBounds (y) {
    var flag = (y | 0) < (this.topTile | 0);
    if (flag) {
      var result = 4;
    } else {
      var flag2 = (y | 0) > (this.bottomTile | 0);
      if (flag2) {
        result = (this.bottomTile | 0);
      } else {
        result = (y | 0);
      }
    }
    return result;
  }; 

  function MineCart_leftClickHeld (x, y) {
  }; 

  function MineCart_minigameId () {
    return "MineCart";
  }; 

  function MineCart_Mod (x, m) {
    return (((((((x | 0) % (m | 0)) | 0) + (m | 0)) | 0) % (m | 0)) | 0);
  }; 

  function MineCart_PlayLevelMusic () {
  }; 

  function MineCart_QuitGame () {
    this.unload();
    $T03().playSound("bigDeSelect");
    $T03().currentMinigame = null;
  }; 

  function MineCart_ReapEntities () {
    var $temp00;
    var removed = 0;

    for (var a$0 = $S1A().Construct((this._tracks).get_Keys())._items, i$0 = 0, l$0 = ($S1A().Construct((this._tracks).get_Keys())._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var grid_position = a$0[i$0];
      var flag = +grid_position < +((((+this.checkpointPosition - 96) - +(4 * (this.tileSize | 0))) / +(this.tileSize)));
      if (flag) {

        for (var i = 0; i < (((this._tracks).get_Item(grid_position)).get_Count() | 0); i = ((i + 1) | 0)) {
          var track = ((this._tracks).get_Item(grid_position)).get_Item(i);
          (this._entities).Remove(track);
        }
        (this._tracks).Remove(grid_position);
        removed = ((removed + 1) | 0);
      }
    }
  }; 

  function MineCart_receiveEventPoke (data) {
    throw $S1B().Construct();
  }; 

  function MineCart_receiveKeyPress (k) {
    var flag = (JSIL.ObjectEqualsInstance(k, $T43().P, !false, $T44().__Type__)) || 
    (JSIL.ObjectEqualsInstance(k, $T43().Escape, !false, $T44().__Type__));
    if (flag) {
      this.gamePaused = !this.gamePaused;
      var flag2 = this.gamePaused;
      if (flag2) {
        $T03().playSound("bigSelect");
      } else {
        $T03().playSound("bigDeSelect");
      }
    }
  }; 

  function MineCart_receiveKeyRelease (k) {
  }; 

  function MineCart_receiveLeftClick (x, y, playSound) {
  }; 

  function MineCart_receiveRightClick (x, y, playSound) {
  }; 

  function MineCart_RefreshHighScore () {
    this._currentHighScores = $T34().Get();
    this.currentHighScore = 0;
    var flag = ((this._currentHighScores).get_Count() | 0) > 0;
    if (flag) {
      this.currentHighScore = (((this._currentHighScores).get_Item(0)).get_Value() | 0);
    }
  }; 

  function MineCart_releaseLeftClick (x, y) {
  }; 

  function MineCart_releaseRightClick (x, y) {
  }; 

  function MineCart_ResetState () {
    this.gameOver = false;
    this.screenLeftBound = 0;
    this.respawnCounter = 0;
    this.deathTimer = 0;
    this._spawnedFruit = $S06().Construct();
    (this.sparkShower).Clear();
    this._goalIndicator = null;
    this.checkpointPositions = $S03().Construct();
    this._tracks = $S1C().Construct();
    this._entities = $S05().Construct();
    this.player = this.AddEntity$b1($T45())(new ($T45())());
    this.player.position.X = 0;
    this.player.position.Y = +((this.ytileOffset | 0) * (this.tileSize | 0));
    this.generatorPosition.X = 0;
    this.generatorPosition.Y = (((this.ytileOffset | 0) + 1) | 0);
    this._lastGenerator = null;
    this._trackGenerator = null;
    this._forcedNextGenerator = null;
    this.trackBuilderCharacter = this.AddEntity$b1($T30())(new ($T30())());
    this.trackBuilderCharacter.visible = false;
    this.trackBuilderCharacter.enabled = false;
    this._lastTilePosition = 0;
    this.pauseBeforeTitleFadeOutTimer = 0;
    (this.lakeDecor).Clear();
    (this.obstacles).Clear();
    this.reachedFinish = false;
  }; 

  function MineCart_restartLevel (new_game) {
    if (new_game) {
      this.livesLeft = 3;
      (this._collectedFruit).Clear();
      this.coinCount = 0;
      this.score = 0;
      this.levelsBeat = 0;
    }
    this.ResetState();
    var flag = (((this.levelsBeat | 0) > 0) && 
      (((this._collectedFruit).get_Count() | 0) > 0)) || 
    (((this.livesLeft | 0) < 3) && 
      !new_game);
    if (flag) {
      this.ShowFruitsSummary();
    } else {
      this.ShowMap();
    }
  }; 

  function MineCart_setGameModeParameters () {
    var num = (this.gameMode | 0);
    var num2 = num;
    if (num2 !== 2) {
      if (num2 === 3) {
        this.distanceToTravel = 350;
      }
    } else {
      this.distanceToTravel = 150;
    }
  }; 

  function MineCart_setUpTheme (whichTheme) {
    this._generatorRolls = $S07().Construct();
    this._validObstacles = $S08().Construct();
    var additional_trap_spawn_rate = 0;
    var movement_speed_multiplier = 1;
    if (this.gameState === $T25().Cutscene) {
      additional_trap_spawn_rate = 0;
      movement_speed_multiplier = 1;
    } else {
      if ((this.gameMode | 0) === 2) {
        var cycle_completions = (((this.levelsBeat | 0) / (this.infiniteModeLevels.length | 0)) | 0);
        additional_trap_spawn_rate = +cycle_completions * 0.25;
        movement_speed_multiplier = 1 + (+cycle_completions * 0.25);
      }
    }
    this.midBGSource = new ($T08())(64, 0, 96, 162);
    this.backBGSource = new ($T08())(64, 162, 96, 111);
    this.lakeBGSource = new ($T08())(0, 80, 16, 97);
    this.backBGYOffset = Math.imul(this.tileSize, 2);
    this.midBGYOffset = 0;
    switch (whichTheme) {
      case 0: 
        this.backBGTint = $T32().get_DarkKhaki().MemberwiseClone();
        this.midBGTint = $T32().get_SandyBrown().MemberwiseClone();
        this.caveTint = $T32().get_SandyBrown().MemberwiseClone();
        this.lakeTint = $T32().get_MediumAquamarine().MemberwiseClone();
        this.trackTint = $T32().get_Beige().MemberwiseClone();
        this.waterfallTint = $T32().op_Multiply($T32().get_MediumAquamarine().MemberwiseClone(), 0.9).MemberwiseClone();
        this.trackShadowTint = $S1D().Construct(60, 60, 60);
        this.player.velocity.X = 95;
        $T47().NoiseGenerator$Amplitude$value = 2;
        $T47().NoiseGenerator$Frequency$value = 0.12;
        this.AddValidObstacle($T1C().Normal, $T48().__Type__);
        this.AddValidObstacle($T1C().Normal, $T49().__Type__);
        (this._generatorRolls).Add(new ($T4A())(0.1, (((new ($T4B())(this))).SetLength(1, 3)).SetDepth(2, 2), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, (((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-2, -1, 1, 2]))).SetNumberOfHops(2, 2)).SetReleaseJumpChance(1), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.3, ((((new ($T4B())(this))).SetLength(1, 1)).SetDepth(-4, -2)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, ((((new ($T4B())(this))).SetLength(1, 4)).SetDepth(-3, -3)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(2, 2)).SetReleaseJumpChance(1)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.5, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -2, -1, 2]))).SetLength(2, 4)).AddObstacle$b1($T13())($T1C().Normal, -11, 0.3 + additional_trap_spawn_rate), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.015, (((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -4, 4, 3]))).SetNumberOfHops(1, 1)).SetReleaseJumpChance(0.1), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValueRange(-1, 1)).SetLength(3, 5)).AddObstacle$b1($T13())($T1C().Normal, -10, 0.3 + additional_trap_spawn_rate), null, null));
        this.generatorPosition.Y = (((((this.screenHeight | 0) / (this.tileSize | 0)) | 0) - 3) | 0);
        break;

      case 1: 
        this.AddValidObstacle($T1C().Normal, $T48().__Type__);
        this.AddValidObstacle($T1C().Difficult, $T48().__Type__);
        var wavy_generator = ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(1)).SetStaggerValueRange(-1, 1)).SetLength(4, 4)).SetCheckpoint(true);
        (this._generatorRolls).Add(new ($T4A())(0.3, ((((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(2, 4)).SetReleaseJumpChance(0.1)).SetStaggerValues(JSIL.Array.New($T00(), [-2, -1]))).SetTrackType($T16().UpSlope), $T12().New(this, null, new JSIL.MethodPointerInfo($thisType, "_IsGeneratingOnLowerHalf", $S1F(), false, false)), wavy_generator));
        (this._generatorRolls).Add(new ($T4A())(0.15, ((((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(2, 4)).SetReleaseJumpChance(0.1)).SetStaggerValues(JSIL.Array.New($T00(), [3, 2, 1]))).SetTrackType($T16().UpSlope), $T12().New(this, null, new JSIL.MethodPointerInfo($thisType, "_IsGeneratingOnUpperHalf", $S20(), false, false)), wavy_generator));
        (this._generatorRolls).Add(new ($T4A())(0.5, (((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(0)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [1]))).SetLength(3, 5)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "IceDownSlopesOnly", $S21(), true, false)))).AddObstacle$b1($T13())($T1C().Normal, -12, 1), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.3, wavy_generator, null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(1)).SetStaggerValueRange(-1, 1)).SetLength(3, 6)).AddObstacle$b1($T13())($T1C().Difficult, -13, 0.5 + additional_trap_spawn_rate), null, null));
        this.backBGTint = $S1D().Construct(93, 242, 255);
        this.midBGTint = $T32().get_White().MemberwiseClone();
        this.caveTint = $S1D().Construct(230, 244, 254);
        this.lakeBGSource = new ($T08())(304, 0, 16, 0);
        this.lakeTint = $S1D().Construct(147, 217, 255);
        this.midBGSource = new ($T08())(320, 135, 96, 149);
        this.midBGYOffset = -13;
        this.waterfallTint = $T32().op_Multiply($T32().get_LightCyan().MemberwiseClone(), 0.5).MemberwiseClone();
        this.trackTint = $S1D().Construct(186, 240, 255);
        this.player.velocity.X = 85;
        $T47().NoiseGenerator$Amplitude$value = 2.8;
        $T47().NoiseGenerator$Frequency$value = 0.18;
        this.trackShadowTint = $S1D().Construct(50, 145, 250);
        break;

      case 2: 
        this.backBGTint = $T32().get_White().MemberwiseClone();
        this.midBGTint = $T32().get_White().MemberwiseClone();
        this.caveTint = $T32().get_SlateGray().MemberwiseClone();
        this.lakeTint = $S1D().Construct(75, 104, 88);
        this.waterfallTint = $T32().op_Multiply($T32().get_White().MemberwiseClone(), 0).MemberwiseClone();
        this.trackTint = $S1D().Construct(100, 220, 255);
        this.player.velocity.X = 85;
        $T47().NoiseGenerator$Amplitude$value = 3;
        $T47().NoiseGenerator$Frequency$value = 0.15;
        this.trackShadowTint = $S1D().Construct(32, 45, 180);
        this.midBGSource = new ($T08())(416, 0, 96, 69);
        this.backBGSource = new ($T08())(320, 0, 96, 135);
        this.backBGYOffset = 0;
        this.lakeBGSource = new ($T08())(304, 0, 16, 0);
        (this._generatorRolls).Add(new ($T4A())(0.1, ((((new ($T4B())(this))).SetLength(2, 5)).SetDepth(-7, -3)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((new ($T4B())(this))).SetLength(1, 3)).SetDepth(100, 100), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [2, -1, 0, 1, 2]))).SetLength(3, 5)).SetCheckpoint(true), null, null));
        this.CreateBGDecor();
        if ((this.gameMode | 0) !== 2) {
          this.distanceToTravel = 300;
        }
        break;

      case 3: 
        this.backBGTint = $S1D().Construct(60, 60, 60);
        this.midBGTint = $S1D().Construct(60, 60, 60);
        this.caveTint = $S1D().Construct(70, 70, 70);
        this.lakeTint = $S1D().Construct(60, 70, 80);
        this.trackTint = $T32().get_DimGray().MemberwiseClone();
        this.waterfallTint = $T32().op_Multiply($T32().get_Black().MemberwiseClone(), 0).MemberwiseClone();
        this.trackShadowTint = $T32().get_Black().MemberwiseClone();
        this.player.velocity.X = 120;
        $T47().NoiseGenerator$Amplitude$value = 3;
        $T47().NoiseGenerator$Frequency$value = 0.2;
        this.AddValidObstacle($T1C().Normal, $T48().__Type__);
        this.AddValidObstacle($T1C().Difficult, $T4E().__Type__);
        (this._generatorRolls).Add(new ($T4A())(0.25, (((new ($T4B())(this))).SetLength(3, 5)).SetDepth(-10, -6), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((new ($T4B())(this))).SetLength(1, 3)).SetDepth(3, 3), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, (((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [4, 3]))).SetNumberOfHops(1, 1)).SetReleaseJumpChance(0), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, ((((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-1, 0, 0, -1]))).SetLength(7, 9)).AddObstacle$b1($T13())($T1C().Difficult, -10, 1)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "EveryOtherTile", $S22(), true, false)))).AddObstacle$b1($T13())($T1C().Normal, -13, 0.75 + additional_trap_spawn_rate), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [4, -1, 0, 1, -4]))).SetLength(2, 6)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "EveryOtherTile", $S22(), true, false))), null, null));
        if ((this.gameMode | 0) !== 2) {
          this.distanceToTravel = 450;
        } else {
          this.distanceToTravel = ((+(this.distanceToTravel) * 1.5) | 0);
        }
        this.CreateBGDecor();
        break;

      case 4: 
        this.AddValidObstacle($T1C().Normal, $T49().__Type__);
        this.backBGTint = $S1D().Construct(255, 137, 82);
        this.midBGTint = $S1D().Construct(255, 82, 40);
        this.caveTint = $T32().get_DarkRed().MemberwiseClone();
        this.lakeTint = $T32().get_Red().MemberwiseClone();
        this.lakeBGSource = new ($T08())(304, 97, 16, 97);
        this.trackTint = $S1D().Construct(255, 160, 160);
        this.waterfallTint = $T32().op_Multiply($T32().get_Red().MemberwiseClone(), 0.9).MemberwiseClone();
        this.trackShadowTint = $T32().get_Orange().MemberwiseClone();
        this.player.velocity.X = 120;
        $T47().NoiseGenerator$Amplitude$value = 3;
        $T47().NoiseGenerator$Frequency$value = 0.18;
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(3, 5)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -1, 1, 3]))).SetReleaseJumpChance(0.33)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(0)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-1, 1]))).SetLength(5, 8)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false)))).SetCheckpoint(true)).AddObstacle$b1($T13())($T1C().Normal, -13, 0.5 + additional_trap_spawn_rate), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(0)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-1, 1]))).SetLength(5, 8)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false)))).SetCheckpoint(true)).AddObstacle$b1($T13())($T1C().Normal, -13, 0.5 + additional_trap_spawn_rate), null, null));
        break;

      case 5: 
        this.AddValidObstacle($T1C().Air, $T49().__Type__);
        this.AddValidObstacle($T1C().Normal, $T48().__Type__);
        this.backBGTint = $S1D().Construct(180, 250, 180);
        this.midBGSource = new ($T08())(416, 69, 96, 162);
        this.midBGTint = $T32().get_White().MemberwiseClone();
        this.caveTint = $S1D().Construct(255, 200, 60);
        this.lakeTint = $S1D().Construct(24, 151, 62);
        this.trackTint = $T32().get_LightSlateGray().MemberwiseClone();
        this.waterfallTint = $T32().op_Multiply($S1D().Construct(0, 255, 180), 0.5).MemberwiseClone();
        this.trackShadowTint = $S1D().Construct(0, 180, 50);
        this.player.velocity.X = 100;
        this.slimeBossSpeed = +this.player.velocity.X;
        $T47().NoiseGenerator$Amplitude$value = 3.1;
        $T47().NoiseGenerator$Frequency$value = 0.24;
        this.lakeBGSource = new ($T08())(304, 0, 16, 0);
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [10, 10]))).SetNumberOfHops(1, 1)).SetReleaseJumpChance(0.1), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, ((((new ($T4B())(this))).SetLength(2, 5)).SetDepth(-7, -3)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, (((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(0)).SetStaggerChance(1)).SetStaggerValueRange(-1, -1)).SetLength(3, 5)).AddObstacle$b1($T13())($T1C().Air, -11, 0.75 + additional_trap_spawn_rate)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((((new ($T4C())(this))).SetHopSize(1, 1)).SetStaggerValues(JSIL.Array.New($T00(), [1, -2]))).SetNumberOfHops(2, 2)).SetReleaseJumpChance(0.25)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false)))).SetTrackType($T16().SlimeUpSlope), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-1, -1, 0, 2, 2]))).SetLength(3, 5)).AddObstacle$b1($T13())($T1C().Normal, -10, 0.3 + additional_trap_spawn_rate), null, null));
        break;

      case 6: 
        this.backBGTint = $T32().get_White().MemberwiseClone();
        this.midBGTint = $T32().get_White().MemberwiseClone();
        this.caveTint = $T32().get_Black().MemberwiseClone();
        this.lakeTint = $T32().get_Black().MemberwiseClone();
        this.waterfallTint = $T32().op_Multiply($T32().get_BlueViolet().MemberwiseClone(), 0.25).MemberwiseClone();
        this.trackTint = $S1D().Construct(150, 70, 120);
        this.player.velocity.X = 110;
        $T47().NoiseGenerator$Amplitude$value = 3.5;
        $T47().NoiseGenerator$Frequency$value = 0.35;
        this.trackShadowTint = $T32().get_Black().MemberwiseClone();
        this.midBGSource = new ($T08())(416, 231, 96, 53);
        this.backBGSource = new ($T08())(320, 284, 96, 116);
        this.backBGYOffset = 20;
        this.AddValidObstacle($T1C().Normal, $T48().__Type__);
        (this._generatorRolls).Add(new ($T4A())(0.25, ((((new ($T4F())(this))).SetLength(3, 5)).SetYStep(-1)).AddPickupFunction$b1($T4F())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, (((((new ($T4F())(this))).SetLength(3, 5)).SetYStep(2)).SetChaotic(true)).AddPickupFunction$b1($T4F())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((new ($T4F())(this))).SetLength(3, 5)).SetYStep(-2), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.05, (((new ($T4F())(this))).SetLength(3, 5)).SetYStep(3), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [4, 3]))).SetNumberOfHops(1, 1)).SetReleaseJumpChance(0), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, ((((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(3, 5)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -1, 1, 3]))).SetReleaseJumpChance(0.33)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, (((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValueRange(-1, 2)).SetLength(3, 8)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "EveryOtherTile", $S22(), true, false)))).AddObstacle$b1($T13())($T1C().Normal, -10, 0.75 + additional_trap_spawn_rate), null, null));
        this.generatorPosition.Y = (((((this.screenHeight | 0) / (this.tileSize | 0)) | 0) - 2) | 0);
        this.CreateBGDecor();
        if ((this.gameMode | 0) !== 2) {
          this.distanceToTravel = 500;
        }
        break;

      case 7: 
        this.backBGTint = $T32().get_DarkKhaki().MemberwiseClone();
        this.midBGTint = $T32().get_SandyBrown().MemberwiseClone();
        this.caveTint = $T32().get_SandyBrown().MemberwiseClone();
        this.lakeTint = $T32().get_MediumAquamarine().MemberwiseClone();
        this.trackTint = $T32().get_Beige().MemberwiseClone();
        this.waterfallTint = $T32().op_Multiply($T32().get_MediumAquamarine().MemberwiseClone(), 0.9).MemberwiseClone();
        this.trackShadowTint = $S1D().Construct(60, 60, 60);
        this.player.velocity.X = 95;
        break;

      case 8: 
        this.backBGTint = $S1D().Construct(10, 30, 50);
        this.midBGTint = $T32().get_Black().MemberwiseClone();
        this.caveTint = $T32().get_Black().MemberwiseClone();
        this.lakeTint = $S1D().Construct(0, 60, 150);
        this.trackTint = $S1D().Construct(0, 90, 180);
        this.waterfallTint = $T32().op_Multiply($T32().get_MediumAquamarine().MemberwiseClone(), 0).MemberwiseClone();
        this.trackShadowTint = $S1D().Construct(0, 0, 60);
        this.player.velocity.X = 100;
        this.generatorPosition.Y = (((((this.screenHeight | 0) / (this.tileSize | 0)) | 0) - 4) | 0);
        (this._generatorRolls).Add(new ($T4A())(0.1, ((((new ($T4B())(this))).SetLength(1, 3)).SetDepth(2, 2)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, ((((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-2, -1, 1, 2]))).SetNumberOfHops(2, 2)).SetReleaseJumpChance(1)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.3, ((((new ($T4B())(this))).SetLength(1, 1)).SetDepth(-4, -2)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, ((((new ($T4B())(this))).SetLength(1, 4)).SetDepth(-3, -3)).AddPickupFunction$b1($T4B())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(2, 2)).SetReleaseJumpChance(1)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.5, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -2, -1, 2]))).SetLength(2, 4)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.015, ((((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -4, 4, 3]))).SetNumberOfHops(1, 1)).SetReleaseJumpChance(0.1)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValueRange(-1, 1)).SetLength(3, 5)).AddPickupFunction$b1($T13())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        if ((this.gameMode | 0) !== 2) {
          this.distanceToTravel = 200;
        }
        break;

      case 9: 
        this.AddValidObstacle($T1C().Difficult, $T50().__Type__);
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((new ($T51())(this))).SetHopSize(2, 2)).SetReleaseJumpChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [0, -1, 3]))).SetTrackType($T16().Straight), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.15, (((((new ($T51())(this))).SetHopSize(1, 1)).SetReleaseJumpChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-2, 4]))).SetTrackType($T16().Straight), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.2, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-1, 0, 1]))).SetLength(4, 4)).SetCheckpoint(true), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, (((((new ($T4C())(this))).SetHopSize(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [4, 3]))).SetNumberOfHops(1, 1)).SetReleaseJumpChance(0), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.1, (((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(0)).SetLength(11, 11)).AddObstacle$b1($T13())($T1C().Difficult, 3, 1)).AddObstacle$b1($T13())($T1C().Difficult, 7, 1)).SetCheckpoint(false), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.25, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(2)).SetStaggerChance(0)).SetLength(7, 7)).AddObstacle$b1($T13())($T1C().Difficult, 3, 1)).SetCheckpoint(false), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.2, ((((((new ($T52())(this))).SetHopSize(1, 1)).SetNumberOfHops(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -1, 2, 3]))).SetReleaseJumpChance(0.25)).AddPickupFunction$b1($T52())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.05, ((((((new ($T4C())(this))).SetHopSize(1, 1)).SetNumberOfHops(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -1, 2, 3]))).SetReleaseJumpChance(0.33)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.35, (((((((new ($T4C())(this))).SetTrackType($T16().MushroomMiddle)).SetHopSize(1, 1)).SetNumberOfHops(2, 3)).SetStaggerValues(JSIL.Array.New($T00(), [-3, -4, 4]))).SetReleaseJumpChance(0.33)).AddPickupFunction$b1($T4C())($T4D().New(null, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, "Always", $S1E(), true, false))), null, null));
        (this._generatorRolls).Add(new ($T4A())(0.5, (((((new ($T51())(this))).SetHopSize(1, 1)).SetReleaseJumpChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [-2, 4]))).SetTrackType($T16().Straight), null, null));
        (this._generatorRolls).Add(new ($T4A())(1, ((((((new ($T13())(this))).SetMinimumDistanceBetweenStaggers(1)).SetStaggerChance(1)).SetStaggerValues(JSIL.Array.New($T00(), [2, -1, 0, 1, 2]))).SetLength(3, 5)).SetCheckpoint(true), null, null));
        this.CreateBGDecor();
        this.backBGTint = $T32().get_White().MemberwiseClone();
        this.backBGSource = new ($T08())(0, 789, 96, 111);
        this.midBGTint = $T32().get_White().MemberwiseClone();
        this.caveTint = $T32().get_Purple().MemberwiseClone();
        this.lakeBGSource = new ($T08())(304, 0, 16, 0);
        this.lakeTint = $S1D().Construct(0, 8, 46);
        this.midBGSource = new ($T08())(416, 736, 96, 149);
        this.midBGYOffset = -13;
        this.waterfallTint = $T32().op_Multiply($S1D().Construct(100, 0, 140), 0.5).MemberwiseClone();
        this.trackTint = $S1D().Construct(130, 50, 230);
        this.player.velocity.X = 120;
        this.trackShadowTint = $S1D().Construct(0, 225, 225);
        break;

    }
    var expr_1B36_cp_0_cp_0 = this.player;
    expr_1B36_cp_0_cp_0.velocity.X = +expr_1B36_cp_0_cp_0.velocity.X * movement_speed_multiplier;
    this.trackBuilderCharacter.velocity = this.player.velocity.MemberwiseClone();
    this.currentTheme = (whichTheme | 0);
  }; 

  function MineCart_ShowCutscene () {
    this.gameState = $T25().Cutscene;
    this.screenDarkness = 1;
    this.ResetState();
    this.player.enabled = false;
    this.setGameModeParameters();
    this.setUpTheme(this.currentTheme);
    this.cutsceneTick = 0;

    for (var i = 0; i < (((((this.screenWidth | 0) / (this.tileSize | 0)) | 0) + 4) | 0); i = ((i + 1) | 0)) {
      this.AddTrack(i, 10, $T16().Straight).visible = false;
    }
    (this.player).SnapToFloor();
    if ((this.gameMode | 0) === 2) {
      this.EndCutscene();
    }
  }; 

  function MineCart_ShowFruitsSummary () {
    var flag = !(this.minecartLoop).get_IsPaused();
    if (flag) {
      (this.minecartLoop).Pause();
    }
    this.gameState = $T25().FruitsSummary;
    this.player.enabled = false;
    this.stateTimer = 0.75;
  }; 

  function MineCart_ShowMap () {
    if ((this.gameMode | 0) === 2) {
      this.ShowCutscene();
    } else {

      var $label1 = 0;
    $labelgroup1: 
      while (true) {
        switch ($label1) {
          case 0: /* $entry1 */ 
            this.gameState = $T25().Map;
            this.mapTimer = 0;
            this.screenDarkness = 1;
            this.ResetState();
            this.player.enabled = false;
            var expr_A4 = new ($T31())(new ($T08())(256, 864, 16, 16), $S0A().Construct(261, 106), 0, 0, 0, 0, 99, 1, 4, 0.15, 0.2, false, 0);
            expr_A4.ySinWaveMagnitude = +($T03().random.Next(1, 6));
            this.AddEntity$b1($T31())(expr_A4);
            var expr_114 = new ($T31())(new ($T08())(256, 864, 16, 16), $S0A().Construct(276, 117), 0, 0, 0, 0, 99, 1, 4, 0.17, 0.2, false, 0);
            expr_114.ySinWaveMagnitude = +($T03().random.Next(1, 6));
            this.AddEntity$b1($T31())(expr_114);
            var expr_184 = new ($T31())(new ($T08())(256, 864, 16, 16), $S0A().Construct(234, 136), 0, 0, 0, 0, 99, 1, 4, 0.19, 0.2, false, 0);
            expr_184.ySinWaveMagnitude = +($T03().random.Next(1, 6));
            this.AddEntity$b1($T31())(expr_184);
            var expr_1F4 = new ($T31())(new ($T08())(256, 864, 16, 16), $S0A().Construct(264, 131), 0, 0, 0, 0, 99, 1, 4, 0.19, 0.2, false, 0);
            expr_1F4.ySinWaveMagnitude = +($T03().random.Next(1, 6));
            this.AddEntity$b1($T31())(expr_1F4);
            var flag2 = +$T03().random.NextDouble() < 0.4;
            if (flag2) {
              var expr_280 = new ($T31())(new ($T08())(256, 864, 16, 16), $S0A().Construct(247, 119), 0, 0, 0, 0, 99, 1, 4, 0.19, 0.2, false, 0);
              expr_280.ySinWaveMagnitude = +($T03().random.Next(1, 6));
              this.AddEntity$b1($T31())(expr_280);
            }
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(96, 864, 16, 16), $S0A().Construct(327, 186), 0, 0, 0, 0, 99, 1, 4, 0.17, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(96, 864, 16, 16), $S0A().Construct(362, 190), 0, 0, 0, 0, 99, 1, 4, 0.19, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(96, 864, 16, 16), $S0A().Construct(299, 197), 0, 0, 0, 0, 99, 1, 4, 0.21, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(96, 864, 16, 16), $S0A().Construct(375, 212), 0, 0, 0, 0, 99, 1, 4, 0.16, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(402, 660, 100, 72), $S0A().Construct(205, 184), 0, 0, 0, 0, 99, 1, 2, 0.765, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(0, 736, 48, 50), $S0A().Construct(280, 66), 0, 0, 0, 0, 99, 1, 2, 0.765, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(402, 638, 3, 21), $S0A().Construct(234.66, 66.66), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.55, false, 0));
            if ((this.currentTheme | 0) === 0) {
              this.AddEntity$b1($T53())(new ($T53())(72, $S1D().Construct(130, 96, 79), 96, 0.45)).position = $S0A().Construct(+(40 + ($T03().random.Next(40) | 0)), -16);
              var flag4 = +$T03().random.NextDouble() < 0.5;
              if (flag4) {
                this.AddEntity$b1($T53())(new ($T53())(72, $S1D().Construct(130, 96, 79), 80, 0.5)).position = $S0A().Construct(+(80 + ($T03().random.Next(40) | 0)), -16);
              }
              var flag5 = +$T03().random.NextDouble() < 0.5;
              if (flag5) {
                this.AddEntity$b1($T53())(new ($T53())(72, $S1D().Construct(130, 96, 79), 88, 0.55)).position = $S0A().Construct(+(120 + ($T03().random.Next(40) | 0)), -16);
              }
            } else {
              if ((this.currentTheme | 0) === 1) {
                (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 604, 15, 12), $S0A().Construct(119, 162), 0, 0, 0, 0, 0.8, 1, 1, 0.1, 0.55, false, 0))).SetDestroySound("boulderBreak");
                (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 604, 15, 12), $S0A().Construct(49, 166), 0, 0, 0, 0, 1.2, 1, 1, 0.1, 0.55, false, 0))).SetDestroySound("boulderBreak");

                for (var i = 0; i < 4; i = ((i + 1) | 0)) {
                  this.AddEntity$b1($T31())(new ($T31())(new ($T08())(421, 607, 5, 5), $S0A().Construct(119, 162), +($T03().random.Next(-30, 31)), +($T03().random.Next(-50, -39)), 0.25, 1, 0.75, 1, 1, 1, 0.45, false, 0.8));
                }

                for (var j = 0; j < 4; j = ((j + 1) | 0)) {
                  this.AddEntity$b1($T31())(new ($T31())(new ($T08())(421, 607, 5, 5), $S0A().Construct(49, 166), +($T03().random.Next(-30, 31)), +($T03().random.Next(-50, -39)), 0.25, 1, 0.75, 1, 1, 1, 0.45, false, 1.2));
                }
              } else {
                if ((this.currentTheme | 0) === 3) {
                  (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(455, 512, 58, 64), $S0A().Construct(250, 136), 0, 0, 0, 0, 0.8, 1, 1, 0.1, 0.21, false, 0))).SetDestroySound("barrelBreak");

                  for (var k = 0; k < 32; k = ((k + 1) | 0)) {
                    this.AddEntity$b1($T31())(new ($T31())(new ($T08())(51, 53, 9, 9), $T01().op_Addition($S0A().Construct(250, 136), $S0A().Construct(+($T03().random.Next(-20, 31)), +($T03().random.Next(-20, 21)))).MemberwiseClone(), +($T03().random.Next(-30, 31)), +($T03().random.Next(-70, -39)), 0.25, 1, 0.75, 1, 1, 1, 0.45, false, (0.8 + (0.01 * +k))));
                  }
                } else {
                  if ((this.currentTheme | 0) === 2) {
                    this.AddEntity$b1($T31())(new ($T31())(new ($T08())(416, 368, 24, 16), $S0A().Construct(217, 177), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.54, true, 0.8));
                    (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(416, 368, 1, 1), $S0A().Construct(217, 177), 0, 0, 0, 0, 0.8, 1, 1, 0.1, 0.55, false, 0))).SetDestroySound("pullItemFromWater");
                  } else {
                    if ((this.currentTheme | 0) === 4) {
                      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(328, 197), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.34, false, 2.5))).SetStartSound("fireball");
                      this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(336, 197), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.35, false, 2.625));
                      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(344, 197), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.34, false, 2.75))).SetStartSound("fireball");
                      this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(344, 189), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.35, false, 2.825));
                      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(344, 181), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.34, false, 3))).SetStartSound("fireball");
                      this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(344, 173), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.35, false, 3.125));
                      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(344, 165), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.34, false, 3.25))).SetStartSound("fireball");
                      this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(352, 165), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.35, false, 3.325));
                      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(360, 165), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.34, false, 3.5))).SetStartSound("fireball");
                      this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(360, 157), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.35, false, 3.625));
                      (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 591, 12, 11), $S0A().Construct(360, 149), 0, 0, 0, 0, 99, 1, 4, 0.1, 0.34, false, 3.75))).SetStartSound("fireball");
                    } else {
                      if ((this.currentTheme | 0) === 5) {
                        (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(416, 384, 16, 16), $S0A().Construct(213, 34), 0, 0, 0, 0, 5, 1, 6, 0.1, 0.55, false, 0))).SetDestroySound("slimedead");

                        for (var l = 0; l < 8; l = ((l + 1) | 0)) {
                          this.AddEntity$b1($T31())(new ($T31())(new ($T08())(427, 607, 6, 6), $S0A().Construct(+(205 + ($T03().random.Next(3, 14) | 0)), +(26 + ($T03().random.Next(6, 14) | 0))), +($T03().random.Next(-30, 31)), +($T03().random.Next(-60, -39)), 0.25, 1, 0.75, 1, 1, 1, 0.45, false, (5 + (+l * 0.005))));
                        }
                      }
                    }
                  }
                }
              }
            }
            if ((this.currentTheme | 0) === 9) {

              for (var m = 0; m < 8; m = ((m + 1) | 0)) {
                (this.AddEntity$b1($T31())(new ($T31())(new ($T08())(368, 784, 16, 16), $S0A().Construct(+(274 + ($T03().random.Next(-19, 20) | 0)), +(46 + ($T03().random.Next(6, 14) | 0))), +($T03().random.Next(-4, 5)), -16, 0, 0.05, 2, 1, 3, 0.33, 0.35, true, (1 + (+m * 0.1))))).SetStartSound("dirtyHit");
              }
            } else {
              if ((this.currentTheme | 0) === 6) {

                for (var n = 0; n < 52; n = ((n + 1) | 0)) {
                  this.AddEntity$b1($T53())(new ($T53())(+($T03().random.Next(72, 195)), $S1D().Construct(100, 66, 49), +(96 + ($T03().random.Next(-10, 11) | 0)), (0.65 + (+n * 0.05)))).position = $S0A().Construct(+(5 + ($T03().random.Next(360) | 0)), -16);
                }
              }
            }
            var flag13 = !(this.levelThemesFinishedThisRun).Contains(1);
            if (flag13) {
              this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 604, 15, 12), $S0A().Construct(119, 162), 0, 0, 0, 0, 99, 1, 1, 0.1, 0.55, false, 0));
              this.AddEntity$b1($T31())(new ($T31())(new ($T08())(401, 604, 15, 12), $S0A().Construct(49, 166), 0, 0, 0, 0, 99, 1, 1, 0.1, 0.55, false, 0));
            }
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(415, (
                    (this.levelThemesFinishedThisRun).Contains(0)
                       ? 630
                       : 650)
                  , 10, 9), $S0A().Construct(88, 87.66), 0, 0, 0, 0, 99, 1, 5, 0.1, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(415, (
                    (this.levelThemesFinishedThisRun).Contains(1)
                       ? 630
                       : 650)
                  , 10, 9), $S0A().Construct(105, 183.66), 0, 0, 0, 0, 99, 1, 5, 0.1, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(415, (
                    (this.levelThemesFinishedThisRun).Contains(5)
                       ? 630
                       : 640)
                  , 10, 9), $S0A().Construct(169, 119.66), 0, 0, 0, 0, 99, 1, 5, 0.1, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(415, (
                    (this.levelThemesFinishedThisRun).Contains(4)
                       ? 630
                       : 650)
                  , 10, 9), $S0A().Construct(328, 199.66), 0, 0, 0, 0, 99, 1, 5, 0.1, 0.55, false, 0));
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(415, (
                    (this.levelThemesFinishedThisRun).Contains(6)
                       ? 630
                       : 650)
                  , 10, 9), $S0A().Construct(361, 72.66), 0, 0, 0, 0, 99, 1, 5, 0.1, 0.55, false, 0));
            var flag14 = (this.levelThemesFinishedThisRun).Contains(2);
            if (flag14) {
              this.AddEntity$b1($T31())(new ($T31())(new ($T08())(466, 642, 17, 17), $S0A().Construct(216.66, 200.66), 0, 0, 0, 0, 99, 1, 1, 0.17, 0.52, false, 0));
            }
            this.fadeDelta = -1;
            var map_junimo = this.AddEntity$b1($T54())(new ($T54())());
            var lEVEL_TRANSITIONS = this.LEVEL_TRANSITIONS;
            var num = 0;
            var transition = $S23().CallStatic($T55(), "FirstOrDefault$b1", [$asm00.StardewValley.Minigames.MineCart_LevelTransition], $S24().CallStatic($T55(), "Where$b1", [$asm00.StardewValley.Minigames.MineCart_LevelTransition], $T56().$Cast(this.LEVEL_TRANSITIONS), $T57().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lShowMap$gb__201_0", $S25(), false, false))));
            var flag15 = transition === null;
            if (flag15) {

              var $label0 = 0;
            $labelgroup0: 
              while (true) {
                switch ($label0) {
                  case 0: /* $entry0 */ 

                  $loop6: 
                    while (true) {
                      var flag16 = num < (lEVEL_TRANSITIONS.length | 0);
                      if (!flag16) {
                        $label0 = 1 /* goto IL_1553 */ ;
                        continue $labelgroup0;
                      }
                      transition = lEVEL_TRANSITIONS[num];
                      var flag17 = ((transition.startLevel | 0) === (this.currentTheme | 0)) && 
                      (((transition.destinationLevel | 0) === (this.startTheme | 0)) || 
                        (transition.shouldTakePath === null) || 
                        transition.shouldTakePath());
                      if (flag17) {
                        break $loop6;
                      }
                      num = ((num + 1) | 0);
                    }
                    $label1 = 1 /* goto IL_155B */ ;
                    continue $labelgroup1;

                  case 1: /* IL_1553 */ 
                    return;
                    break $labelgroup0;

                }
              }
            }

            $label1 = 1 /* goto IL_155B */ ;
            continue $labelgroup1;
          case 1: /* IL_155B */ 
            map_junimo.position = $S0A().Construct(((+(transition.startGridCoordinates.X) + 0.5) * +(this.tileSize)), ((+(transition.startGridCoordinates.Y) + 0.5) * +(this.tileSize)));
            map_junimo.moveString = transition.pathString;
            this.currentTheme = (transition.destinationLevel | 0);

            break $labelgroup1;
        }
      }
    }
  }; 

  function MineCart_ShowTitle () {
    this.musicSW = new ($T58())();
    this.titleJunimoStartedBobbing = false;
    this.completelyPerfect = true;
    this.screenDarkness = 1;
    this.fadeDelta = -1;
    this.ResetState();
    this.player.enabled = false;
    if ((this.gameMode | 0) === 3) {
      var fromTheme = ($S26().CallStatic($T55(), "First$b1", [$asm00.StardewValley.Minigames.MineCart_LevelTransition], $S24().CallStatic($T55(), "Where$b1", [$asm00.StardewValley.Minigames.MineCart_LevelTransition], $T56().$Cast(this.LEVEL_TRANSITIONS), $T57().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lShowTitle$gb__167_0", $S27(), false, false)))).startLevel | 0);
      var flag2 = fromTheme === -1;
      if (flag2) {
        fromTheme = 0;
      }
      this.setUpTheme(fromTheme);
    } else {
      this.setUpTheme(this.startTheme);
    }
    (this.levelThemesFinishedThisRun).Clear();
    this.gameState = $T25().Title;
    this.CreateLakeDecor();
    this.RefreshHighScore();
    this.titleScreenJunimo = this.AddEntity$b1($T31())(new ($T31())(new ($T08())(259, 492, 14, 20), $S0A().Construct(+((((((this.screenWidth | 0) / 2) | 0) - 128) | 0) + 137), +((((((this.screenHeight | 0) / 2) | 0) - 35) | 0) + 46)), 100, 0, 0, 0, 99999, 1, 1, 1, 0.24, false, 0));
    if (((this.startTheme | 0) === 0) && ((this.gameMode | 0) === 3)) {
      this.currentTheme = -1;
    }
  }; 

  function MineCart_tick (time) {
    var $temp00, $temp01;
    this.UpdateInput();
    var delta_time = 0.0166666675;
    var flag = this.gamePaused;
    if (flag) {
      delta_time = 0;
    }
    if (!this.CanPause()) {
      this.gamePaused = false;
    }
    this.shakeMagnitude = +$T1E().MoveTowards(this.shakeMagnitude, 0, delta_time * 3);
    this.currentFruitCheckMagnitude = +$T1E().MoveTowards(this.currentFruitCheckMagnitude, 0, delta_time * 6);
    this._totalTime = +this._totalTime + delta_time;
    this.screenDarkness = +this.screenDarkness + (+this.fadeDelta * delta_time);
    if (+this.screenDarkness < 0) {
      this.screenDarkness = 0;
    }
    if (+this.screenDarkness > 1) {
      this.screenDarkness = 1;
    }
    if (this.gameState === $T25().Title) {
      if (+this.pauseBeforeTitleFadeOutTimer > 0) {
        this.pauseBeforeTitleFadeOutTimer = +this.pauseBeforeTitleFadeOutTimer - 0.0166666;
        if (+this.pauseBeforeTitleFadeOutTimer <= 0) {
          this.fadeDelta = 1;
        }
      }
      if ((+this.fadeDelta >= 0) && (+this.screenDarkness >= 1)) {
        this.restartLevel(true);
        var result = false;
        return result;
      }
      var flag9 = +$T03().random.NextDouble() < 0.1;
      if (flag9) {
        this.AddEntity$b1($T31())(new ($T31())(new ($T08())(0, 250, 5, 5), $T1E().getRandomPositionInThisRectangle(new ($T08())(((((((this.screenLeftBound) | 0) + (((this.screenWidth | 0) / 2) | 0)) | 0) - 128) | 0), (((((this.screenHeight | 0) / 2) | 0) - 35) | 0), 256, 71), $T03().random).MemberwiseClone(), 100, 0, 0, 0, 0.6, 1, 6, 0.1, 0.23, false, 0));
      }
      var flag10 = !((this.titleScreenJunimo === null) || 
        this.titleJunimoStartedBobbing || 
        (this.musicSW === null)) && 
      $T5A().op_GreaterThanOrEqual(
        (this.musicSW).get_ElapsedMilliseconds(), 
        $T5A().Create(48000, 0, 0)
      );
      if (flag10) {
        (this.titleScreenJunimo).reset(
          new ($T08())(417, 347, 14, 20), 
          this.titleScreenJunimo.position.MemberwiseClone(), 
          100, 
          0, 
          0, 
          0, 
          9999, 
          1, 
          2, 
          0.25, 
          this.titleScreenJunimo.depth, 
          false, 
          0
        );
        this.titleJunimoStartedBobbing = true;
      } else {
        var flag11 = !((this.titleScreenJunimo === null) || 
          !this.titleJunimoStartedBobbing || 
          (this.musicSW === null)) && 
        $T5A().op_GreaterThanOrEqual(
          (this.musicSW).get_ElapsedMilliseconds(), 
          $T5A().Create(80000, 0, 0)
        );
        if (flag11) {
          (this.titleScreenJunimo).reset(
            new ($T08())(259, 492, 14, 20), 
            this.titleScreenJunimo.position.MemberwiseClone(), 
            100, 
            0, 
            0, 
            0, 
            99999, 
            1, 
            1, 
            1, 
            0.24, 
            false, 
            0
          );
          (this.musicSW).Stop();
          this.musicSW = null;
        }
      }
    } else {
      if (this.gameState === $T25().Map) {
        this.UpdateMapTick(delta_time);
      } else {
        if (this.gameState === $T25().Cutscene) {
          if (!this.gamePaused) {
            delta_time = 0.0166666;
          }
          this.UpdateCutsceneTick();
          if (!this.gamePaused) {
            this.cutsceneTick = (((this.cutsceneTick | 0) + 1) | 0);
          }
        } else {
          if (this.gameState === $T25().FruitsSummary) {
            this.UpdateFruitsSummary(delta_time);
          }
        }
      }
    }
    var delta_ms = ((delta_time * 1000) | 0);

    for (var i2 = 0; i2 < ((this._entities).get_Count() | 0); i2 = ((i2 + 1) | 0)) {
      var flag17 = ((this._entities).get_Item(i2) !== null) && 
      ((this._entities).get_Item(i2)).IsActive();
      if (flag17) {
        ((this._entities).get_Item(i2)).Update(delta_time);
      }
    }
    if ((+this.deathTimer <= 0) && ((this.respawnCounter | 0) > 0)) {

      for (var j = 0; j < ((this._entities).get_Count() | 0); j = ((j + 1) | 0)) {
        ((this._entities).get_Item(j)).OnPlayerReset();
      }
    }

    for (var k = 0; k < ((this._entities).get_Count() | 0); k = ((k + 1) | 0)) {
      var flag19 = ((this._entities).get_Item(k) !== null) && 
      ((this._entities).get_Item(k)).ShouldReap();
      if (flag19) {
        (this._entities).RemoveAt(k);
        k = ((k - 1) | 0);
      }
    }
    var old_screen_left_bound = +this.screenLeftBound;
    if (this.gameState === $T25().Ingame) {
      this.secondsOnThisLevel = +this.secondsOnThisLevel + delta_time;
      if ((+this.screenDarkness >= 1) && this.gameOver) {
        if ((this.gameMode | 0) === 3) {
          this.ShowTitle();
        } else {
          this.levelsBeat = 0;
          this.coinCount = 0;
          this.setUpTheme(this.startTheme);
          this.restartLevel(true);
        }
        result = false;
        return result;
      }
      var flag23 = ((this.checkpointPositions).get_Count() | 0) > 0;
      if (flag23) {

      $loop3: 
        for (var l = 0; l < ((this.checkpointPositions).get_Count() | 0); l = ((l + 1) | 0)) {
          this.GetTrackForXPosition(+(((this.checkpointPositions).get_Item(l) | 0) * (this.tileSize | 0)));
          var flag24 = +this.player.position.X < +(((this.checkpointPositions).get_Item(l) | 0) * (this.tileSize | 0));
          if (flag24) {
            break $loop3;
          }

        $loop4: 
          for (var a$0 = this._entities._items, i$0 = 0, l$0 = (this._entities._size | 0); i$0 < l$0; ($temp00 = i$0, 
              i$0 = ((i$0 + 1) | 0), 
              $temp00)) {
            var entity2 = a$0[i$0];
            var flag25 = ($T19().$As(entity2) !== null) && 
            (((+(+entity2.position.X / +(this.tileSize))) | 0) === ((this.checkpointPositions).get_Item(l) | 0));
            if (flag25) {
              ($T19().$As(entity2)).Activate();
              break $loop4;
            }
          }
          this.checkpointPosition = (+((this.checkpointPositions).get_Item(l)) + 0.5) * +(this.tileSize);
          this.ReapEntities();
          (this.checkpointPositions).RemoveAt(l);
          l = ((l - 1) | 0);
        }
      }
      if (this.gameState === $T25().Cutscene) {
        this.screenLeftBound = 0;
      } else {
        if ((+this.deathTimer <= 0) && ((this.respawnCounter | 0) > 0)) {
          var flag28 = (+this.screenLeftBound - +$T27().Max(+this.player.position.X - 96, 0)) > 400;
          if (flag28) {
            this.screenLeftBound = +$T1E().MoveTowards(this.screenLeftBound, $T27().Max(+this.player.position.X - 96, 0), 1200 * delta_time);
          } else {
            var flag29 = (+this.screenLeftBound - +$T27().Max(+this.player.position.X - 96, 0)) > 200;
            if (flag29) {
              this.screenLeftBound = +$T1E().MoveTowards(this.screenLeftBound, $T27().Max(+this.player.position.X - 96, 0), 600 * delta_time);
            } else {
              this.screenLeftBound = +$T1E().MoveTowards(this.screenLeftBound, $T27().Max(+this.player.position.X - 96, 0), 300 * delta_time);
            }
          }
          if (+this.screenLeftBound < 0) {
            this.screenLeftBound = 0;
          }
        } else {
          if (!((+this.deathTimer > 0) || 
              (+(this.respawnCounter) > 0)) && !this.reachedFinish) {
            this.screenLeftBound = +this.player.position.X - 96;
          }
        }
        if (+this.screenLeftBound < 0) {
          this.screenLeftBound = 0;
        }
      }
      if (+((this.generatorPosition.X | 0) * (this.tileSize | 0)) <= ((+this.screenLeftBound + +(this.screenWidth)) + +(16 * (this.tileSize | 0)))) {
        this._GenerateMoreTrack();
      }
      if ((this.respawnCounter | 0) <= 0) {
        if (((((this.player.position.X) | 0) / (this.tileSize | 0)) | 0) > (this._lastTilePosition | 0)) {
          var number_of_motions = ((((((this.player.position.X) | 0) / (this.tileSize | 0)) | 0) - (this._lastTilePosition | 0)) | 0);
          this._lastTilePosition = ((((this.player.position.X) | 0) / (this.tileSize | 0)) | 0);

          for (var m = 0; m < number_of_motions; m = ((m + 1) | 0)) {
            this.score = (((this.score | 0) + 10) | 0);
          }
        }
      } else {
        if ((this.respawnCounter | 0) > 0) {
          if (+this.deathTimer > 0) {
            this.deathTimer = +this.deathTimer - delta_time;
          } else {
            var flag38 = +this.screenLeftBound <= +$T27().Max(0, +this.player.position.X - 96);
            if (flag38) {
              if (!this.player.enabled) {
                $T1E().CollectGarbage();
              }
              this.player.enabled = true;
              this.respawnCounter = (((this.respawnCounter | 0) - delta_ms) | 0);
            }
          }
        }
      }
      if (!((this._goalIndicator === null) || 
          ((this.distanceToTravel | 0) === -1) || 
          (+this.player.position.X < +this._goalIndicator.position.X) || 
          ((this.distanceToTravel | 0) === -1) || 
          (+this.player.position.Y > ((+this._goalIndicator.position.Y * +(this.tileSize)) + 4)) || 
          this.reachedFinish) && (+this.fadeDelta < 0)) {
        $T03().playSound("reward");
        (this.levelThemesFinishedThisRun).Add(this.currentTheme);
        if ((this.gameMode | 0) === 2) {
          this.score = (((this.score | 0) + 5000) | 0);
          this.UpdateScoreState();
        }

        for (var a$1 = this._entities._items, i$1 = 0, l$1 = (this._entities._size | 0); i$1 < l$1; ($temp01 = i$1, 
            i$1 = ((i$1 + 1) | 0), 
            $temp01)) {
          var entity3 = a$1[i$1];
          var flag42 = $T17().$Is(entity3);
          if (flag42) {
            ($T17().$As(entity3)).Activate();
          } else {
            var flag43 = ($T2E().$As(entity3) !== null) || 
            $T2D().$Is(entity3);
            if (flag43) {
              this.lastLevelWasPerfect = false;
            }
          }
        }
        this.reachedFinish = true;
        this.fadeDelta = 1;
      }
      if ((this.score | 0) > (this.currentHighScore | 0)) {
        this.currentHighScore = (this.score | 0);
      }
      if (+this.scoreUpdateTimer <= 0) {
        this.UpdateScoreState();
      } else {
        this.scoreUpdateTimer = +this.scoreUpdateTimer - delta_time;
      }
      var flag46 = !(!this.reachedFinish || 
        (+$T03().random.NextDouble() >= 0.25)) && 
      !this.gamePaused;
      if (flag46) {
        this.createSparkShower();
      }
      if (this.reachedFinish && (+this.screenDarkness >= 1)) {
        this.reachedFinish = false;
        if ((this.gameMode | 0) !== 3) {
          this.currentTheme = (this.infiniteModeLevels[(((((this.levelsBeat | 0) + 1) | 0) % 8) | 0)] | 0);
        }
        this.levelsBeat = (((this.levelsBeat | 0) + 1) | 0);
        this.setUpTheme(this.currentTheme);
        this.restartLevel(false);
      }
      var death_buffer = 3;
      if ((this.currentTheme | 0) === 9) {
        death_buffer = 32;
      }
      var flag50 = +this.player.position.Y > (+(this.screenHeight) + death_buffer);
      if (flag50) {
        this.Die();
      }
    } else {
      if (this.gameState === $T25().FruitsSummary) {
        this.screenLeftBound = 0;
      }
    }
    if (this.gameState === $T25().Title) {
      this.screenLeftBound = +this.screenLeftBound + (delta_time * 100);
    }
    var num = +this.screenLeftBound - old_screen_left_bound;
    var parallax_scroll_speed2 = +((num / +(this.tileSize)));
    this.lakeSpeedAccumulator = +this.lakeSpeedAccumulator + ((+delta_ms * +((parallax_scroll_speed2 / 4))) % 96);
    this.backBGPosition = +this.backBGPosition + (+delta_ms * +((parallax_scroll_speed2 / 5)));
    this.backBGPosition = (+this.backBGPosition + 9600) % 96;
    this.midBGPosition = +this.midBGPosition + (+delta_ms * +((parallax_scroll_speed2 / 4)));
    this.midBGPosition = (+this.midBGPosition + 9600) % 96;
    this.waterFallPosition = +this.waterFallPosition + (+delta_ms * +(((parallax_scroll_speed2 * 6) / 5)));
    if (+this.waterFallPosition > +((Math.imul(this.screenWidth, 3) / 2 | 0))) {
      this.waterFallPosition = +this.waterFallPosition % +((Math.imul(this.screenWidth, 3) / 2 | 0));
      this.waterfallWidth = ($T03().random.Next(6) | 0);
    }

    for (var n = ((((this.sparkShower).get_Count() | 0) - 1) | 0); n >= 0; n = ((n - 1) | 0)) {
      (this.sparkShower).get_Item(n).dy += 0.105 * +((delta_time / 0.0166666));
      (this.sparkShower).get_Item(n).x += +(this.sparkShower).get_Item(n).dx * +((delta_time / 0.0166666));
      (this.sparkShower).get_Item(n).y += +(this.sparkShower).get_Item(n).dy * +((delta_time / 0.0166666));
      ((this.sparkShower).get_Item(n).c).set_B(((0 + +$T27().Max(0, (Math.sin(+((+this.get_totalTimeMS() / +((62.831853071795862 / (this.sparkShower).get_Item(n).dx)))))) * 255)) | 0));
      var flag54 = this.reachedFinish;
      if (flag54) {
        ((this.sparkShower).get_Item(n).c).set_R(((0 + +$T27().Max(0, (Math.sin(+(((+this.get_totalTimeMS() + 50) / +((62.831853071795862 / (this.sparkShower).get_Item(n).dx)))))) * 255)) | 0));
        ((this.sparkShower).get_Item(n).c).set_G(((0 + +$T27().Max(0, (Math.sin(+(((+this.get_totalTimeMS() + 100) / +((62.831853071795862 / (this.sparkShower).get_Item(n).dx)))))) * 255)) | 0));
        var flag55 = (((this.sparkShower).get_Item(n).c).get_R() | 0) === 0;
        if (flag55) {
          ((this.sparkShower).get_Item(n).c).set_R(255);
        }
        var flag56 = (((this.sparkShower).get_Item(n).c).get_G() | 0) === 0;
        if (flag56) {
          ((this.sparkShower).get_Item(n).c).set_G(255);
        }
      }
      var flag57 = +(this.sparkShower).get_Item(n).y > +(this.screenHeight);
      if (flag57) {
        (this.sparkShower).RemoveAt(n);
      }
    }
    result = false;
    return result;
  }; 

  function MineCart_TransformDraw$05 (dest) {
    dest.X = ((((Math.round((+(dest.X) + +this._shakeOffset.X) * +this.pixelScale)) | 0) + ((this.upperLeft.X) | 0)) | 0);
    dest.Y = ((((Math.round((+(dest.Y) + +this._shakeOffset.Y) * +this.pixelScale)) | 0) + ((this.upperLeft.Y) | 0)) | 0);
    dest.Width = ((+(dest.Width) * +this.pixelScale) | 0);
    dest.Height = ((+(dest.Height) * +this.pixelScale) | 0);
    return dest;
  }; 

  function MineCart_TransformDraw$06 (dest) {
    dest.X = +(((Math.round((+dest.X + +this._shakeOffset.X) * +this.pixelScale)) | 0) + ((this.upperLeft.X) | 0));
    dest.Y = +(((Math.round((+dest.Y + +this._shakeOffset.Y) * +this.pixelScale)) | 0) + ((this.upperLeft.Y) | 0));
    return dest;
  }; 

  function MineCart_unload () {
  }; 

  function MineCart_UpdateCutsceneTick () {
    var $temp00, $temp01, $temp02, $temp03, $temp04;
    var fade_out_time = 400;
    var flag = this.gamePaused;
    if (!flag) {
      if ((this.cutsceneTick | 0) === 0) {
        var flag3 = !(this.minecartLoop).get_IsPaused();
        if (flag3) {
          (this.minecartLoop).Pause();
        }
        var levels = JSIL.Array.New($T3C(), ["Crumble Cavern", "Slippery Slopes", "The Gem Sea Giant", "Ghastly Galleon", "Red Hot Rollercoaster", "Slomp's Stomp", "Sunset Speedway", "?!?!", "???", "Glowshroom Grotto"]);
        this.cutsceneText = levels[this.currentTheme];
        if ((this.currentTheme | 0) === 7) {
          this.cutsceneText = "";
        }
        this.player.enabled = false;
        this.screenDarkness = 1;
        this.fadeDelta = -1;
      }
      if ((this.cutsceneTick | 0) === 100) {
        this.player.enabled = true;
      }
      if ((this.currentTheme | 0) === 0) {
        if ((this.cutsceneTick | 0) === 0) {
          var roadblock = this.AddEntity$b1($T48())(new ($T48())());
          roadblock.position.X = +(6 * (this.tileSize | 0));
          roadblock.position.Y = +(10 * (this.tileSize | 0));
          var roadblock2 = this.AddEntity$b1($T48())(new ($T48())());
          roadblock2.position.X = +(19 * (this.tileSize | 0));
          roadblock2.position.Y = +(10 * (this.tileSize | 0));
        }
        if ((this.cutsceneTick | 0) === 140) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 150) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 130) {
          this.AddEntity$b1($T5C())(new ($T5C())()).position = $S0A().Construct((+this.player.position.X + 100), -16);
        }
        if ((this.cutsceneTick | 0) === 160) {
          this.AddEntity$b1($T5C())(new ($T5C())()).position = $S0A().Construct((+this.player.position.X + 100), -16);
        }
        if ((this.cutsceneTick | 0) === 190) {
          this.AddEntity$b1($T5C())(new ($T5C())()).position = $S0A().Construct((+this.player.position.X + 100), -16);
        }
        if ((this.cutsceneTick | 0) === 270) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 275) {
          (this.player).ReleaseJump();
        }
      }
      if ((this.currentTheme | 0) === 1) {
        if ((this.cutsceneTick | 0) === 0) {
          this.AddTrack(2, 9, $T16().UpSlope);
          this.AddTrack(3, 8, $T16().UpSlope);
          this.AddTrack(4, 8, $T16().Straight);
          this.AddTrack(5, 8, $T16().Straight);
          this.AddTrack(6, 7, $T16().UpSlope);
          this.AddTrack(7, 8, $T16().IceDownSlope);
          this.AddTrack(8, 9, $T16().IceDownSlope);
          this.AddTrack(9, 10, $T16().IceDownSlope);
          this.AddTrack(13, 9, $T16().UpSlope);
          this.AddTrack(17, 8, $T16().UpSlope);
          this.AddTrack(19, 10, $T16().UpSlope);
          this.AddTrack(21, 6, $T16().UpSlope);
          this.AddTrack(24, 8, $T16().Straight);
          this.AddTrack(25, 8, $T16().Straight);
          this.AddTrack(26, 8, $T16().Straight);
          this.AddTrack(27, 8, $T16().Straight);
          this.AddTrack(28, 8, $T16().Straight);
        }
        if ((this.cutsceneTick | 0) === 100) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 130) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 200) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 215) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 260) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 270) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 304) {
          (this.player).Jump();
        }
      }
      if ((this.currentTheme | 0) === 4) {
        if ((this.cutsceneTick | 0) === 0) {
          this.AddTrack(1, 12, $T16().UpSlope);
          this.AddTrack(2, 11, $T16().UpSlope);
          this.AddTrack(3, 10, $T16().UpSlope);
          this.AddTrack(4, 9, $T16().UpSlope);
          this.AddTrack(5, 8, $T16().UpSlope);
          this.AddTrack(6, 9, $T16().DownSlope);
          this.AddTrack(7, 8, $T16().UpSlope);
          this.AddTrack(8, 9, $T16().DownSlope);
          this.AddTrack(9, 8, $T16().UpSlope);
          this.AddTrack(10, 9, $T16().DownSlope);
          this.AddTrack(11, 8, $T16().UpSlope);
          this.AddTrack(12, 9, $T16().DownSlope);
          this.AddTrack(13, 8, $T16().UpSlope);
          this.AddTrack(14, 9, $T16().DownSlope);
          this.AddTrack(15, 8, $T16().UpSlope);
          this.AddTrack(16, 9, $T16().DownSlope);
          this.AddTrack(17, 8, $T16().UpSlope);
          this.AddTrack(18, 9, $T16().DownSlope);
          this.AddTrack(19, 8, $T16().UpSlope);
          this.AddTrack(20, 9, $T16().DownSlope);
          this.AddTrack(21, 8, $T16().UpSlope);
          this.AddTrack(22, 7, $T16().UpSlope);
          this.AddTrack(23, 6, $T16().UpSlope);
          this.AddTrack(24, 5, $T16().UpSlope);
          this.AddTrack(25, 4, $T16().UpSlope);
          this.AddTrack(26, 3, $T16().UpSlope);
          this.AddTrack(27, 2, $T16().UpSlope);
        }
        if ((this.cutsceneTick | 0) === 100) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 115) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 265) {
          (this.player).Jump();
        }
      }
      if ((this.currentTheme | 0) === 2) {
        if ((this.cutsceneTick | 0) === 0) {
          this.AddEntity$b1($T3D())(new ($T3D())());
          this.AddEntity$b1($T3E())(new ($T3E())());
        }
        if ((this.cutsceneTick | 0) === 250) {
          this.player.velocity.X = 0;

        $loop0: 
          for (var a$0 = this._entities._items, i$0 = 0, l$0 = (this._entities._size | 0); i$0 < l$0; ($temp00 = i$0, 
              i$0 = ((i$0 + 1) | 0), 
              $temp00)) {
            var entity3 = a$0[i$0];
            var flag32 = $T3D().$Is(entity3);
            if (flag32) {
              $T03().playSound("croak");
              ($T3D().$As(entity3)).SetState($T5D().OpenMouth, 1);
              break $loop0;
            }
          }
        }
        if ((this.cutsceneTick | 0) === 260) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 265) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 310) {
          this.player.velocity.X = -100;
        }
      }
      if ((this.currentTheme | 0) === 3) {
        if ((this.cutsceneTick | 0) === 0) {
          this.AddTrack(-1, 3, $T16().Straight);
          this.AddTrack(0, 3, $T16().Straight);
          this.AddTrack(1, 4, $T16().DownSlope);
          this.AddTrack(2, 4, $T16().Straight);
          this.AddTrack(3, 4, $T16().Straight);
          this.AddTrack(4, 4, $T16().Straight);
          this.AddTrack(5, 4, $T16().Straight);
          this.AddTrack(6, -2, $T16().Straight);
          this.AddTrack(7, -2, $T16().Straight);
          this.AddTrack(8, -2, $T16().Straight);
          this.AddTrack(9, -2, $T16().Straight);
          this.AddTrack(19, 9, $T16().Straight);
          this.AddTrack(20, 9, $T16().Straight);
          this.AddTrack(21, 8, $T16().UpSlope);
          this.AddTrack(22, 8, $T16().Straight);
          this.AddTrack(23, 8, $T16().Straight);
          this.AddTrack(24, 9, $T16().DownSlope);
          this.AddTrack(25, 9, $T16().Straight);
          this.AddTrack(26, 8, $T16().Straight);
          this.AddTrack(27, 8, $T16().Straight);
          this.AddTrack(28, 8, $T16().Straight);
          this.player.position.Y = +(3 * (this.tileSize | 0));
        }
        if ((this.cutsceneTick | 0) === 150) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 130) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 200) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 215) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 0) {
          var willOWisp = this.AddEntity$b1($T4E())(new ($T4E())());
          willOWisp.position.X = +(10 * (this.tileSize | 0));
          willOWisp.position.Y = +(5 * (this.tileSize | 0));
          willOWisp.visible = false;
        }
        if ((this.cutsceneTick | 0) === 300) {
          $T03().playSound("ghost");
        }
        if (!(((this.cutsceneTick | 0) < 300) || 
            ((((this.cutsceneTick | 0) % 3) | 0) !== 0)) && ((this.cutsceneTick | 0) < 350)) {

          for (var a$1 = this._entities._items, i$1 = 0, l$1 = (this._entities._size | 0); i$1 < l$1; ($temp01 = i$1, 
              i$1 = ((i$1 + 1) | 0), 
              $temp01)) {
            var entity4 = a$1[i$1];
            var flag45 = $T4E().$Is(entity4);
            if (flag45) {
              entity4.visible = !entity4.visible;
            }
          }
        }
        if ((this.cutsceneTick | 0) === 350) {

          for (var a$2 = this._entities._items, i$2 = 0, l$2 = (this._entities._size | 0); i$2 < l$2; ($temp02 = i$2, 
              i$2 = ((i$2 + 1) | 0), 
              $temp02)) {
            var entity5 = a$2[i$2];
            var flag47 = $T4E().$Is(entity5);
            if (flag47) {
              entity5.visible = true;
            }
          }
        }
      }
      if ((this.currentTheme | 0) === 9) {
        if ((this.cutsceneTick | 0) === 0) {
          this.AddTrack(0, 6, $T16().Straight);
          this.AddTrack(1, 6, $T16().Straight);
          this.AddTrack(2, 6, $T16().Straight);
          this.AddTrack(3, 6, $T16().Straight);
          var spring_track = this.AddTrack(4, 6, $T16().Straight);
          var mushroomSpring = this.AddEntity$b1($T5E())(new ($T5E())());
          mushroomSpring.InitializeObstacle(spring_track);
          mushroomSpring.position = $S09().CallStatic($T01(), "op_Multiply", null, $S0A().Construct(4.5, 6), +(this.tileSize)).MemberwiseClone();
          this.AddTrack(8, 6, $T16().MushroomLeft);
          this.AddTrack(9, 6, $T16().MushroomMiddle);
          this.AddTrack(10, 6, $T16().MushroomRight);
          this.AddTrack(12, 10, $T16().Straight);
          var track_parts = $S28().Construct();
          var noxiousMushroom = this.AddEntity$b1($T50())(new ($T50())());
          noxiousMushroom.position = $S09().CallStatic($T01(), "op_Multiply", null, $S0A().Construct(12.5, 10), +(this.tileSize)).MemberwiseClone();
          noxiousMushroom.nextFire = 3;
          var track_piece6 = new ($T60())($T16().MushroomLeft, false);
          track_piece6.position.X = +(15 * (this.tileSize | 0));
          track_piece6.position.Y = +(9 * (this.tileSize | 0));
          track_parts.Add(track_piece6);
          this.AddTrack(track_piece6);
          track_piece6 = new ($T60())($T16().MushroomMiddle, false);
          track_piece6.position.X = +(16 * (this.tileSize | 0));
          track_piece6.position.Y = +(9 * (this.tileSize | 0));
          track_parts.Add(track_piece6);
          this.AddTrack(track_piece6);
          track_piece6 = new ($T60())($T16().MushroomRight, false);
          track_piece6.position.X = +(17 * (this.tileSize | 0));
          track_piece6.position.Y = +(9 * (this.tileSize | 0));
          track_parts.Add(track_piece6);
          this.AddTrack(track_piece6);
          var other_track_parts = $S28().Construct();
          track_piece6 = new ($T60())($T16().MushroomLeft, false);
          track_piece6.position.X = +(22 * (this.tileSize | 0));
          track_piece6.position.Y = +(9 * (this.tileSize | 0));
          other_track_parts.Add(track_piece6);
          this.AddTrack(track_piece6);
          track_piece6 = new ($T60())($T16().MushroomMiddle, false);
          track_piece6.position.X = +(23 * (this.tileSize | 0));
          track_piece6.position.Y = +(9 * (this.tileSize | 0));
          other_track_parts.Add(track_piece6);
          this.AddTrack(track_piece6);
          track_piece6 = new ($T60())($T16().MushroomRight, false);
          track_piece6.position.X = +(24 * (this.tileSize | 0));
          track_piece6.position.Y = +(9 * (this.tileSize | 0));
          other_track_parts.Add(track_piece6);
          this.AddTrack(track_piece6);

          for (var a$3 = track_parts._items, i$3 = 0, l$3 = (track_parts._size | 0); i$3 < l$3; ($temp03 = i$3, 
              i$3 = ((i$3 + 1) | 0), 
              $temp03)) {
            var item = a$3[i$3];
            item.connectedTracks = $S29().Construct(track_parts);
            item.counterBalancedTracks = $S29().Construct(other_track_parts);
          }

          for (var a$4 = other_track_parts._items, i$4 = 0, l$4 = (other_track_parts._size | 0); i$4 < l$4; ($temp04 = i$4, 
              i$4 = ((i$4 + 1) | 0), 
              $temp04)) {
            var item2 = a$4[i$4];
            item2.connectedTracks = $S29().Construct(other_track_parts);
            item2.counterBalancedTracks = $S29().Construct(track_parts);
          }
          this.player.position.Y = +(6 * (this.tileSize | 0));
        }
        if ((this.cutsceneTick | 0) === 115) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 120) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 230) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 250) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 298) {
          (this.player).Jump();
        }
      }
      if ((this.currentTheme | 0) === 6) {
        if ((this.cutsceneTick | 0) === 0) {
          this.AddTrack(0, 6, $T16().Straight);
          this.AddTrack(1, 3, $T16().Straight);
          this.AddTrack(2, 8, $T16().Straight);
          this.AddTrack(4, 4, $T16().Straight);
          this.AddTrack(5, 4, $T16().Straight);
          this.AddTrack(6, 2, $T16().Straight);
          this.AddTrack(8, 8, $T16().Straight);
          this.AddTrack(9, 1, $T16().Straight);
          this.AddTrack(10, 2, $T16().Straight);
          this.AddTrack(12, 8, $T16().Straight);
          this.AddTrack(13, 6, $T16().Straight);
          this.AddTrack(14, 6, $T16().Straight);
          this.AddTrack(15, 8, $T16().Straight);
          this.AddTrack(17, 4, $T16().Straight);
          this.AddTrack(18, 2, $T16().Straight);
          this.AddTrack(19, 2, $T16().Straight);
          this.AddTrack(20, 2, $T16().Straight);
          this.AddTrack(21, 2, $T16().Straight);
          this.AddTrack(22, 2, $T16().Straight);
          this.AddTrack(23, 2, $T16().Straight);
          this.AddTrack(24, 2, $T16().Straight);
          this.AddTrack(25, 2, $T16().Straight);
          this.AddTrack(26, 2, $T16().Straight);
          this.AddTrack(27, 2, $T16().Straight);
          this.AddTrack(28, 2, $T16().Straight);
          this.player.position.Y = +(6 * (this.tileSize | 0));
        }
        if ((this.cutsceneTick | 0) === 129) {
          (this.player).Jump();
        }
        if ((this.cutsceneTick | 0) === 170) {
          (this.player).ReleaseJump();
        }
        if ((this.cutsceneTick | 0) === 214) {
          (this.player).Jump();
        }
      }
      if ((this.currentTheme | 0) === 7) {
        fade_out_time = 800;
        if ((this.cutsceneTick | 0) === 0) {
          var flag62 = this.completelyPerfect;
          if (flag62) {
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(256, 182, 48, 45), $S0A().Construct((+(20 * (this.tileSize | 0)) + 12), (+(10 * (this.tileSize | 0)) - 21.5)), 0, 0, 0, 0, 1000, 1, 1, 0, 0.23, true, 0));
          } else {
            this.AddEntity$b1($T31())(new ($T31())(new ($T08())(256, 112, 25, 32), $S0A().Construct((+(20 * (this.tileSize | 0)) + 12), (+(10 * (this.tileSize | 0)) - 16)), 0, 0, 0, 0, 1000, 1, 1, 0, 0.23, true, 0));
          }
        }
        if ((this.cutsceneTick | 0) === 200) {
          this.player.velocity.X = 40;
        }
        if ((this.cutsceneTick | 0) === 250) {
          this.player.velocity.X = 20;
        }
        if ((this.cutsceneTick | 0) === 300) {
          this.player.velocity.X = 0;
        }
        if (!(((this.cutsceneTick | 0) < 350) || 
            ((((this.cutsceneTick | 0) % 10) | 0) !== 0)) && ((this.cutsceneTick | 0) < 600)) {
          $T03().playSound("junimoMeep1");
          this.AddEntity$b1($T61())(new ($T61())(this.completelyPerfect)).position = $S0A().Construct(+(20 * (this.tileSize | 0)), +(10 * (this.tileSize | 0)));
        }
      }
      var flag67 = (this.cutsceneTick | 0) === fade_out_time;
      if (flag67) {
        this.screenDarkness = 0;
        this.fadeDelta = 2;
      }
      var flag68 = (this.cutsceneTick | 0) === ((fade_out_time + 100) | 0);
      if (flag68) {
        this.EndCutscene();
      } else {
        if ((+this.player.velocity.X > 0) && (+this.player.position.X > +((this.screenWidth | 0) + (this.tileSize | 0)))) {
          var flag70 = !(this.minecartLoop).get_IsPaused();
          if (flag70) {
            (this.minecartLoop).Pause();
          }
          this.player.enabled = false;
        }
        if ((+this.player.velocity.X < 0) && (+this.player.position.X < +(-+(this.tileSize)))) {
          var flag72 = !(this.minecartLoop).get_IsPaused();
          if (flag72) {
            (this.minecartLoop).Pause();
          }
          this.player.enabled = false;
        }
        if (((this.currentTheme | 0) === 5) && ((this.cutsceneTick | 0) === 100)) {
          this.AddEntity$b1($T3F())(new ($T3F())());
          this.slimeBossPosition = -100;
        }
      }
    }
  }; 

  function MineCart_UpdateFruitsSummary (time) {
    if ((this.currentTheme | 0) === 7) {
      this.currentFruitCheckIndex = -1;
      this.ShowCutscene();
    }
    var flag2 = this.gamePaused;
    if (!flag2) {
      if (+this.stateTimer >= 0) {
        this.stateTimer = +this.stateTimer - +time;
        if (+this.stateTimer < 0) {
          this.stateTimer = 0;
        }
      }
      if (+this.stateTimer === 0) {
        if (((this.livesLeft | 0) < 3) && ((this.gameMode | 0) === 3)) {
          this.livesLeft = (((this.livesLeft | 0) + 1) | 0);
          this.stateTimer = 0.25;
          $T03().playSound("coin");
        } else {
          if ((this.currentFruitCheckIndex | 0) === -1) {
            this.fruitEatCount = 0;
            this.currentFruitCheckIndex = 0;
            this.stateTimer = 0.5;
          } else {
            if ((this.currentFruitCheckIndex | 0) >= 3) {
              this.currentFruitCheckIndex = -1;
              this.ShowMap();
            } else {
              var flag9 = (this._collectedFruit).Contains($T29().$Cast(this.currentFruitCheckIndex));
              if (flag9) {
                (this._collectedFruit).Remove($T29().$Cast(this.currentFruitCheckIndex));
                $T03().playSoundPitched("newArtifact", Math.imul(this.currentFruitCheckIndex, 100));
                this.fruitEatCount = (((this.fruitEatCount | 0) + 1) | 0);
                if ((this.fruitEatCount | 0) >= 3) {
                  $T03().playSound("yoba");
                  if ((this.gameMode | 0) === 3) {
                    this.livesLeft = (((this.livesLeft | 0) + 1) | 0);
                  } else {
                    this.score = (((this.score | 0) + 5000) | 0);
                    this.UpdateScoreState();
                  }
                }
              } else {
                $T03().playSoundPitched("sell", Math.imul(this.currentFruitCheckIndex, 100));
              }
              this.stateTimer = 0.5;
              this.currentFruitCheckMagnitude = 3;
              this.currentFruitCheckIndex = (((this.currentFruitCheckIndex | 0) + 1) | 0);
            }
          }
        }
      }
    }
  }; 

  function MineCart_UpdateInput () {
    var flag = this.gamePaused;
    if (!flag) {
      var button_pressed = $T03().AI.IsPressed(this);
      var flag2 = button_pressed !== this._buttonState;
      if (flag2) {
        this._buttonState = button_pressed;
        var buttonState = this._buttonState;
        if (buttonState) {
          if (this.gameState === $T25().Title) {
            if (!((+this.pauseBeforeTitleFadeOutTimer !== 0) || 
                (+this.screenDarkness !== 0)) && (+this.fadeDelta <= 0)) {
              this.pauseBeforeTitleFadeOutTimer = 0.5;
              $T03().playSound("junimoMeep1");
              if (this.titleScreenJunimo !== null) {
                (this.titleScreenJunimo).Destroy();
                this.AddEntity$b1($T31())(new ($T31())(new ($T08())(259, 492, 14, 20), $S0A().Construct((((+this.screenLeftBound + +(((this.screenWidth | 0) / 2 | 0))) - 128) + 137), +((((((this.screenHeight | 0) / 2) | 0) - 35) | 0) + 46)), 110, -200, 0, 3, 99999, 1, 1, 1, 0.24, false, 0));
              }
              if (this.musicSW !== null) {
                (this.musicSW).Stop();
              }
              this.musicSW = null;
            }
            return;
          }
          if (this.gameState === $T25().Cutscene) {
            this.EndCutscene();
            return;
          }
          if (this.gameState === $T25().Map) {
            this.fadeDelta = 1;
            return;
          }
          if (this.player !== null) {
            (this.player).QueueJump();
          }
          this.isJumpPressed = true;
        } else {
          if (!this.gamePaused) {
            if (this.player !== null) {
              (this.player).ReleaseJump();
            }
            this.isJumpPressed = false;
          }
        }
      }
      this._wasJustChatting = false;
    }
  }; 

  function MineCart_UpdateMapTick (time) {
    var $temp00;
    this.mapTimer = +this.mapTimer + +time;
    var map_junimo = null;

  $loop0: 
    for (var a$0 = this._entities._items, i$0 = 0, l$0 = (this._entities._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var entity = a$0[i$0];
      var flag = $T54().$Is(entity);
      if (flag) {
        map_junimo = $T54().$As(entity);
        break $loop0;
      }
    }
    var flag2 = (+this.mapTimer >= 2) && 
    (map_junimo.moveState === $T63().Idle);
    if (flag2) {
      map_junimo.StartMoving();
    }
    var flag3 = map_junimo.moveState === $T63().Moving;
    if (flag3) {
      this.mapTimer = 0;
    }
    var flag4 = (map_junimo.moveState === $T63().Finished) && 
    (+this.mapTimer >= 1.5);
    if (flag4) {
      this.fadeDelta = 1;
    }
    if ((+this.screenDarkness >= 1) && (+this.fadeDelta > 0)) {
      this.ShowCutscene();
    }
  }; 

  function MineCart_UpdateScoreState () {
    this.scoreUpdateTimer = 1;
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      MineCart__ctor
    );

    $.Method({Static:false, Public:false}, "_GenerateMoreTrack", 
      JSIL.MethodSignature.Void, 
      MineCart__GenerateMoreTrack
    );

    $.Method({Static:false, Public:false}, "_IsGeneratingOnLowerHalf", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart__IsGeneratingOnLowerHalf
    );

    $.Method({Static:false, Public:false}, "_IsGeneratingOnUpperHalf", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart__IsGeneratingOnUpperHalf
    );

    $.Method({Static:false, Public:false}, "$linitLevelTransitions$gb__166_0", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart_$linitLevelTransitions$gb__166_0
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$linitLevelTransitions$gb__166_1", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart_$linitLevelTransitions$gb__166_1
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lShowMap$gb__201_0", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+LevelTransition")]), 
      MineCart_$lShowMap$gb__201_0
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lShowTitle$gb__167_0", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+LevelTransition")]), 
      MineCart_$lShowTitle$gb__167_0
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "AddCheckpoint", 
      JSIL.MethodSignature.Action($.Int32), 
      MineCart_AddCheckpoint
    );

    $.Method({Static:false, Public:true , Virtual:true }, "AddEntity", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      MineCart_AddEntity$b1
    );

    $.Method({Static:false, Public:true }, "AddObstacle", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $asm00.TypeRef("StardewValley.Minigames.MineCart+ObstacleTypes")]), 
      MineCart_AddObstacle
    );

    $.Method({Static:false, Public:true }, "AddTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [
          $.Int32, $.Int32, 
          $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType")
        ]), 
      MineCart_AddTrack$00
    );

    $.Method({Static:false, Public:true }, "AddTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      MineCart_AddTrack$01
    );

    $.Method({Static:false, Public:true }, "AddValidObstacle", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+ObstacleTypes"), $asm06.TypeRef("System.Type")]), 
      MineCart_AddValidObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanPause", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart_CanPause
    );

    $.Method({Static:false, Public:true }, "changeScreenSize", 
      JSIL.MethodSignature.Void, 
      MineCart_changeScreenSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CollectCoin", 
      JSIL.MethodSignature.Action($.Int32), 
      MineCart_CollectCoin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CollectFruit", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+CollectableFruits")), 
      MineCart_CollectFruit
    );

    $.Method({Static:false, Public:true }, "createBeginningOfLevel", 
      JSIL.MethodSignature.Void, 
      MineCart_createBeginningOfLevel
    );

    $.Method({Static:false, Public:true }, "CreateBGDecor", 
      JSIL.MethodSignature.Void, 
      MineCart_CreateBGDecor
    );

    $.Method({Static:false, Public:true }, "CreateLakeDecor", 
      JSIL.MethodSignature.Void, 
      MineCart_CreateLakeDecor
    );

    $.Method({Static:false, Public:true }, "CreatePickup", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Pickup"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Boolean]), 
      MineCart_CreatePickup
    );

    $.Method({Static:false, Public:true }, "createSparkShower", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      MineCart_createSparkShower$02
    );

    $.Method({Static:false, Public:true }, "createSparkShower", 
      JSIL.MethodSignature.Void, 
      MineCart_createSparkShower$03
    );

    $.Method({Static:false, Public:true }, "createSparkShower", 
      JSIL.MethodSignature.Action($.Int32), 
      MineCart_createSparkShower$04
    );

    $.Method({Static:false, Public:true }, "Die", 
      JSIL.MethodSignature.Void, 
      MineCart_Die
    );

    $.Method({Static:false, Public:true }, "doMainGameUpdates", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart_doMainGameUpdates
    );

    $.Method({Static:false, Public:true }, "draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      MineCart_draw
    );

    $.Method({Static:false, Public:true }, "EndCutscene", 
      JSIL.MethodSignature.Void, 
      MineCart_EndCutscene
    );

    $.Method({Static:false, Public:true }, "forceQuit", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCart_forceQuit
    );

    $.Method({Static:false, Public:true }, "get_totalTime", 
      JSIL.MethodSignature.Return($.Double), 
      MineCart_get_totalTime
    );

    $.Method({Static:false, Public:true }, "get_totalTimeMS", 
      JSIL.MethodSignature.Return($.Double), 
      MineCart_get_totalTimeMS
    );

    $.Method({Static:false, Public:true }, "GetOverlap", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("StardewValley.Minigames.MineCart+ICollideable")], ["T"]), 
      MineCart_GetOverlap$b1
    );

    $.Method({Static:false, Public:true }, "GetOverlaps", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm00.TypeRef("StardewValley.Minigames.MineCart+ICollideable")], ["T"]), 
      MineCart_GetOverlaps$b1
    );

    $.Method({Static:false, Public:true }, "GetPixelScale", 
      JSIL.MethodSignature.Return($.Single), 
      MineCart_GetPixelScale
    );

    $.Method({Static:false, Public:true }, "GetTrackForXPosition", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [$.Single]), 
      MineCart_GetTrackForXPosition
    );

    $.Method({Static:false, Public:true }, "GetTracksForXPosition", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), [$.Single]), 
      MineCart_GetTracksForXPosition
    );

    $.Method({Static:false, Public:true }, "GetValidCheckpointPosition", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      MineCart_GetValidCheckpointPosition
    );

    $.Method({Static:false, Public:true }, "initLevelTransitions", 
      JSIL.MethodSignature.Void, 
      MineCart_initLevelTransitions
    );

    $.Method({Static:false, Public:true }, "IsTileInBounds", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      MineCart_IsTileInBounds
    );

    $.Method({Static:false, Public:true }, "KeepTileInBounds", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      MineCart_KeepTileInBounds
    );

    $.Method({Static:false, Public:true }, "leftClickHeld", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      MineCart_leftClickHeld
    );

    $.Method({Static:false, Public:true }, "minigameId", 
      JSIL.MethodSignature.Return($.String), 
      MineCart_minigameId
    );

    $.Method({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]), 
      MineCart_Mod
    );

    $.Method({Static:false, Public:true }, "PlayLevelMusic", 
      JSIL.MethodSignature.Void, 
      MineCart_PlayLevelMusic
    );

    $.Method({Static:false, Public:true }, "QuitGame", 
      JSIL.MethodSignature.Void, 
      MineCart_QuitGame
    );

    $.Method({Static:false, Public:true }, "ReapEntities", 
      JSIL.MethodSignature.Void, 
      MineCart_ReapEntities
    );

    $.Method({Static:false, Public:true }, "receiveEventPoke", 
      JSIL.MethodSignature.Action($.Int32), 
      MineCart_receiveEventPoke
    );

    $.Method({Static:false, Public:true }, "receiveKeyPress", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      MineCart_receiveKeyPress
    );

    $.Method({Static:false, Public:true }, "receiveKeyRelease", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      MineCart_receiveKeyRelease
    );

    $.Method({Static:false, Public:true }, "receiveLeftClick", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      MineCart_receiveLeftClick
    );

    $.Method({Static:false, Public:true }, "receiveRightClick", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      MineCart_receiveRightClick
    );

    $.Method({Static:false, Public:true }, "RefreshHighScore", 
      JSIL.MethodSignature.Void, 
      MineCart_RefreshHighScore
    );

    $.Method({Static:false, Public:true }, "releaseLeftClick", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      MineCart_releaseLeftClick
    );

    $.Method({Static:false, Public:true }, "releaseRightClick", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      MineCart_releaseRightClick
    );

    $.Method({Static:false, Public:true }, "ResetState", 
      JSIL.MethodSignature.Void, 
      MineCart_ResetState
    );

    $.Method({Static:false, Public:false}, "restartLevel", 
      JSIL.MethodSignature.Action($.Boolean), 
      MineCart_restartLevel
    );

    $.Method({Static:false, Public:true }, "setGameModeParameters", 
      JSIL.MethodSignature.Void, 
      MineCart_setGameModeParameters
    );

    $.Method({Static:false, Public:true }, "setUpTheme", 
      JSIL.MethodSignature.Action($.Int32), 
      MineCart_setUpTheme
    );

    $.Method({Static:false, Public:true }, "ShowCutscene", 
      JSIL.MethodSignature.Void, 
      MineCart_ShowCutscene
    );

    $.Method({Static:false, Public:true }, "ShowFruitsSummary", 
      JSIL.MethodSignature.Void, 
      MineCart_ShowFruitsSummary
    );

    $.Method({Static:false, Public:true }, "ShowMap", 
      JSIL.MethodSignature.Void, 
      MineCart_ShowMap
    );

    $.Method({Static:false, Public:true }, "ShowTitle", 
      JSIL.MethodSignature.Void, 
      MineCart_ShowTitle
    );

    $.Method({Static:false, Public:true }, "tick", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      MineCart_tick
    );

    $.Method({Static:false, Public:true }, "TransformDraw", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      MineCart_TransformDraw$05
    );

    $.Method({Static:false, Public:true }, "TransformDraw", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      MineCart_TransformDraw$06
    );

    $.Method({Static:false, Public:true }, "unload", 
      JSIL.MethodSignature.Void, 
      MineCart_unload
    );

    $.Method({Static:false, Public:true }, "UpdateCutsceneTick", 
      JSIL.MethodSignature.Void, 
      MineCart_UpdateCutsceneTick
    );

    $.Method({Static:false, Public:true }, "UpdateFruitsSummary", 
      JSIL.MethodSignature.Action($.Single), 
      MineCart_UpdateFruitsSummary
    );

    $.Method({Static:false, Public:true }, "UpdateInput", 
      JSIL.MethodSignature.Void, 
      MineCart_UpdateInput
    );

    $.Method({Static:false, Public:true }, "UpdateMapTick", 
      JSIL.MethodSignature.Action($.Single), 
      MineCart_UpdateMapTick
    );

    $.Method({Static:false, Public:true }, "UpdateScoreState", 
      JSIL.MethodSignature.Void, 
      MineCart_UpdateScoreState
    );

    $.Field({Static:false, Public:true }, "gameState", $asm00.TypeRef("StardewValley.Minigames.MineCart+GameStates"));

    $.Constant({Static:true , Public:true }, "followDistance", $.Int32, 96);

    $.Field({Static:false, Public:true }, "pixelScale", $.Single);

    $.Constant({Static:true , Public:true }, "tilesBeyondViewportToSimulate", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "bgLoopWidth", $.Int32, 96);

    $.Constant({Static:true , Public:true }, "gravity", $.Single, 0.21);

    $.Constant({Static:true , Public:true }, "brownArea", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "frostArea", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "darkArea", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "waterArea", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "lavaArea", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "heavenlyArea", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "sunsetArea", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "endingCutscene", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "bonusLevel1", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "mushroomArea", $.Int32, 9);

    $.Constant({Static:true , Public:true }, "LAST_LEVEL", $.Int32, 6);

    $.Field({Static:false, Public:true , ReadOnly:true }, "infiniteModeLevels", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "shakeMagnitude", $.Single);

    $.Field({Static:false, Public:false}, "_shakeOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Constant({Static:true , Public:true }, "infiniteMode", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "progressMode", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "respawnTime", $.Int32, 1400);

    $.Field({Static:false, Public:true }, "slimeBossPosition", $.Single);

    $.Field({Static:false, Public:true }, "slimeBossSpeed", $.Single);

    $.Field({Static:false, Public:true }, "secondsOnThisLevel", $.Single);

    $.Field({Static:false, Public:true }, "fruitEatCount", $.Int32);

    $.Field({Static:false, Public:true }, "currentFruitCheckIndex", $.Int32);

    $.Field({Static:false, Public:true }, "currentFruitCheckMagnitude", $.Single);

    $.Field({Static:false, Public:true }, "transformMatrix", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Constant({Static:true , Public:true }, "distanceToTravelInMineMode", $.Int32, 350);

    $.Constant({Static:true , Public:true }, "checkpointScanDistance", $.Int32, 16);

    $.Field({Static:false, Public:true }, "coinCount", $.Int32);

    $.Field({Static:false, Public:true }, "gamePaused", $.Boolean);

    $.Field({Static:false, Public:false}, "lakeSpeedAccumulator", $.Single);

    $.Field({Static:false, Public:false}, "backBGPosition", $.Single);

    $.Field({Static:false, Public:false}, "midBGPosition", $.Single);

    $.Field({Static:false, Public:false}, "waterFallPosition", $.Single);

    $.Field({Static:false, Public:false}, "noiseSeed", $.Int32);

    $.Field({Static:false, Public:true }, "upperLeft", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "musicSW", $asm07.TypeRef("System.Diagnostics.Stopwatch"));

    $.Field({Static:false, Public:false}, "titleJunimoStartedBobbing", $.Boolean);

    $.Field({Static:false, Public:false}, "lastLevelWasPerfect", $.Boolean);

    $.Field({Static:false, Public:false}, "completelyPerfect", $.Boolean);

    $.Field({Static:false, Public:false}, "screenWidth", $.Int32);

    $.Field({Static:false, Public:true }, "screenHeight", $.Int32);

    $.Field({Static:false, Public:true }, "tileSize", $.Int32);

    $.Field({Static:false, Public:false}, "waterfallWidth", $.Int32);

    $.Field({Static:false, Public:false}, "ytileOffset", $.Int32);

    $.Field({Static:false, Public:false}, "score", $.Int32);

    $.Field({Static:false, Public:false}, "levelsBeat", $.Int32);

    $.Field({Static:false, Public:false}, "gameMode", $.Int32);

    $.Field({Static:false, Public:false}, "livesLeft", $.Int32);

    $.Field({Static:false, Public:false}, "distanceToTravel", $.Int32);

    $.Field({Static:false, Public:false}, "respawnCounter", $.Int32);

    $.Field({Static:false, Public:false}, "currentTheme", $.Int32);

    $.Field({Static:false, Public:false}, "startTheme", $.Int32);

    $.Field({Static:false, Public:false}, "reachedFinish", $.Boolean);

    $.Field({Static:false, Public:false}, "gameOver", $.Boolean);

    $.Field({Static:false, Public:false}, "screenDarkness", $.Single);

    $.Field({Static:false, Public:false}, "cutsceneText", $.String);

    $.Field({Static:false, Public:true }, "fadeDelta", $.Single);

    $.Field({Static:false, Public:false}, "minecartLoop", $asm00.TypeRef("JunimoKart.ICue"));

    $.Field({Static:false, Public:false}, "texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "_tracks", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")])]));

    $.Field({Static:false, Public:false}, "lakeDecor", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+LakeDecor")]));

    $.Field({Static:false, Public:false}, "obstacles", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Field({Static:false, Public:false}, "sparkShower", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Spark")]));

    $.Field({Static:false, Public:false}, "levelThemesFinishedThisRun", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "backBGTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "midBGTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "caveTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "lakeTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "waterfallTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "trackShadowTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "trackTint", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "midBGSource", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "backBGSource", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "lakeBGSource", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "backBGYOffset", $.Int32);

    $.Field({Static:false, Public:false}, "midBGYOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_totalTime", $.Double);

    $.Field({Static:false, Public:true }, "player", $asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter"));

    $.Field({Static:false, Public:false}, "trackBuilderCharacter", $asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter"));

    $.Field({Static:false, Public:false}, "titleScreenJunimo", $asm00.TypeRef("StardewValley.Minigames.MineCart+MineDebris"));

    $.Field({Static:false, Public:false}, "_entities", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Entity")]));

    $.Field({Static:false, Public:true }, "LEVEL_TRANSITIONS", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("StardewValley.Minigames.MineCart+LevelTransition")]));

    $.Field({Static:false, Public:false}, "_lastGenerator", $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"));

    $.Field({Static:false, Public:false}, "_forcedNextGenerator", $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"));

    $.Field({Static:false, Public:true }, "screenLeftBound", $.Single);

    $.Field({Static:false, Public:true }, "generatorPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:false}, "_trackGenerator", $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"));

    $.Field({Static:false, Public:false}, "_goalIndicator", $asm00.TypeRef("StardewValley.Minigames.MineCart+GoalIndicator"));

    $.Field({Static:false, Public:true }, "bottomTile", $.Int32);

    $.Field({Static:false, Public:true }, "topTile", $.Int32);

    $.Field({Static:false, Public:true }, "deathTimer", $.Single);

    $.Field({Static:false, Public:false}, "_lastTilePosition", $.Int32);

    $.Field({Static:false, Public:true }, "slimeResetPosition", $.Int32);

    $.Field({Static:false, Public:true }, "checkpointPosition", $.Single);

    $.Field({Static:false, Public:true }, "furthestGeneratedCheckpoint", $.Int32);

    $.Field({Static:false, Public:true }, "isJumpPressed", $.Boolean);

    $.Field({Static:false, Public:true }, "stateTimer", $.Single);

    $.Field({Static:false, Public:true }, "cutsceneTick", $.Int32);

    $.Field({Static:false, Public:true }, "pauseBeforeTitleFadeOutTimer", $.Single);

    $.Field({Static:false, Public:true }, "mapTimer", $.Single);

    $.Field({Static:false, Public:false}, "_currentHighScores", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])]));

    $.Field({Static:false, Public:false}, "currentHighScore", $.Int32);

    $.Field({Static:false, Public:true }, "scoreUpdateTimer", $.Single);

    $.Field({Static:false, Public:false}, "_spawnedFruit", $asm09.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+CollectableFruits")]));

    $.Field({Static:false, Public:false}, "_collectedFruit", $asm09.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+CollectableFruits")]));

    $.Field({Static:false, Public:true }, "checkpointPositions", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "_validObstacles", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("StardewValley.Minigames.MineCart+ObstacleTypes"), $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Type")])]));

    $.Field({Static:false, Public:false}, "_generatorRolls", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+GeneratorRoll")]));

    $.Field({Static:false, Public:false}, "_trackAddedFlip", $.Boolean);

    $.Field({Static:false, Public:false}, "_buttonState", $.Boolean);

    $.Field({Static:false, Public:true }, "_wasJustChatting", $.Boolean);

    $.Property({Static:false, Public:true }, "totalTime", $.Double);

    $.Property({Static:false, Public:true }, "totalTimeMS", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum StardewValley.Minigames.MineCart+GameStates */ 

JSIL.MakeEnum(
  {
    FullName: "StardewValley.Minigames.MineCart+GameStates", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Title: 0, 
    Ingame: 1, 
    FruitsSummary: 2, 
    Map: 3, 
    Cutscene: 4, 
  }
);

/* class StardewValley.Minigames.MineCart+LevelTransition */ 

(function LevelTransition$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Func$b1.Of($asm06.System.Boolean))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };


  function LevelTransition__ctor (start_level, destination_level, start_grid_x, start_grid_y, path_string, should_take_path) {
    this.pathString = "";
    this.startLevel = (start_level | 0);
    this.destinationLevel = (destination_level | 0);
    this.startGridCoordinates = new ($T03())(start_grid_x, start_grid_y);
    this.pathString = path_string;
    this.shouldTakePath = should_take_path;
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+LevelTransition", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $asm06.TypeRef("System.Func`1", [$.Boolean])
        ]), 
      LevelTransition__ctor
    );

    $.Field({Static:false, Public:true }, "startLevel", $.Int32);

    $.Field({Static:false, Public:true }, "destinationLevel", $.Int32);

    $.Field({Static:false, Public:true }, "startGridCoordinates", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "pathString", $.String);

    $.Field({Static:false, Public:true }, "shouldTakePath", $asm06.TypeRef("System.Func`1", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum StardewValley.Minigames.MineCart+CollectableFruits */ 

JSIL.MakeEnum(
  {
    FullName: "StardewValley.Minigames.MineCart+CollectableFruits", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Cherry: 0, 
    Orange: 1, 
    Grape: 2, 
    MAX: 3, 
  }
);

/* enum StardewValley.Minigames.MineCart+ObstacleTypes */ 

JSIL.MakeEnum(
  {
    FullName: "StardewValley.Minigames.MineCart+ObstacleTypes", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Normal: 0, 
    Air: 1, 
    Difficult: 2, 
  }
);

/* class StardewValley.Minigames.MineCart+GeneratorRoll */ 

(function GeneratorRoll$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Func$b1.Of($asm06.System.Boolean))) ();
  };


  function GeneratorRoll__ctor (generator_chance, track_generator, additional_generation_condition, forced_next_generator) {
    this.chance = +generator_chance;
    this.generator = track_generator;
    this.forcedNextGenerator = forced_next_generator;
    this.additionalGenerationCondition = additional_generation_condition;
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+GeneratorRoll", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
          $asm06.TypeRef("System.Func`1", [$.Boolean]), $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator")
        ]), 
      GeneratorRoll__ctor
    );

    $.Field({Static:false, Public:true }, "chance", $.Single);

    $.Field({Static:false, Public:true }, "generator", $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"));

    $.Field({Static:false, Public:true }, "additionalGenerationCondition", $asm06.TypeRef("System.Func`1", [$.Boolean]));

    $.Field({Static:false, Public:true }, "forcedNextGenerator", $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Entity */ 

(function Entity$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Entity__ctor () {
    this.visible = true;
    this.enabled = true;
  }; 

  function Entity__Draw (b) {
  }; 

  function Entity__Initialize () {
  }; 

  function Entity__Update (time) {
  }; 

  function Entity_Destroy () {
    this._destroyed = true;
  }; 

  function Entity_Draw (b) {
    if (!(this._destroyed || 
        !this.visible) && this.enabled) {
      this._Draw(b);
    }
  }; 

  function Entity_get_drawnPosition () {
    return $T02().op_Subtraction(this.position.MemberwiseClone(), $S00().Construct(this._game.screenLeftBound, 0));
  }; 

  function Entity_Initialize (game) {
    this._game = game;
    this._Initialize();
  }; 

  function Entity_IsActive () {
    var destroyed = this._destroyed;
    if (destroyed) {
      var result = false;
    } else {
      result = this.enabled;
    }
    return result;
  }; 

  function Entity_IsOnScreen () {
    if (+this.position.X < (+this._game.screenLeftBound - +((this._game.tileSize | 0) * 4))) {
      var result = false;
    } else {
      result = +this.position.X <= ((+this._game.screenLeftBound + +(this._game.screenWidth)) + +((this._game.tileSize | 0) * 4));
    }
    return result;
  }; 

  function Entity_OnPlayerReset () {
  }; 

  function Entity_ShouldReap () {
    return this._destroyed;
  }; 

  function Entity_Update (time) {
    if (!this._destroyed && this.enabled) {
      this._Update(time);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+Entity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Entity__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Entity__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Initialize", 
      JSIL.MethodSignature.Void, 
      Entity__Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      Entity__Update
    );

    $.Method({Static:false, Public:true }, "Destroy", 
      JSIL.MethodSignature.Void, 
      Entity_Destroy
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Entity_Draw
    );

    $.Method({Static:false, Public:true }, "get_drawnPosition", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Entity_get_drawnPosition
    );

    $.Method({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      Entity_Initialize
    );

    $.Method({Static:false, Public:true }, "IsActive", 
      JSIL.MethodSignature.Return($.Boolean), 
      Entity_IsActive
    );

    $.Method({Static:false, Public:true }, "IsOnScreen", 
      JSIL.MethodSignature.Return($.Boolean), 
      Entity_IsOnScreen
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      Entity_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      Entity_ShouldReap
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Single), 
      Entity_Update
    );

    $.Field({Static:false, Public:true }, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "_game", $asm00.TypeRef("StardewValley.Minigames.MineCart"));

    $.Field({Static:false, Public:true }, "visible", $.Boolean);

    $.Field({Static:false, Public:true }, "enabled", $.Boolean);

    $.Field({Static:false, Public:false}, "_destroyed", $.Boolean);

    $.Property({Static:false, Public:true }, "drawnPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MapJunimo */ 

(function MapJunimo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.JunimoKart.ICue)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MapJunimo_MoveState)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm06.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")))) ();
  };


  function MapJunimo__ctor () {
    this.direction = 2;
    this.moveString = "";
    this.moveSpeed = 60;
    $T00().prototype._ctor.call(this);
  }; 

  function MapJunimo__Draw (b) {
    var effect = $T02().None;
    var source_rect = new ($T03())(400, 512, 16, 16);
    if ((this.direction | 0) === 0) {
      source_rect.Y = 544;
    } else {
      if ((this.direction | 0) === 2) {
        source_rect.Y = 512;
      } else {
        source_rect.Y = 528;
        if ((this.direction | 0) === 3) {
          effect = $T02().FlipHorizontally;
        }
      }
    }
    var flag4 = this.isOnWater;
    if (flag4) {
      source_rect.Height = (((source_rect.Height | 0) - 3) | 0);
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $T06().op_Addition(
            $T06().op_Addition(this.get_drawnPosition().MemberwiseClone(), $S02().Construct(0, -1)).MemberwiseClone(), 
            $S03().CallStatic($T06(), "op_Multiply", null, $S02().Construct(0, 1), this.bumpHeight).MemberwiseClone()
          ).MemberwiseClone()).MemberwiseClone(), 
        source_rect.MemberwiseClone(), 
        $T07().get_White().MemberwiseClone(), 
        0, 
        $S02().Construct(8, 8), 
        (this._game).GetPixelScale(), 
        effect, 
        0.45
      );
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $T06().op_Addition(
            $T06().op_Addition(this.get_drawnPosition().MemberwiseClone(), $S02().Construct(2, 10)).MemberwiseClone(), 
            $S03().CallStatic($T06(), "op_Multiply", null, $S02().Construct(0, 1), this.bumpHeight).MemberwiseClone()
          ).MemberwiseClone()).MemberwiseClone(), 
        new ($T03())(414, 624, 13, 5), 
        $T07().get_White().MemberwiseClone(), 
        0, 
        $S02().Construct(8, 8), 
        (this._game).GetPixelScale(), 
        effect, 
        0.44
      );
    } else {
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $T06().op_Addition(
            $T06().op_Addition(this.get_drawnPosition().MemberwiseClone(), $S02().Construct(0, -1)).MemberwiseClone(), 
            $S03().CallStatic($T06(), "op_Multiply", null, $S02().Construct(0, 1), this.bumpHeight).MemberwiseClone()
          ).MemberwiseClone()).MemberwiseClone(), 
        source_rect.MemberwiseClone(), 
        $T07().get_White().MemberwiseClone(), 
        0, 
        $S02().Construct(8, 8), 
        (this._game).GetPixelScale(), 
        effect, 
        0.45
      );
    }
  }; 

  function MapJunimo__Update (time) {
    var desired_direction = (this.direction | 0);
    this.isOnWater = false;
    if (!((+this.position.X <= 194) || 
        (+this.position.X >= 251)) && (+this.position.Y > 165)) {
      this.isOnWater = true;
      (this._game.minecartLoop).Pause();
    }
    var flag2 = (this.moveString.length | 0) > 0;
    if (flag2) {
      if (((this.moveString[0]).charCodeAt(0) | 0) === (("u").charCodeAt(0) | 0)) {
        desired_direction = 0;
      } else {
        if (((this.moveString[0]).charCodeAt(0) | 0) === (("d").charCodeAt(0) | 0)) {
          desired_direction = 2;
        } else {
          if (((this.moveString[0]).charCodeAt(0) | 0) === (("l").charCodeAt(0) | 0)) {
            desired_direction = 3;
          } else {
            if (((this.moveString[0]).charCodeAt(0) | 0) === (("r").charCodeAt(0) | 0)) {
              desired_direction = 1;
            }
          }
        }
      }
    }
    var flag7 = (((this.moveState).valueOf() | 0) === 0) && 
    !(this._game.minecartLoop).get_IsPaused();
    if (flag7) {
      (this._game.minecartLoop).Pause();
    }
    if (this.moveState === $T0C().Moving) {
      this.nextBump = +this.nextBump - +time;
      this.bumpHeight = +$T0D().MoveTowards(this.bumpHeight, 0, +time * 5);
      if (+this.nextBump <= 0) {
        this.nextBump = +$T0D().RandomFloat(0.1, 0.3, null);
        this.bumpHeight = -2;
      }
      var flag10 = !this.isOnWater && 
      (this._game.minecartLoop).get_IsPaused();
      if (flag10) {
        (this._game.minecartLoop).Resume();
      }
      if (+this.pixelsToMove <= 0) {
        var flag12 = desired_direction !== (this.direction | 0);
        if (flag12) {
          this.direction = desired_direction;
          if (!this.isOnWater) {
            $S04().CallVirtual("createSparkShower", null, this._game, this.position.MemberwiseClone());
          } else {
            $T0E().playSound("waterSlosh");
          }
        }
        var flag14 = (this.moveString.length | 0) > 0;
        if (flag14) {
          this.pixelsToMove = 16;
          this.moveString = (this.moveString.substr(1));
        } else {
          this.moveState = $T0C().Finished;
          this.direction = 2;
          if (+this.position.X < 368) {
            if (!this.isOnWater) {
              $S04().CallVirtual("createSparkShower", null, this._game, this.position.MemberwiseClone());
            } else {
              $T0E().playSound("waterSlosh");
            }
          }
        }
      }
      if (+this.pixelsToMove > 0) {
        var pixels_to_move_now = +$T0F().Min(this.pixelsToMove, +this.moveSpeed * +time);
        var direction_to_move = $T06().get_Zero().MemberwiseClone();
        if ((this.direction | 0) === 1) {
          direction_to_move.X = 1;
        } else {
          if ((this.direction | 0) === 3) {
            direction_to_move.X = -1;
          }
        }
        if ((this.direction | 0) === 0) {
          direction_to_move.Y = -1;
        }
        if ((this.direction | 0) === 2) {
          direction_to_move.Y = 1;
        }
        this.position = $T06().op_Addition(this.position.MemberwiseClone(), $S03().CallStatic($T06(), "op_Multiply", null, direction_to_move.MemberwiseClone(), pixels_to_move_now).MemberwiseClone()).MemberwiseClone();
        this.pixelsToMove = +this.pixelsToMove - pixels_to_move_now;
      }
    } else {
      this.bumpHeight = -2;
    }
    var flag22 = (this.moveState === $T0C().Finished) && 
    !(this._game.minecartLoop).get_IsPaused();
    if (flag22) {
      (this._game.minecartLoop).Pause();
    }
    $T00().prototype._Update.call(this, time);
  }; 

  function MapJunimo_StartMoving () {
    this.moveState = $T0C().Moving;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+MapJunimo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MapJunimo__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      MapJunimo__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      MapJunimo__Update
    );

    $.Method({Static:false, Public:true }, "StartMoving", 
      JSIL.MethodSignature.Void, 
      MapJunimo_StartMoving
    );

    $.Field({Static:false, Public:true }, "direction", $.Int32);

    $.Field({Static:false, Public:true }, "moveString", $.String);

    $.Field({Static:false, Public:true }, "moveSpeed", $.Single);

    $.Field({Static:false, Public:true }, "pixelsToMove", $.Single);

    $.Field({Static:false, Public:true }, "moveState", $asm00.TypeRef("StardewValley.Minigames.MineCart+MapJunimo+MoveState"));

    $.Field({Static:false, Public:true }, "nextBump", $.Single);

    $.Field({Static:false, Public:true }, "bumpHeight", $.Single);

    $.Field({Static:false, Public:false}, "isOnWater", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum StardewValley.Minigames.MineCart+MapJunimo+MoveState */ 

JSIL.MakeEnum(
  {
    FullName: "StardewValley.Minigames.MineCart+MapJunimo+MoveState", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Idle: 0, 
    Moving: 1, 
    Finished: 2, 
  }
);

/* class StardewValley.Minigames.MineCart+LakeDecor */ 

(function LakeDecor$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function LakeDecor__ctor (game, theme, bgDecor, forceXPosition) {
    this._lastCycle = -1;
    this._animationFrames = 1;
    this._game = game;
    this._position = new ($T03())($T05().random.Next(0, this._game.screenWidth), $T05().random.Next(160, this._game.screenHeight));
    if ((forceXPosition | 0) !== -1) {
      this._position.X = ((Math.imul(forceXPosition, (((this._game.screenWidth | 0) / 16) | 0)) + ($T05().random.Next(0, (((this._game.screenWidth | 0) / 16) | 0)) | 0)) | 0);
    }
    this._bgDecor = bgDecor;
    this.spriteIndex = ($T05().random.Next(2) | 0);
    switch (theme) {
      case 1: 
        this.spriteIndex = (((this.spriteIndex | 0) + 3) | 0);
        break;

      case 2: 
        this.spriteIndex = 2;
        break;

      case 4: 
        this.spriteIndex = 14;
        this._animationFrames = 6;
        break;

      case 5: 
        this.spriteIndex = (((this.spriteIndex | 0) + 5) | 0);
        break;

      case 6: 
        this.spriteIndex = 1;
        break;

      case 9: 
        this.spriteIndex = (((this.spriteIndex | 0) + 7) | 0);
        break;

    }
    if (bgDecor) {
      this.spriteIndex = (((this.spriteIndex | 0) + 7) | 0);
      this._position.Y = ($T05().random.Next(0, (((this._game.screenHeight | 0) / 3) | 0)) | 0);
      if (((theme | 0) === 2) && ((((forceXPosition | 0) % 5) | 0) === 0)) {
        this.spriteIndex = (((this.spriteIndex | 0) + 1) | 0);
        this._animationFrames = 4;
      } else if ((theme | 0) !== 3) {
        if ((theme | 0) !== 6) {
          if ((theme | 0) === 9) {
            this.spriteIndex = 28;
            this._animationFrames = 4;
          }
        } else {
          this.spriteIndex = 20;
          this._position.Y = ($T05().random.Next(0, (((this._game.screenHeight | 0) / 5) | 0)) | 0);
          this._animationFrames = 4;
        }
      } else {
        this.spriteIndex = 24;
        this._animationFrames = 4;
      }
    }
  }; 

  function LakeDecor_Draw (b) {
    var draw_position = new ($T07())();
    var y_position_in_lake = +((+((this._position.Y | 0) - 160) / +((this._game.screenHeight | 0) - 160)));
    var scroll_speed = +$T09().Lerp(-0.4, -0.75, y_position_in_lake);
    var current_cycle = ((Math.floor(+((+(this._position.X) + (+this._game.screenLeftBound * scroll_speed)) / (+(this._game.screenWidth) + (32 * 2))))) | 0);
    var flag = current_cycle !== (this._lastCycle | 0);
    if (flag) {
      this._lastCycle = current_cycle;
      if ((this.spriteIndex | 0) < 2) {
        this.spriteIndex = ($T05().random.Next(2) | 0);
        if ((this._game.currentTheme | 0) === 6) {
          this.spriteIndex = 1;
        }
      }
    }
    var drawY = +(this._position.Y);
    var bgDecor = this._bgDecor;
    if (bgDecor) {
      scroll_speed = +$T09().Lerp(-0.15, -0.25, +((+(this._position.Y) / +(((this._game.screenHeight | 0) / 3 | 0)))));
      if ((this._game.currentTheme | 0) === 3) {
        drawY += +((((Math.sin($T09().Lerp(0, 6.28318548, +((Math.fround(+((((+(this._game).get_totalTimeMS() + +((this._position.X | 0) * 7)) + +((this._position.Y | 0) * 2)) / 2)) % 1000) / 1000))))) * 3) | 0));
      }
    }
    draw_position.X = +($T00().Mod(((+(this._position.X) + (+this._game.screenLeftBound * scroll_speed)) | 0), ((+(this._game.screenWidth) + (32 * 2)) | 0))) - 32;
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(draw_position.X, drawY)).MemberwiseClone(), 
      new ($T0C())(((((96 + Math.imul((((this.spriteIndex | 0) % 14) | 0), this._game.tileSize)) | 0) + Math.imul(((((+(((+(this._game).get_totalTimeMS() + +((this._position.X | 0) * 10)) % 1000) / +((1000 / (this._animationFrames | 0) | 0)))) | 0) % 14) | 0), this._game.tileSize)) | 0), ((848 + Math.imul((((this.spriteIndex | 0) / 14) | 0), this._game.tileSize)) | 0), 16, 16), 
      (
        ((this.spriteIndex | 0) === 0)
           ? this._game.midBGTint
           : (
            ((this.spriteIndex | 0) === 1)
               ? this._game.lakeTint
               : $T0D().get_White())
      )
      .MemberwiseClone(), 
      0, 
      $T07().get_Zero().MemberwiseClone(), 
      (this._game).GetPixelScale(), 
      $T0E().None, 
      (
        this._bgDecor
           ? 0.65
           : (0.8 + (y_position_in_lake * -0.001)))

    );
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+LakeDecor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("StardewValley.Minigames.MineCart"), $.Int32, 
          $.Boolean, $.Int32
        ]), 
      LakeDecor__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      LakeDecor_Draw
    );

    $.Field({Static:false, Public:true }, "_position", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "spriteIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_game", $asm00.TypeRef("StardewValley.Minigames.MineCart"));

    $.Field({Static:false, Public:true }, "_lastCycle", $.Int32);

    $.Field({Static:false, Public:true }, "_bgDecor", $.Boolean);

    $.Field({Static:false, Public:false}, "_animationFrames", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+BaseTrackGenerator */ 

(function BaseTrackGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Collections.Generic.Dictionary$b2.Of($asm06.System.Int32, $asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Single)))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Func$b3.Of(
          $asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, 
          $asm06.System.Boolean
      )))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_ObstacleTypes)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Single))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Func$b3.Of(
        $asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, 
        $asm06.System.Boolean
    ))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Pickup)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Comparison$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.UInt32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator_$l$gc)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Collections.Generic.Dictionary$b2_KeyCollection_Enumerator.Of($asm06.System.Int32, $asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Single)))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($asm06.System.Int32, $asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Single)))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.Dictionary$b2.Of($asm06.System.Int32, $asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm00.StardewValley.Minigames.MineCart_ObstacleTypes, $asm06.System.Single)), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Func$b3.Of(
            $asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator, 
            $asm06.System.Boolean
        )), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_Track]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Comparison`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")])]))) ();
  };


  function BaseTrackGenerator__ctor (game) {
    this._obstaclePlacementPosition = -10;
    this._obstacleIndices = $S00().Construct();
    this._pickupFunction = $S01().Construct();
    this._game = game;
  }; 

  function BaseTrackGenerator__GenerateTrack () {
    var expr_11_cp_0_cp_0 = this._game;
    expr_11_cp_0_cp_0.generatorPosition.X = (((expr_11_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
  }; 

  function BaseTrackGenerator_AddObstacle$b1 (T, obstacle_type, position, obstacle_chance) {
    (this._obstacleIndices).Add(position, new ($T07())(obstacle_type, obstacle_chance));
    return T.$As(this);
  }; 

  function BaseTrackGenerator_AddPickupFunction$b1 (T, pickup_spawn_function) {
    (this._pickupFunction).Add(pickup_spawn_function);
    return T.$As(this);
  }; 

  function BaseTrackGenerator_AddPickupTrack (x, y, track_type) {
    var track = this.AddTrack(x, y, track_type);
    if (this._pickupFunction === null) {
      var result = track;
    } else {

      for (var i = 0; i < ((this._pickupFunction).get_Count() | 0); i = ((i + 1) | 0)) {
        var flag2 = !(this._pickupFunction).get_Item(i)(track, this);
        if (flag2) {
          result = track;
          return result;
        }
      }
      var pickup = (this._game).CreatePickup($T0D().op_Addition(track.position.MemberwiseClone(), $S02().Construct(8, +(-+(this._game.tileSize)))).MemberwiseClone(), false);
      var flag3 = (pickup !== null) && 
      ((track.trackType === $T09().DownSlope) || 
        (track.trackType === $T09().UpSlope) || 
        (track.trackType === $T09().IceDownSlope) || 
        (track.trackType === $T09().SlimeUpSlope));
      if (flag3) {
        pickup.position = $T0D().op_Addition(pickup.position.MemberwiseClone(), $S02().Construct(0, (+(-+(this._game.tileSize)) * 0.75))).MemberwiseClone();
      }
      result = track;
    }
    return result;
  }; 

  function BaseTrackGenerator_AddTrack$00 (x, y, track_type) {
    var track = (this._game).AddTrack(x, y, track_type);
    (this._generatedTracks).Add(track);
    return track;
  }; 

  function BaseTrackGenerator_AddTrack$01 (track) {
    (this._game).AddTrack(track);
    (this._generatedTracks).Add(track);
    return track;
  }; 

  function BaseTrackGenerator_Always (track, generator) {
    return true;
  }; 

  function BaseTrackGenerator_DownSlopesOnly (track, generator) {
    return (track.trackType === $T09().DownSlope);
  }; 

  function BaseTrackGenerator_EveryOtherTile (track, generator) {
    return (((((+(+track.position.X / 16)) | 0) % 2) | 0) === 0);
  }; 

  function BaseTrackGenerator_FlatsOnly (track, generator) {
    return (track.trackType === $T09().None);
  }; 

  function BaseTrackGenerator_GenerateTrack () {
    this._GenerateTrack();
    this.PopulateObstacles();
  }; 

  function BaseTrackGenerator_IceDownSlopesOnly (track, generator) {
    return (track.trackType === $T09().IceDownSlope);
  }; 

  function BaseTrackGenerator_Initialize () {
    this._generatedTracks = $S03().Construct();
  }; 

  function BaseTrackGenerator_PopulateObstacles () {
    var arg_5C_1 = null;
    var flag = ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) && 
    (((this._generatedTracks).get_Count() >>> 0) > (0 >>> 0));
    if (flag) {
      var arg_5C_0 = this._generatedTracks;
      if ((arg_5C_1 = $T11().$l$g9__24_0) === null) {
        arg_5C_1 = $T11().$l$g9__24_0 = $T0F().New($T11().$l$g9, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator_$l$gc, "$lPopulateObstacles$gb__24_0", $S04(), false, false));
      }
      $S05().Call($T0E().prototype, "Sort", null, arg_5C_0, arg_5C_1);
      var flag2 = (this._obstacleIndices !== null) && 
      (((this._obstacleIndices).get_Count() >>> 0) > (0 >>> 0));
      if (flag2) {
        var enumerator = ((this._obstacleIndices).get_Keys()).GetEnumerator();

        while ($T12().prototype.MoveNext.call(enumerator)) {
          var index = ($T12().prototype.get_Current.call(enumerator) | 0);
          var flag3 = Math.fround($T15().random.NextDouble()) <= +((this._obstacleIndices).get_Item(index)).get_Value();
          if (flag3) {
            switch (index) {
              case -13: 
                var track_index2 = ($T15().random.Next((this._generatedTracks).get_Count()) | 0);
                break;

              case -12: 
                track_index2 = ((((this._generatedTracks).get_Count() | 0) - 1) | 0);
                break;

              case -11: 
                track_index2 = 0;
                break;

              case -10: 
                track_index2 = ((((((this._generatedTracks).get_Count() | 0) - 1) | 0) / 2) | 0);
                break;

              default: 
                track_index2 = index;
                break;

            }
            var track = (this._generatedTracks).get_Item(track_index2);
            var flag4 = (track !== null) && 
            (((+(+track.position.X / +(this._game.tileSize))) | 0) < (this._game.distanceToTravel | 0));
            if (flag4) {
              (this._game).AddObstacle(track, ((this._obstacleIndices).get_Item(index)).get_Key());
            }
          }
        }
      }
    }
  }; 

  function BaseTrackGenerator_UpSlopesOnly (track, generator) {
    return (track.trackType === $T09().UpSlope);
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+BaseTrackGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      BaseTrackGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      BaseTrackGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true }, "AddObstacle", 
      new JSIL.MethodSignature("!!0", [
          $asm00.TypeRef("StardewValley.Minigames.MineCart+ObstacleTypes"), $.Int32, 
          $.Single
        ], ["T"]), 
      BaseTrackGenerator_AddObstacle$b1
    );

    $.Method({Static:false, Public:true }, "AddPickupFunction", 
      new JSIL.MethodSignature("!!0", [$asm06.TypeRef("System.Func`3", [
            $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type, 
            $.Boolean
          ])], ["T"]), 
      BaseTrackGenerator_AddPickupFunction$b1
    );

    $.Method({Static:false, Public:true }, "AddPickupTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [
          $.Int32, $.Int32, 
          $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType")
        ]), 
      BaseTrackGenerator_AddPickupTrack
    );

    $.Method({Static:false, Public:true }, "AddTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [
          $.Int32, $.Int32, 
          $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType")
        ]), 
      BaseTrackGenerator_AddTrack$00
    );

    $.Method({Static:false, Public:true }, "AddTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      BaseTrackGenerator_AddTrack$01
    );

    $.Method({Static:true , Public:true }, "Always", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type]), 
      BaseTrackGenerator_Always
    );

    $.Method({Static:true , Public:true }, "DownSlopesOnly", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type]), 
      BaseTrackGenerator_DownSlopesOnly
    );

    $.Method({Static:true , Public:true }, "EveryOtherTile", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type]), 
      BaseTrackGenerator_EveryOtherTile
    );

    $.Method({Static:true , Public:true }, "FlatsOnly", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type]), 
      BaseTrackGenerator_FlatsOnly
    );

    $.Method({Static:false, Public:true }, "GenerateTrack", 
      JSIL.MethodSignature.Void, 
      BaseTrackGenerator_GenerateTrack
    );

    $.Method({Static:true , Public:true }, "IceDownSlopesOnly", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type]), 
      BaseTrackGenerator_IceDownSlopesOnly
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      BaseTrackGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "PopulateObstacles", 
      JSIL.MethodSignature.Void, 
      BaseTrackGenerator_PopulateObstacles
    );

    $.Method({Static:true , Public:true }, "UpSlopesOnly", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type]), 
      BaseTrackGenerator_UpSlopesOnly
    );

    $.Constant({Static:true , Public:true }, "OBSTACLE_NONE", $.Int32, -10);

    $.Constant({Static:true , Public:true }, "OBSTACLE_MIDDLE", $.Int32, -10);

    $.Constant({Static:true , Public:true }, "OBSTACLE_FRONT", $.Int32, -11);

    $.Constant({Static:true , Public:true }, "OBSTACLE_BACK", $.Int32, -12);

    $.Constant({Static:true , Public:true }, "OBSTACLE_RANDOM", $.Int32, -13);

    $.Field({Static:false, Public:false}, "_generatedTracks", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]));

    $.Field({Static:false, Public:false}, "_game", $asm00.TypeRef("StardewValley.Minigames.MineCart"));

    $.Field({Static:false, Public:false}, "_obstaclePlacementPosition", $.Int32);

    $.Field({Static:false, Public:false}, "_obstacleIndices", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm00.TypeRef("StardewValley.Minigames.MineCart+ObstacleTypes"), $.Single])]));

    $.Field({Static:false, Public:false}, "_pickupFunction", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Func`3", [
            $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $.Type, 
            $.Boolean
          ])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+BaseTrackGenerator+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm06.System.Single]))) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lPopulateObstacles$gb__24_0 (o1, o2) {
    return $S00().CallStatic($T01(), "Sign", null, +o1.position.X - +o2.position.X);
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+BaseTrackGenerator+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lPopulateObstacles$gb__24_0", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      $l$gc_$lPopulateObstacles$gb__24_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__24_0", $asm06.TypeRef("System.Comparison`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class StardewValley.Minigames.MineCart+StraightAwayGenerator */ 

(function StraightAwayGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Comparison$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_StraightAwayGenerator_$l$gc)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm00.StardewValley.Minigames.MineCart_Track, $asm00.StardewValley.Minigames.MineCart_Track]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Comparison`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32), null))) ();
  };


  function StraightAwayGenerator__ctor (game) {
    this.straightAwayLength = 10;
    this.minLength = 3;
    this.maxLength = 5;
    this.staggerChance = 0.25;
    this.minimuimDistanceBetweenStaggers = 1;
    this.generateCheckpoint = true;
    this._generatedCheckpoint = true;
    $T01().prototype._ctor.call(this, game);
  }; 

  function StraightAwayGenerator__GenerateTrack () {
    var arg_277_1 = null;
    if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {

    $loop0: 
      for (var i = 0; i < (this.straightAwayLength | 0); i = ((i + 1) | 0)) {
        if ((this._game.generatorPosition.X | 0) >= (this._game.distanceToTravel | 0)) {
          return;
        }
        var last_y = (this._game.generatorPosition.Y | 0);
        if ((this.currentStaggerDistance | 0) <= 0) {
          var flag4 = +$T06().random.NextDouble() < this.staggerChance;
          if (flag4) {
            var expr_AD_cp_0_cp_0 = this._game;
            expr_AD_cp_0_cp_0.generatorPosition.Y = (((expr_AD_cp_0_cp_0.generatorPosition.Y | 0) + ($T07().GetRandom$b1($T03())(this.staggerPattern, null) | 0)) | 0);
          }
          this.currentStaggerDistance = (this.minimuimDistanceBetweenStaggers | 0);
        } else {
          this.currentStaggerDistance = (((this.currentStaggerDistance | 0) - 1) | 0);
        }
        var flag5 = !(this._game).IsTileInBounds(this._game.generatorPosition.Y);
        if (flag5) {
          this._game.generatorPosition.Y = last_y;
          this.straightAwayLength = 0;
          break $loop0;
        }
        this._game.generatorPosition.Y = ((this._game).KeepTileInBounds(this._game.generatorPosition.Y) | 0);
        var tile_type = $T08().Straight;
        var flag6 = (this._game.generatorPosition.Y | 0) < last_y;
        if (flag6) {
          tile_type = $T08().UpSlope;
        } else {
          var flag7 = (this._game.generatorPosition.Y | 0) > last_y;
          if (flag7) {
            tile_type = $T08().DownSlope;
          }
        }
        var flag8 = (tile_type === $T08().DownSlope) && 
        ((this._game.currentTheme | 0) === 1);
        if (flag8) {
          tile_type = $T08().IceDownSlope;
        }
        var flag9 = (tile_type === $T08().UpSlope) && 
        ((this._game.currentTheme | 0) === 5);
        if (flag9) {
          tile_type = $T08().SlimeUpSlope;
        }
        this.AddPickupTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, tile_type);
        var expr_1FE_cp_0_cp_0 = this._game;
        expr_1FE_cp_0_cp_0.generatorPosition.X = (((expr_1FE_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
      var flag10 = !((this._generatedTracks === null) || 
        (((this._generatedTracks).get_Count() | 0) <= 0) || 
        !this.generateCheckpoint) && 
      !this._generatedCheckpoint;
      if (flag10) {
        this._generatedCheckpoint = true;
        var arg_277_0 = this._generatedTracks;
        if ((arg_277_1 = $T0A().$l$g9__17_0) === null) {
          arg_277_1 = $T0A().$l$g9__17_0 = $T02().New($T0A().$l$g9, null, new JSIL.MethodPointerInfo($asm00.StardewValley.Minigames.MineCart_StraightAwayGenerator_$l$gc, "$l_GenerateTrack$gb__17_0", $S00(), false, false));
        }
        $S01().Call($T09().prototype, "Sort", null, arg_277_0, arg_277_1);
        (this._game).AddCheckpoint(((+(+(this._generatedTracks).get_Item(0).position.X / +(this._game.tileSize))) | 0));
      }
    }
  }; 

  function StraightAwayGenerator_Initialize () {
    this.straightAwayLength = ($T06().random.Next(this.minLength, (((this.maxLength | 0) + 1) | 0)) | 0);
    this._generatedCheckpoint = false;
    if ((this.straightAwayLength | 0) <= 3) {
      this._generatedCheckpoint = true;
    }
    $T01().prototype.Initialize.call(this);
  }; 

  function StraightAwayGenerator_SetCheckpoint (checkpoint) {
    this.generateCheckpoint = checkpoint;
    return this;
  }; 

  function StraightAwayGenerator_SetLength (min, max) {
    this.minLength = (min | 0);
    this.maxLength = (max | 0);
    return this;
  }; 

  function StraightAwayGenerator_SetMinimumDistanceBetweenStaggers (min) {
    this.minimuimDistanceBetweenStaggers = (min | 0);
    return this;
  }; 

  function StraightAwayGenerator_SetStaggerChance (chance) {
    this.staggerChance = +chance;
    return this;
  }; 

  function StraightAwayGenerator_SetStaggerValueRange (min, max) {
    this.staggerPattern = $S02().Construct();

    for (var i = (min | 0); i <= (max | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(i);
    }
    return this;
  }; 

  function StraightAwayGenerator_SetStaggerValues (args) {
    this.staggerPattern = $S02().Construct();

    for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(args[i]);
    }
    return this;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
      Name: "StardewValley.Minigames.MineCart+StraightAwayGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      StraightAwayGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      StraightAwayGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      StraightAwayGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "SetCheckpoint", 
      new JSIL.MethodSignature($.Type, [$.Boolean]), 
      StraightAwayGenerator_SetCheckpoint
    );

    $.Method({Static:false, Public:true }, "SetLength", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      StraightAwayGenerator_SetLength
    );

    $.Method({Static:false, Public:true }, "SetMinimumDistanceBetweenStaggers", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      StraightAwayGenerator_SetMinimumDistanceBetweenStaggers
    );

    $.Method({Static:false, Public:true }, "SetStaggerChance", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      StraightAwayGenerator_SetStaggerChance
    );

    $.Method({Static:false, Public:true }, "SetStaggerValueRange", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      StraightAwayGenerator_SetStaggerValueRange
    );

    $.Method({Static:false, Public:true }, "SetStaggerValues", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      StraightAwayGenerator_SetStaggerValues
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:false, Public:true }, "straightAwayLength", $.Int32);

    $.Field({Static:false, Public:true }, "staggerPattern", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "minLength", $.Int32);

    $.Field({Static:false, Public:true }, "maxLength", $.Int32);

    $.Field({Static:false, Public:true }, "staggerChance", $.Single);

    $.Field({Static:false, Public:true }, "minimuimDistanceBetweenStaggers", $.Int32);

    $.Field({Static:false, Public:true }, "currentStaggerDistance", $.Int32);

    $.Field({Static:false, Public:true }, "generateCheckpoint", $.Boolean);

    $.Field({Static:false, Public:false}, "_generatedCheckpoint", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+StraightAwayGenerator+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm06.System.Single]))) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$l_GenerateTrack$gb__17_0 (o1, o2) {
    return $S00().CallStatic($T01(), "Sign", null, +o1.position.X - +o2.position.X);
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+StraightAwayGenerator+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$l_GenerateTrack$gb__17_0", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      $l$gc_$l_GenerateTrack$gb__17_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__17_0", $asm06.TypeRef("System.Comparison`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class StardewValley.Minigames.MineCart+SmallGapGenerator */ 

(function SmallGapGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };


  function SmallGapGenerator__ctor (game) {
    this.minLength = 3;
    this.maxLength = 5;
    this.minDepth = 5;
    this.maxDepth = 5;
    $T01().prototype._ctor.call(this, game);
  }; 

  function SmallGapGenerator__GenerateTrack () {
    if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {
      var depth = ($T04().random.Next(this.minDepth, (((this.maxDepth | 0) + 1) | 0)) | 0);
      var length = ($T04().random.Next(this.minLength, (((this.maxLength | 0) + 1) | 0)) | 0);
      this.AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T05().Straight);
      var expr_95_cp_0_cp_0 = this._game;
      expr_95_cp_0_cp_0.generatorPosition.X = (((expr_95_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      var expr_AA_cp_0_cp_0 = this._game;
      expr_AA_cp_0_cp_0.generatorPosition.Y = (((expr_AA_cp_0_cp_0.generatorPosition.Y | 0) + depth) | 0);

      for (var i = 0; i < length; i = ((i + 1) | 0)) {
        if ((this._game.generatorPosition.X | 0) >= (this._game.distanceToTravel | 0)) {
          var expr_EE_cp_0_cp_0 = this._game;
          expr_EE_cp_0_cp_0.generatorPosition.Y = (((expr_EE_cp_0_cp_0.generatorPosition.Y | 0) - depth) | 0);
          return;
        }
        this.AddPickupTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T05().Straight);
        var expr_130_cp_0_cp_0 = this._game;
        expr_130_cp_0_cp_0.generatorPosition.X = (((expr_130_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
      var expr_157_cp_0_cp_0 = this._game;
      expr_157_cp_0_cp_0.generatorPosition.Y = (((expr_157_cp_0_cp_0.generatorPosition.Y | 0) - depth) | 0);
      if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {
        this.AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T05().Straight);
        var expr_1B8_cp_0_cp_0 = this._game;
        expr_1B8_cp_0_cp_0.generatorPosition.X = (((expr_1B8_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
    }
  }; 

  function SmallGapGenerator_Initialize () {
    $T01().prototype.Initialize.call(this);
  }; 

  function SmallGapGenerator_SetDepth (min, max) {
    this.minDepth = (min | 0);
    this.maxDepth = (max | 0);
    return this;
  }; 

  function SmallGapGenerator_SetLength (min, max) {
    this.minLength = (min | 0);
    this.maxLength = (max | 0);
    return this;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
      Name: "StardewValley.Minigames.MineCart+SmallGapGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      SmallGapGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      SmallGapGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      SmallGapGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "SetDepth", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      SmallGapGenerator_SetDepth
    );

    $.Method({Static:false, Public:true }, "SetLength", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      SmallGapGenerator_SetLength
    );

    $.Field({Static:false, Public:true }, "minLength", $.Int32);

    $.Field({Static:false, Public:true }, "maxLength", $.Int32);

    $.Field({Static:false, Public:true }, "minDepth", $.Int32);

    $.Field({Static:false, Public:true }, "maxDepth", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+RapidHopsGenerator */ 

(function RapidHopsGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Math)) ();
  };


  function RapidHopsGenerator__ctor (game) {
    this.minLength = 3;
    this.maxLength = 5;
    $T01().prototype._ctor.call(this, game);
  }; 

  function RapidHopsGenerator__GenerateTrack () {
    if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {
      if ((this.startY | 0) === 0) {
        this.startY = (this._game.generatorPosition.Y | 0);
      }
      var length = ($T04().random.Next(this.minLength, (((this.maxLength | 0) + 1) | 0)) | 0);
      this.AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T05().Straight);
      var expr_A1_cp_0_cp_0 = this._game;
      expr_A1_cp_0_cp_0.generatorPosition.X = (((expr_A1_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      var expr_B6_cp_0_cp_0 = this._game;
      expr_B6_cp_0_cp_0.generatorPosition.Y = (((expr_B6_cp_0_cp_0.generatorPosition.Y | 0) + (this.yStep | 0)) | 0);

      for (var i = 0; i < length; i = ((i + 1) | 0)) {
        if (((this._game.generatorPosition.Y | 0) < 3) || ((this._game.generatorPosition.Y | 0) > (((((this._game.screenHeight | 0) / (this._game.tileSize | 0)) | 0) - 2) | 0))) {
          this._game.generatorPosition.Y = (((((this._game.screenHeight | 0) / (this._game.tileSize | 0)) | 0) - 2) | 0);
          this.startY = (this._game.generatorPosition.Y | 0);
        }
        if ((this._game.generatorPosition.X | 0) >= (this._game.distanceToTravel | 0)) {
          var expr_187_cp_0_cp_0 = this._game;
          expr_187_cp_0_cp_0.generatorPosition.Y = (((expr_187_cp_0_cp_0.generatorPosition.Y | 0) - (this.yStep | 0)) | 0);
          return;
        }
        this.AddPickupTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T05().Straight);
        var expr_1CE_cp_0_cp_0 = this._game;
        expr_1CE_cp_0_cp_0.generatorPosition.X = (((expr_1CE_cp_0_cp_0.generatorPosition.X | 0) + ($T04().random.Next(2, 4) | 0)) | 0);
        var flag5 = +$T04().random.NextDouble() < 0.33;
        if (flag5) {
          this.AddTrack((((this._game.generatorPosition.X | 0) - 1) | 0), $T07().Min((((((this._game.screenHeight | 0) / (this._game.tileSize | 0)) | 0) - 2) | 0), (((this._game.generatorPosition.Y | 0) + ($T04().random.Next(5) | 0)) | 0)), $T05().Straight);
        }
        var flag6 = this.chaotic;
        if (flag6) {
          this._game.generatorPosition.Y = (((this.startY | 0) + ($T04().random.Next(-(Math.abs(this.yStep)), (((Math.abs(this.yStep)) + 1) | 0)) | 0)) | 0);
        } else {
          var expr_2AA_cp_0_cp_0 = this._game;
          expr_2AA_cp_0_cp_0.generatorPosition.Y = (((expr_2AA_cp_0_cp_0.generatorPosition.Y | 0) + (this.yStep | 0)) | 0);
        }
      }
      if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {
        var expr_2FB_cp_0_cp_0 = this._game;
        expr_2FB_cp_0_cp_0.generatorPosition.Y = (((expr_2FB_cp_0_cp_0.generatorPosition.Y | 0) - (this.yStep | 0)) | 0);
        this.AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T05().Straight);
        var expr_33D_cp_0_cp_0 = this._game;
        expr_33D_cp_0_cp_0.generatorPosition.X = (((expr_33D_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
    }
  }; 

  function RapidHopsGenerator_Initialize () {
    $T01().prototype.Initialize.call(this);
  }; 

  function RapidHopsGenerator_SetChaotic (chaotic) {
    this.chaotic = chaotic;
    return this;
  }; 

  function RapidHopsGenerator_SetLength (min, max) {
    this.minLength = (min | 0);
    this.maxLength = (max | 0);
    return this;
  }; 

  function RapidHopsGenerator_SetYStep (yStep) {
    this.yStep = (yStep | 0);
    return this;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
      Name: "StardewValley.Minigames.MineCart+RapidHopsGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      RapidHopsGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      RapidHopsGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      RapidHopsGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "SetChaotic", 
      new JSIL.MethodSignature($.Type, [$.Boolean]), 
      RapidHopsGenerator_SetChaotic
    );

    $.Method({Static:false, Public:true }, "SetLength", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      RapidHopsGenerator_SetLength
    );

    $.Method({Static:false, Public:true }, "SetYStep", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      RapidHopsGenerator_SetYStep
    );

    $.Field({Static:false, Public:true }, "minLength", $.Int32);

    $.Field({Static:false, Public:true }, "maxLength", $.Int32);

    $.Field({Static:false, Public:false}, "startY", $.Int32);

    $.Field({Static:false, Public:true }, "yStep", $.Int32);

    $.Field({Static:false, Public:true }, "chaotic", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Obstacle */ 

(function Obstacle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Obstacle__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function Obstacle__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T03())(16, 0, 16, 16), 
      $T04().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T06().None, 
      0.45
    );
  }; 

  function Obstacle_CanSpawnHere (track) {
    return true;
  }; 

  function Obstacle_GetBounds () {
    var bounds = this.GetLocalBounds();
    bounds.X = (((bounds.X | 0) + ((this.position.X) | 0)) | 0);
    bounds.Y = (((bounds.Y | 0) + ((this.position.Y) | 0)) | 0);
    return bounds;
  }; 

  function Obstacle_GetLocalBounds () {
    return new ($T03())(-4, -12, 8, 12);
  }; 

  function Obstacle_InitializeObstacle (track) {
  }; 

  function Obstacle_OnBounce (player) {
    return false;
  }; 

  function Obstacle_OnBump (player) {
    return false;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+Obstacle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Obstacle__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Obstacle__Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanSpawnHere", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      Obstacle_CanSpawnHere
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Obstacle_GetBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Obstacle_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      Obstacle_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBounce", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]), 
      Obstacle_OnBounce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      Obstacle_OnBump
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("StardewValley.Minigames.MineCart+ICollideable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+NoxiousMushroom */ 

(function NoxiousMushroom$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_NoxiousGas)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function NoxiousMushroom__ctor () {
    this.firePeriod = 1.75;
    this.frames = JSIL.Array.New($T00(), [new ($T00())(288, 736, 16, 16), new ($T00())(288, 752, 16, 16), new ($T00())(288, 768, 16, 16)]);
    this.frameDuration = 0.05;
    $T01().prototype._ctor.call(this);
  }; 

  function NoxiousMushroom__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      this.frames[this.currentFrame].MemberwiseClone(), 
      $T05().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.45
    );
  }; 

  function NoxiousMushroom__Update (time) {
    this.nextFire = +this.nextFire - +time;
    if (+this.nextFire <= 0) {
      if (!(!this.IsOnScreen() || 
          (+this._game.deathTimer > 0)) && (+(this._game.respawnCounter) <= 0)) {
        var noxiousGas = (this._game).AddEntity$b1($T09())(new ($T09())());
        noxiousGas.position = this.position.MemberwiseClone();
        noxiousGas.position.Y = +((this.GetBounds()).get_Top());
        noxiousGas.InitializeObstacle(this._track);
        $T0A().playSound("sandyStep");
        this.currentFrame = 1;
        this.frameTimer = +this.frameDuration;
      }
      this.nextFire = 1.5;
    }
    if ((this.currentFrame | 0) > 0) {
      this.frameTimer = +this.frameTimer - +time;
      if (+this.frameTimer <= 0) {
        this.frameTimer = +this.frameDuration;
        this.currentFrame = (((this.currentFrame | 0) + 1) | 0);
        var flag5 = (this.currentFrame | 0) >= (this.frames.length | 0);
        if (flag5) {
          this.currentFrame = 0;
          this.frameTimer = 0;
        }
      }
    }
  }; 

  function NoxiousMushroom_CanSpawnHere (track) {
    var flag = track === null;
    if (flag) {
      var result = false;
    } else {
      var flag2 = track.trackType > $T0E().Straight;
      result = !flag2;
    }
    return result;
  }; 

  function NoxiousMushroom_GetLocalBounds () {
    return new ($T00())(-4, -12, 8, 12);
  }; 

  function NoxiousMushroom_InitializeObstacle (track) {
    this.nextFire = +$T0F().RandomFloat(0, this.firePeriod, null);
    this._track = track;
    $T01().prototype.InitializeObstacle.call(this, track);
  }; 

  function NoxiousMushroom_OnPlayerReset () {
    $T04().prototype.OnPlayerReset.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+NoxiousMushroom", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NoxiousMushroom__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      NoxiousMushroom__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      NoxiousMushroom__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanSpawnHere", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      NoxiousMushroom_CanSpawnHere
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      NoxiousMushroom_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      NoxiousMushroom_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      NoxiousMushroom_OnPlayerReset
    );

    $.Field({Static:false, Public:true }, "nextFire", $.Single);

    $.Field({Static:false, Public:true }, "firePeriod", $.Single);

    $.Field({Static:false, Public:false}, "_track", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"));

    $.Field({Static:false, Public:true }, "frames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:true }, "currentFrame", $.Int32);

    $.Field({Static:false, Public:true }, "frameDuration", $.Single);

    $.Field({Static:false, Public:true }, "frameTimer", $.Single);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MushroomSpring */ 

(function MushroomSpring$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Collections.Generic.HashSet$b1.Of($asm00.StardewValley.Minigames.MineCart_MineCartCharacter))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.System.Collections.Generic.HashSet$b1.Of($asm00.StardewValley.Minigames.MineCart_MineCartCharacter), null))) ();
  };


  function MushroomSpring__ctor () {
    this.frames = JSIL.Array.New($T00(), [new ($T00())(400, 736, 16, 16), new ($T00())(400, 752, 16, 16), new ($T00())(400, 768, 16, 16)]);
    this.frameDuration = 0.05;
    $T01().prototype._ctor.call(this);
  }; 

  function MushroomSpring__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      this.frames[this.currentFrame].MemberwiseClone(), 
      $T05().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.45
    );
  }; 

  function MushroomSpring__Update (time) {
    if ((this.currentFrame | 0) > 0) {
      this.frameTimer = +this.frameTimer - +time;
      if (+this.frameTimer <= 0) {
        this.frameTimer = +this.frameDuration;
        this.currentFrame = (((this.currentFrame | 0) + 1) | 0);
        var flag3 = (this.currentFrame | 0) >= (this.frames.length | 0);
        if (flag3) {
          this.currentFrame = 0;
          this.frameTimer = 0;
        }
      }
    }
  }; 

  function MushroomSpring_BouncePlayer (player) {
    var flag = !(this._bouncedPlayers).Contains(player);
    if (flag) {
      (this._bouncedPlayers).Add(player);
      var flag2 = $T0D().$Is(player);
      if (flag2) {
        this.currentFrame = 1;
        this.frameTimer = +this.frameDuration;
        this.ShootDebris(
          $T0F().random.Next(-10, -4), 
          $T0F().random.Next(-60, -19)
        );
        this.ShootDebris(
          $T0F().random.Next(5, 11), 
          $T0F().random.Next(-60, -19)
        );
        this.ShootDebris(
          $T0F().random.Next(-20, -9), 
          $T0F().random.Next(-40, 0)
        );
        this.ShootDebris(
          $T0F().random.Next(10, 21), 
          $T0F().random.Next(-40, 0)
        );
        $T0F().playSound("hitEnemy");
      }
      player.Bounce(0.15);
    }
  }; 

  function MushroomSpring_CanSpawnHere (track) {
    var flag = track === null;
    if (flag) {
      var result = false;
    } else {
      var flag2 = track.trackType > $T11().Straight;
      result = !flag2;
    }
    return result;
  }; 

  function MushroomSpring_GetLocalBounds () {
    return new ($T00())(-4, -12, 8, 12);
  }; 

  function MushroomSpring_InitializeObstacle (track) {
    $T01().prototype.InitializeObstacle.call(this, track);
    this._bouncedPlayers = $S03().Construct();
  }; 

  function MushroomSpring_OnBounce (player) {
    this.BouncePlayer(player);
    return true;
  }; 

  function MushroomSpring_OnBump (player) {
    this.BouncePlayer(player);
    return true;
  }; 

  function MushroomSpring_OnPlayerReset () {
    (this._bouncedPlayers).Clear();
    $T04().prototype.OnPlayerReset.call(this);
  }; 

  function MushroomSpring_ShootDebris (x, y) {
    (this._game).AddEntity$b1($T13())(new ($T13())(new ($T00())(368, 784, 16, 16), $T14().PointToVector2((this.GetBounds()).get_Center().MemberwiseClone()).MemberwiseClone(), +x, +y, 0.25, 0, 0.9, 1, 3, 0.3, 0.45, false, 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+MushroomSpring", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MushroomSpring__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      MushroomSpring__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      MushroomSpring__Update
    );

    $.Method({Static:false, Public:true }, "BouncePlayer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")), 
      MushroomSpring_BouncePlayer
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanSpawnHere", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      MushroomSpring_CanSpawnHere
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      MushroomSpring_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      MushroomSpring_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBounce", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]), 
      MushroomSpring_OnBounce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      MushroomSpring_OnBump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      MushroomSpring_OnPlayerReset
    );

    $.Method({Static:false, Public:true }, "ShootDebris", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      MushroomSpring_ShootDebris
    );

    $.Field({Static:false, Public:false}, "_bouncedPlayers", $asm09.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]));

    $.Field({Static:false, Public:true }, "frames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:true }, "currentFrame", $.Int32);

    $.Field({Static:false, Public:true }, "frameDuration", $.Single);

    $.Field({Static:false, Public:true }, "frameTimer", $.Single);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MushroomBalanceTrackGenerator */ 

(function MushroomBalanceTrackGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BalanceTrack)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+BalanceTrack")])]))) ();
  };


  function MushroomBalanceTrackGenerator__ctor (game) {
    this.minHopSize = 1;
    this.maxHopSize = 1;
    $T01().prototype._ctor.call(this, game);
    this.staggerPattern = $S00().Construct();
  }; 

  function MushroomBalanceTrackGenerator__GenerateTrack () {
    var $temp00, $temp01, $temp02, $temp03;
    if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {

      for (var i = 0; i < (this.leadupRunway | 0); i = ((i + 1) | 0)) {
        (this._game).AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T04().Straight);
        var expr_6D_cp_0_cp_0 = this._game;
        expr_6D_cp_0_cp_0.generatorPosition.X = (((expr_6D_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
      this._game.trackBuilderCharacter.enabled = true;
      var balance_tracks = $S01().Construct();

      for (var j = 0; j < 4; j = ((j + 1) | 0)) {
        var flag2 = (j === 1) && 
        (+$T08().random.NextDouble() < 0.5);
        if (!flag2) {
          this._game.trackBuilderCharacter.position.X = ((+(this._game.generatorPosition.X) - 1) + 0.5) * +(this._game.tileSize);
          var current_track = (this._game).GetTrackForXPosition(this._game.trackBuilderCharacter.position.X);
          this._game.trackBuilderCharacter.position.Y = +((this._game.generatorPosition.Y | 0) * (this._game.tileSize | 0));
          (this._game.trackBuilderCharacter).ForceGrounded();
          (this._game.trackBuilderCharacter).Jump();
          (this._game.trackBuilderCharacter).Update(0.03);
          var target_y2 = (this._game.generatorPosition.Y | 0);
          var flag3 = j !== 1;
          if (flag3) {
            var flag4 = (j === 3) && 
            (+$T08().random.NextDouble() < 0.5);
            if (flag4) {
              target_y2 = ((target_y2 - 4) | 0);
            } else {
              var flag5 = (this.staggerPattern !== null) && 
              (((this.staggerPattern).get_Count() | 0) > 0);
              if (flag5) {
                target_y2 = ((target_y2 + ($T0C().GetRandom$b1($T03())(this.staggerPattern, null) | 0)) | 0);
              }
            }
          }
          target_y2 = ((this._game).KeepTileInBounds(target_y2) | 0);

        $loop2: 
          for (var has_landed = false; !has_landed; ) {
            var flag6 = !((+this._game.trackBuilderCharacter.position.Y >= +(target_y2 * (this._game.tileSize | 0))) || 
              ((Math.abs(((Math.round(+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize)))) - +(this._game.generatorPosition.X)))) <= 0) || 
              !(this._game.trackBuilderCharacter).IsJumping()) && 
            (+$T08().random.NextDouble() < this.releaseJumpChance);
            if (flag6) {
              (this._game.trackBuilderCharacter).ReleaseJump();
            }
            var old_position = this._game.trackBuilderCharacter.position.MemberwiseClone();
            var arg_304_0 = this._game.trackBuilderCharacter.velocity.MemberwiseClone();
            (this._game.trackBuilderCharacter).Update(0.03);
            var flag7 = (+old_position.Y < +(target_y2 * (this._game.tileSize | 0))) && 
            (+this._game.trackBuilderCharacter.position.Y >= +(target_y2 * (this._game.tileSize | 0)));
            if (flag7) {
              has_landed = true;
            }
            if ((this._game.trackBuilderCharacter).IsGrounded() || (+((+this._game.trackBuilderCharacter.position.Y / +(this._game.tileSize))) > +(this._game.bottomTile))) {
              this._game.trackBuilderCharacter.position = old_position.MemberwiseClone();
              var flag9 = !(this._game).IsTileInBounds(target_y2);
              if (flag9) {
                return;
              }
              target_y2 = ((this._game).KeepTileInBounds(((+(+old_position.Y / +(this._game.tileSize))) | 0)) | 0);
              break $loop2;
            }
          }
          this._game.generatorPosition.Y = target_y2;
          var flag10 = (j === 0) || 
          (j === 2);
          if (flag10) {
            var current_balance_tracks = $S01().Construct();
            this._game.generatorPosition.X = ((+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize))) | 0);
            var y_offset = 0;
            var flag11 = (j === 2) && 
            ((balance_tracks.get_Count() | 0) > 0);
            if (flag11) {
              y_offset = +balance_tracks.get_Item(0).position.Y - +balance_tracks.get_Item(0).startY;
            }
            var track3 = new ($T11())($T04().MushroomLeft, false);
            track3.position.X = +((this._game.generatorPosition.X | 0) * (this._game.tileSize | 0));
            track3.position.Y = +this._game.trackBuilderCharacter.position.Y + y_offset;
            $T11().$As(track3).startY = +track3.position.Y;
            this.AddTrack(track3);
            current_balance_tracks.Add($T11().$As(track3));
            var expr_54F_cp_0_cp_0 = this._game;
            expr_54F_cp_0_cp_0.generatorPosition.X = (((expr_54F_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
            track3 = new ($T11())($T04().MushroomMiddle, false);
            track3.position.X = +((this._game.generatorPosition.X | 0) * (this._game.tileSize | 0));
            track3.position.Y = +this._game.trackBuilderCharacter.position.Y + y_offset;
            $T11().$As(track3).startY = +track3.position.Y;
            this.AddTrack(track3);
            current_balance_tracks.Add($T11().$As(track3));
            var expr_5EA_cp_0_cp_0 = this._game;
            expr_5EA_cp_0_cp_0.generatorPosition.X = (((expr_5EA_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
            track3 = new ($T11())($T04().MushroomRight, false);
            track3.position.X = +((this._game.generatorPosition.X | 0) * (this._game.tileSize | 0));
            track3.position.Y = +this._game.trackBuilderCharacter.position.Y + y_offset;
            $T11().$As(track3).startY = +track3.position.Y;
            this.AddTrack(track3);
            current_balance_tracks.Add($T11().$As(track3));
            var expr_685_cp_0_cp_0 = this._game;
            expr_685_cp_0_cp_0.generatorPosition.X = (((expr_685_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);

            for (var a$0 = current_balance_tracks._items, i$0 = 0, l$0 = (current_balance_tracks._size | 0); i$0 < l$0; ($temp00 = i$0, 
                i$0 = ((i$0 + 1) | 0), 
                $temp00)) {
              var item = a$0[i$0];
              item.connectedTracks = $S02().Construct(current_balance_tracks);
            }
            var flag12 = j === 2;
            if (flag12) {

              for (var a$1 = balance_tracks._items, i$1 = 0, l$1 = (balance_tracks._size | 0); i$1 < l$1; ($temp01 = i$1, 
                  i$1 = ((i$1 + 1) | 0), 
                  $temp01)) {
                var item2 = a$1[i$1];
                item2.counterBalancedTracks = $S02().Construct(current_balance_tracks);
              }

              for (var a$2 = current_balance_tracks._items, i$2 = 0, l$2 = (current_balance_tracks._size | 0); i$2 < l$2; ($temp02 = i$2, 
                  i$2 = ((i$2 + 1) | 0), 
                  $temp02)) {
                var item3 = a$2[i$2];
                item3.counterBalancedTracks = $S02().Construct(balance_tracks);
              }
            }
            (this._game.trackBuilderCharacter).SnapToFloor();

          $loop7: 
            while ((this._game.trackBuilderCharacter).IsGrounded()) {
              var old_x = +this._game.trackBuilderCharacter.position.X;
              (this._game.trackBuilderCharacter).Update(0.03);
              if (!(this._game.trackBuilderCharacter).IsGrounded()) {
                this._game.trackBuilderCharacter.position.X = old_x;
              }
              var flag14 = +$T08().random.NextDouble() < 0.33000001311302185;
              if (flag14) {
                break $loop7;
              }
            }
            $T05().prototype.AddRange.call(balance_tracks, current_balance_tracks);
          } else {
            var hop_width = ($T08().random.Next(this.minHopSize, (((this.maxHopSize | 0) + 1) | 0)) | 0);

            for (var width = 0; width < hop_width; width = ((width + 1) | 0)) {
              this._game.generatorPosition.X = ((((+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize))) | 0) + width) | 0);
              if ((this._game.generatorPosition.X | 0) >= (this._game.distanceToTravel | 0)) {
                return;
              }
              this.AddPickupTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, this.trackType);
            }
          }
        }
      }

      for (var a$3 = balance_tracks._items, i$3 = 0, l$3 = (balance_tracks._size | 0); i$3 < l$3; ($temp03 = i$3, 
          i$3 = ((i$3 + 1) | 0), 
          $temp03)) {
        var balance_track = a$3[i$3];
        balance_track.position.Y = +balance_track.startY;
      }
      var expr_93B_cp_0_cp_0 = this._game;
      expr_93B_cp_0_cp_0.generatorPosition.X = (((expr_93B_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
    }
  }; 

  function MushroomBalanceTrackGenerator_Initialize () {
    $T01().prototype.Initialize.call(this);
  }; 

  function MushroomBalanceTrackGenerator_SetHopSize (min, max) {
    this.minHopSize = (min | 0);
    this.maxHopSize = (max | 0);
    return this;
  }; 

  function MushroomBalanceTrackGenerator_SetLeadupRunway (leadup_runway) {
    this.leadupRunway = (leadup_runway | 0);
    return this;
  }; 

  function MushroomBalanceTrackGenerator_SetReleaseJumpChance (chance) {
    this.releaseJumpChance = +chance;
    return this;
  }; 

  function MushroomBalanceTrackGenerator_SetStaggerValueRange (min, max) {
    this.staggerPattern = $S00().Construct();

    for (var i = (min | 0); i <= (max | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(i);
    }
    return this;
  }; 

  function MushroomBalanceTrackGenerator_SetStaggerValues (args) {
    this.staggerPattern = $S00().Construct();

    for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(args[i]);
    }
    return this;
  }; 

  function MushroomBalanceTrackGenerator_SetTrackType (track_type) {
    this.trackType = track_type;
    return this;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
      Name: "StardewValley.Minigames.MineCart+MushroomBalanceTrackGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      MushroomBalanceTrackGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      MushroomBalanceTrackGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      MushroomBalanceTrackGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "SetHopSize", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      MushroomBalanceTrackGenerator_SetHopSize
    );

    $.Method({Static:false, Public:true }, "SetLeadupRunway", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      MushroomBalanceTrackGenerator_SetLeadupRunway
    );

    $.Method({Static:false, Public:true }, "SetReleaseJumpChance", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      MushroomBalanceTrackGenerator_SetReleaseJumpChance
    );

    $.Method({Static:false, Public:true }, "SetStaggerValueRange", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      MushroomBalanceTrackGenerator_SetStaggerValueRange
    );

    $.Method({Static:false, Public:true }, "SetStaggerValues", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      MushroomBalanceTrackGenerator_SetStaggerValues
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "SetTrackType", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType")]), 
      MushroomBalanceTrackGenerator_SetTrackType
    );

    $.Field({Static:false, Public:false}, "minHopSize", $.Int32);

    $.Field({Static:false, Public:false}, "maxHopSize", $.Int32);

    $.Field({Static:false, Public:true }, "leadupRunway", $.Int32);

    $.Field({Static:false, Public:false}, "releaseJumpChance", $.Single);

    $.Field({Static:false, Public:false}, "staggerPattern", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "trackType", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MushroomBunnyHopGenerator */ 

(function MushroomBunnyHopGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MushroomSpring)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function MushroomBunnyHopGenerator__ctor (game) {
    this.minHops = 1;
    this.maxHops = 5;
    this.minHopSize = 1;
    this.maxHopSize = 1;
    $T01().prototype._ctor.call(this, game);
    this.minHopSize = 1;
    this.maxHopSize = 1;
    this.staggerPattern = $S00().Construct();
  }; 

  function MushroomBunnyHopGenerator__GenerateTrack () {
    if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {

      for (var i = 0; i < (this.leadupRunway | 0); i = ((i + 1) | 0)) {
        (this._game).AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T04().Straight);
        var expr_6D_cp_0_cp_0 = this._game;
        expr_6D_cp_0_cp_0.generatorPosition.X = (((expr_6D_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
      this._game.trackBuilderCharacter.enabled = true;
      var spring = null;

      for (var j = 0; j < (this.numberOfHops | 0); j = ((j + 1) | 0)) {
        this._game.trackBuilderCharacter.position.X = ((+(this._game.generatorPosition.X) - 1) + 0.5) * +(this._game.tileSize);
        this._game.trackBuilderCharacter.position.Y = +((this._game.generatorPosition.Y | 0) * (this._game.tileSize | 0));
        (this._game.trackBuilderCharacter).ForceGrounded();
        (this._game.trackBuilderCharacter).Jump();
        if (spring !== null) {
          spring.BouncePlayer(this._game.trackBuilderCharacter);
        }
        (this._game.trackBuilderCharacter).Update(0.03);
        var target_y2 = (this._game.generatorPosition.Y | 0);
        var flag2 = (this.staggerPattern !== null) && 
        (((this.staggerPattern).get_Count() | 0) > 0);
        if (flag2) {
          target_y2 = ((target_y2 + ($T09().GetRandom$b1($T03())(this.staggerPattern, null) | 0)) | 0);
        }
        target_y2 = ((this._game).KeepTileInBounds(target_y2) | 0);

      $loop2: 
        for (var has_landed = false; !has_landed; ) {
          var flag3 = !((+this._game.trackBuilderCharacter.position.Y >= +(target_y2 * (this._game.tileSize | 0))) || 
            ((Math.abs(((Math.round(+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize)))) - +(this._game.generatorPosition.X)))) <= 1) || 
            !(this._game.trackBuilderCharacter).IsJumping()) && 
          (+$T0D().random.NextDouble() < this.releaseJumpChance);
          if (flag3) {
            (this._game.trackBuilderCharacter).ReleaseJump();
          }
          var old_position = this._game.trackBuilderCharacter.position.MemberwiseClone();
          var y = +this._game.trackBuilderCharacter.velocity.Y;
          (this._game.trackBuilderCharacter).Update(0.03);
          var flag4 = (y < 0) && 
          (+this._game.trackBuilderCharacter.velocity.Y >= 0);
          if (flag4) {
            (this._game).CreatePickup($T0E().op_Addition(this._game.trackBuilderCharacter.position.MemberwiseClone(), $S01().Construct(0, 8)).MemberwiseClone(), false);
          }
          var flag5 = (+old_position.Y < +(target_y2 * (this._game.tileSize | 0))) && 
          (+this._game.trackBuilderCharacter.position.Y >= +(target_y2 * (this._game.tileSize | 0)));
          if (flag5) {
            has_landed = true;
          }
          if ((this._game.trackBuilderCharacter).IsGrounded() || (+((+this._game.trackBuilderCharacter.position.Y / +(this._game.tileSize))) > +(this._game.bottomTile))) {
            this._game.trackBuilderCharacter.position = old_position.MemberwiseClone();
            var flag7 = !(this._game).IsTileInBounds(target_y2);
            if (flag7) {
              return;
            }
            target_y2 = ((this._game).KeepTileInBounds(((+(+old_position.Y / +(this._game.tileSize))) | 0)) | 0);
            break $loop2;
          }
        }
        this._game.generatorPosition.Y = target_y2;
        var hop_width = ($T0D().random.Next(this.minHopSize, (((this.maxHopSize | 0) + 1) | 0)) | 0);
        var track_type = this.trackType;
        var flag8 = j >= (((this.numberOfHops | 0) - 1) | 0);
        if (flag8) {
          track_type = $T04().Straight;
        }
        spring = null;

        for (var width = 0; width < hop_width; width = ((width + 1) | 0)) {
          this._game.generatorPosition.X = ((((+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize))) | 0) + width) | 0);
          if ((this._game.generatorPosition.X | 0) >= (this._game.distanceToTravel | 0)) {
            return;
          }
          var flag10 = track_type === $T04().MushroomMiddle;
          if (flag10) {
            this.AddTrack((((this._game.generatorPosition.X | 0) - 1) | 0), this._game.generatorPosition.Y, $T04().MushroomLeft);
            this.AddTrack((((this._game.generatorPosition.X | 0) + 1) | 0), this._game.generatorPosition.Y, $T04().MushroomRight);
          }
          var track = this.AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, track_type);
          var flag11 = !((width !== ((hop_width - 1) | 0)) || 
            (j >= (((this.numberOfHops | 0) - 1) | 0))) && 
          ((this._game.generatorPosition.Y | 0) > 4);
          if (flag11) {
            spring = (this._game).AddEntity$b1($T05())(new ($T05())());
            spring.InitializeObstacle(track);
            spring.position.X = +track.position.X + +(((this._game.tileSize | 0) / 2 | 0));
            spring.position.Y = +(track.GetYAtPoint(spring.position.X));
          }
        }
      }
      var expr_622_cp_0_cp_0 = this._game;
      expr_622_cp_0_cp_0.generatorPosition.X = (((expr_622_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
    }
  }; 

  function MushroomBunnyHopGenerator_Initialize () {
    this.numberOfHops = ($T0D().random.Next(this.minHops, (((this.maxHops | 0) + 1) | 0)) | 0);
    $T01().prototype.Initialize.call(this);
  }; 

  function MushroomBunnyHopGenerator_SetHopSize (min, max) {
    this.minHopSize = (min | 0);
    this.maxHopSize = (max | 0);
    return this;
  }; 

  function MushroomBunnyHopGenerator_SetLeadupRunway (leadup_runway) {
    this.leadupRunway = (leadup_runway | 0);
    return this;
  }; 

  function MushroomBunnyHopGenerator_SetNumberOfHops (min, max) {
    this.minHops = (min | 0);
    this.maxHops = (max | 0);
    return this;
  }; 

  function MushroomBunnyHopGenerator_SetReleaseJumpChance (chance) {
    this.releaseJumpChance = +chance;
    return this;
  }; 

  function MushroomBunnyHopGenerator_SetStaggerValueRange (min, max) {
    this.staggerPattern = $S00().Construct();

    for (var i = (min | 0); i <= (max | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(i);
    }
    return this;
  }; 

  function MushroomBunnyHopGenerator_SetStaggerValues (args) {
    this.staggerPattern = $S00().Construct();

    for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(args[i]);
    }
    return this;
  }; 

  function MushroomBunnyHopGenerator_SetTrackType (track_type) {
    this.trackType = track_type;
    return this;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
      Name: "StardewValley.Minigames.MineCart+MushroomBunnyHopGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      MushroomBunnyHopGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      MushroomBunnyHopGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      MushroomBunnyHopGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "SetHopSize", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      MushroomBunnyHopGenerator_SetHopSize
    );

    $.Method({Static:false, Public:true }, "SetLeadupRunway", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      MushroomBunnyHopGenerator_SetLeadupRunway
    );

    $.Method({Static:false, Public:true }, "SetNumberOfHops", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      MushroomBunnyHopGenerator_SetNumberOfHops
    );

    $.Method({Static:false, Public:true }, "SetReleaseJumpChance", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      MushroomBunnyHopGenerator_SetReleaseJumpChance
    );

    $.Method({Static:false, Public:true }, "SetStaggerValueRange", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      MushroomBunnyHopGenerator_SetStaggerValueRange
    );

    $.Method({Static:false, Public:true }, "SetStaggerValues", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      MushroomBunnyHopGenerator_SetStaggerValues
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "SetTrackType", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType")]), 
      MushroomBunnyHopGenerator_SetTrackType
    );

    $.Field({Static:false, Public:false}, "numberOfHops", $.Int32);

    $.Field({Static:false, Public:false}, "minHops", $.Int32);

    $.Field({Static:false, Public:false}, "maxHops", $.Int32);

    $.Field({Static:false, Public:false}, "minHopSize", $.Int32);

    $.Field({Static:false, Public:false}, "maxHopSize", $.Int32);

    $.Field({Static:false, Public:true }, "leadupRunway", $.Int32);

    $.Field({Static:false, Public:false}, "releaseJumpChance", $.Single);

    $.Field({Static:false, Public:false}, "staggerPattern", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "trackType", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+BunnyHopGenerator */ 

(function BunnyHopGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseTrackGenerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function BunnyHopGenerator__ctor (game) {
    this.minHops = 1;
    this.maxHops = 5;
    this.minHopSize = 1;
    this.maxHopSize = 1;
    $T01().prototype._ctor.call(this, game);
    this.minHopSize = 1;
    this.maxHopSize = 1;
    this.staggerPattern = $S00().Construct();
  }; 

  function BunnyHopGenerator__GenerateTrack () {
    if ((this._game.generatorPosition.X | 0) < (this._game.distanceToTravel | 0)) {

      for (var i = 0; i < (this.leadupRunway | 0); i = ((i + 1) | 0)) {
        (this._game).AddTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, $T04().Straight);
        var expr_6D_cp_0_cp_0 = this._game;
        expr_6D_cp_0_cp_0.generatorPosition.X = (((expr_6D_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
      }
      this._game.trackBuilderCharacter.enabled = true;

      for (var j = 0; j < (this.numberOfHops | 0); j = ((j + 1) | 0)) {
        this._game.trackBuilderCharacter.position.X = ((+(this._game.generatorPosition.X) - 1) + 0.5) * +(this._game.tileSize);
        this._game.trackBuilderCharacter.position.Y = +((this._game.generatorPosition.Y | 0) * (this._game.tileSize | 0));
        (this._game.trackBuilderCharacter).ForceGrounded();
        (this._game.trackBuilderCharacter).Jump();
        (this._game.trackBuilderCharacter).Update(0.03);
        var target_y2 = (this._game.generatorPosition.Y | 0);
        var flag2 = (this.staggerPattern !== null) && 
        (((this.staggerPattern).get_Count() | 0) > 0);
        if (flag2) {
          target_y2 = ((target_y2 + ($T08().GetRandom$b1($T03())(this.staggerPattern, null) | 0)) | 0);
        }
        target_y2 = ((this._game).KeepTileInBounds(target_y2) | 0);

      $loop2: 
        for (var has_landed = false; !has_landed; ) {
          var flag3 = !((+this._game.trackBuilderCharacter.position.Y >= +(target_y2 * (this._game.tileSize | 0))) || 
            ((Math.abs(((Math.round(+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize)))) - +(this._game.generatorPosition.X)))) <= 1) || 
            !(this._game.trackBuilderCharacter).IsJumping()) && 
          (+$T0C().random.NextDouble() < this.releaseJumpChance);
          if (flag3) {
            (this._game.trackBuilderCharacter).ReleaseJump();
          }
          var old_position = this._game.trackBuilderCharacter.position.MemberwiseClone();
          var y = +this._game.trackBuilderCharacter.velocity.Y;
          (this._game.trackBuilderCharacter).Update(0.03);
          var flag4 = (y < 0) && 
          (+this._game.trackBuilderCharacter.velocity.Y >= 0);
          if (flag4) {
            (this._game).CreatePickup($T0D().op_Addition(this._game.trackBuilderCharacter.position.MemberwiseClone(), $S01().Construct(0, 8)).MemberwiseClone(), false);
          }
          var flag5 = (+old_position.Y < +(target_y2 * (this._game.tileSize | 0))) && 
          (+this._game.trackBuilderCharacter.position.Y >= +(target_y2 * (this._game.tileSize | 0)));
          if (flag5) {
            has_landed = true;
          }
          if ((this._game.trackBuilderCharacter).IsGrounded() || (+((+this._game.trackBuilderCharacter.position.Y / +(this._game.tileSize))) > +(this._game.bottomTile))) {
            this._game.trackBuilderCharacter.position = old_position.MemberwiseClone();
            var flag7 = !(this._game).IsTileInBounds(target_y2);
            if (flag7) {
              return;
            }
            target_y2 = ((this._game).KeepTileInBounds(((+(+old_position.Y / +(this._game.tileSize))) | 0)) | 0);
            break $loop2;
          }
        }
        this._game.generatorPosition.Y = target_y2;
        var hop_width = ($T0C().random.Next(this.minHopSize, (((this.maxHopSize | 0) + 1) | 0)) | 0);
        var track_type = this.trackType;
        var flag8 = j >= (((this.numberOfHops | 0) - 1) | 0);
        if (flag8) {
          track_type = $T04().Straight;
        }

        for (var width = 0; width < hop_width; width = ((width + 1) | 0)) {
          this._game.generatorPosition.X = ((((+(+this._game.trackBuilderCharacter.position.X / +(this._game.tileSize))) | 0) + width) | 0);
          if ((this._game.generatorPosition.X | 0) >= (this._game.distanceToTravel | 0)) {
            return;
          }
          var flag10 = track_type === $T04().MushroomMiddle;
          if (flag10) {
            this.AddTrack((((this._game.generatorPosition.X | 0) - 1) | 0), this._game.generatorPosition.Y, $T04().MushroomLeft);
            this.AddTrack((((this._game.generatorPosition.X | 0) + 1) | 0), this._game.generatorPosition.Y, $T04().MushroomRight);
          }
          this.AddPickupTrack(this._game.generatorPosition.X, this._game.generatorPosition.Y, track_type);
        }
      }
      var expr_571_cp_0_cp_0 = this._game;
      expr_571_cp_0_cp_0.generatorPosition.X = (((expr_571_cp_0_cp_0.generatorPosition.X | 0) + 1) | 0);
    }
  }; 

  function BunnyHopGenerator_Initialize () {
    this.numberOfHops = ($T0C().random.Next(this.minHops, (((this.maxHops | 0) + 1) | 0)) | 0);
    $T01().prototype.Initialize.call(this);
  }; 

  function BunnyHopGenerator_SetHopSize (min, max) {
    this.minHopSize = (min | 0);
    this.maxHopSize = (max | 0);
    return this;
  }; 

  function BunnyHopGenerator_SetLeadupRunway (leadup_runway) {
    this.leadupRunway = (leadup_runway | 0);
    return this;
  }; 

  function BunnyHopGenerator_SetNumberOfHops (min, max) {
    this.minHops = (min | 0);
    this.maxHops = (max | 0);
    return this;
  }; 

  function BunnyHopGenerator_SetReleaseJumpChance (chance) {
    this.releaseJumpChance = +chance;
    return this;
  }; 

  function BunnyHopGenerator_SetStaggerValueRange (min, max) {
    this.staggerPattern = $S00().Construct();

    for (var i = (min | 0); i <= (max | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(i);
    }
    return this;
  }; 

  function BunnyHopGenerator_SetStaggerValues (args) {
    this.staggerPattern = $S00().Construct();

    for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
      (this.staggerPattern).Add(args[i]);
    }
    return this;
  }; 

  function BunnyHopGenerator_SetTrackType (track_type) {
    this.trackType = track_type;
    return this;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseTrackGenerator"), 
      Name: "StardewValley.Minigames.MineCart+BunnyHopGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart")), 
      BunnyHopGenerator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_GenerateTrack", 
      JSIL.MethodSignature.Void, 
      BunnyHopGenerator__GenerateTrack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      BunnyHopGenerator_Initialize
    );

    $.Method({Static:false, Public:true }, "SetHopSize", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      BunnyHopGenerator_SetHopSize
    );

    $.Method({Static:false, Public:true }, "SetLeadupRunway", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      BunnyHopGenerator_SetLeadupRunway
    );

    $.Method({Static:false, Public:true }, "SetNumberOfHops", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      BunnyHopGenerator_SetNumberOfHops
    );

    $.Method({Static:false, Public:true }, "SetReleaseJumpChance", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      BunnyHopGenerator_SetReleaseJumpChance
    );

    $.Method({Static:false, Public:true }, "SetStaggerValueRange", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32]), 
      BunnyHopGenerator_SetStaggerValueRange
    );

    $.Method({Static:false, Public:true }, "SetStaggerValues", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      BunnyHopGenerator_SetStaggerValues
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "SetTrackType", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType")]), 
      BunnyHopGenerator_SetTrackType
    );

    $.Field({Static:false, Public:false}, "numberOfHops", $.Int32);

    $.Field({Static:false, Public:false}, "minHops", $.Int32);

    $.Field({Static:false, Public:false}, "maxHops", $.Int32);

    $.Field({Static:false, Public:false}, "minHopSize", $.Int32);

    $.Field({Static:false, Public:false}, "maxHopSize", $.Int32);

    $.Field({Static:false, Public:true }, "leadupRunway", $.Int32);

    $.Field({Static:false, Public:false}, "releaseJumpChance", $.Single);

    $.Field({Static:false, Public:false}, "staggerPattern", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "trackType", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Spark */ 

(function Spark$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };


  function Spark__ctor (x, y, dx, dy) {
    this.x = +x;
    this.y = +y;
    this.dx = +dx;
    this.dy = +dy;
    this.c = $T01().get_Yellow().MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+Spark", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Spark__ctor
    );

    $.Field({Static:false, Public:true }, "x", $.Single);

    $.Field({Static:false, Public:true }, "y", $.Single);

    $.Field({Static:false, Public:true }, "c", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:true }, "dx", $.Single);

    $.Field({Static:false, Public:true }, "dy", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+BaseCharacter */ 

(function BaseCharacter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };


  function BaseCharacter__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+BaseCharacter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BaseCharacter__ctor
    );

    $.Field({Static:false, Public:true }, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface StardewValley.Minigames.MineCart+ICollideable */ 

JSIL.MakeInterface(
  "StardewValley.Minigames.MineCart+ICollideable", false, [], function ($) {
    $.Method({}, "GetLocalBounds", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")));
    $.Method({}, "GetBounds", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")));
  }, []);

/* class StardewValley.Minigames.MineCart+ObstacleSpawner */ 

(function ObstacleSpawner$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };


  function ObstacleSpawner__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+ObstacleSpawner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ObstacleSpawner__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Bubble */ 

(function Bubble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm06.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };


  function Bubble__ctor (angle, speed) {
    this.moveSpeed = 8;
    this._timePerFrame = 0.5;
    this._frames = JSIL.Array.New($T01(), [0, 1, 2, 3, 3, 2]);
    this._repeatedFrameCount = 4;
    this._lifeTime = 3;
    this.bubbleOffset = $T02().get_Zero().MemberwiseClone();
    $T03().prototype._ctor.call(this);
    this._normalizedVelocity.X = Math.fround(Math.cos(+((+angle * 3.14159274) / 180)));
    this._normalizedVelocity.Y = 0 - Math.fround(Math.sin(+((+angle * 3.14159274) / 180)));
    this.moveSpeed = +speed;
    this._age = 0;
  }; 

  function Bubble__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T02().op_Addition(this.get_drawnPosition().MemberwiseClone(), this.bubbleOffset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
      new ($T09())(Math.imul(this._frames[this._currentFrame], 16), 256, 16, 16), 
      $T0A().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T0B().None, 
      0.27
    );
  }; 

  function Bubble__Update (time) {
    this.position = $T02().op_Addition(this.position.MemberwiseClone(), $S03().CallStatic($T02(), "op_Multiply", null, $S04().CallStatic($T02(), "op_Multiply", null, this.moveSpeed, this._normalizedVelocity.MemberwiseClone()).MemberwiseClone(), time).MemberwiseClone()).MemberwiseClone();
    this._age = +this._age + +time;
    this._currentFrame = ((+(+this._age / +this._timePerFrame)) | 0);
    var flag = (this._currentFrame | 0) >= (this._frames.length | 0);
    if (flag) {
      this._currentFrame = (((this._currentFrame | 0) - (this._frames.length | 0)) | 0);
      this._currentFrame = (((this._currentFrame | 0) % (this._repeatedFrameCount | 0)) | 0);
      this._currentFrame = (((this._currentFrame | 0) + (((this._frames.length | 0) - (this._repeatedFrameCount | 0)) | 0)) | 0);
    }
    this.bubbleOffset.X = Math.fround(Math.cos(+this._age * 10)) * 4;
    this.bubbleOffset.Y = Math.fround(Math.sin(+this._age * 10)) * 4;
    if (+this._age >= +this._lifeTime) {
      this.Pop(false);
    }
    $T08().prototype._Update.call(this, time);
  }; 

  function Bubble_GetBounds () {
    var bounds = $T03().prototype.GetBounds.call(this).MemberwiseClone();
    bounds.X = (((bounds.X | 0) + ((this.bubbleOffset.X) | 0)) | 0);
    bounds.Y = (((bounds.Y | 0) + ((this.bubbleOffset.Y) | 0)) | 0);
    return $T03().prototype.GetBounds.call(this);
  }; 

  function Bubble_OnBounce (player) {
    var flag = !$T0F().$Is(player);
    if (flag) {
      var result = false;
    } else {
      player.Bounce(0);
      this.Pop(true);
      result = true;
    }
    return result;
  }; 

  function Bubble_OnBump (player) {
    this.Pop(true);
    return $T03().prototype.OnBump.call(this, player);
  }; 

  function Bubble_OnPlayerReset () {
    this.Destroy();
  }; 

  function Bubble_Pop (play_sound) {
    if (play_sound) {
      $T10().playSound("dropItemInWater");
    }
    this.Destroy();
    (this._game).AddEntity$b1($T11())(new ($T11())(new ($T09())(32, 240, 16, 16), $S02().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Center().Y)), 0, 0, 0, 0, 0.4, 1, 2, 0.2, 0.45, false, 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+Bubble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      Bubble__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Bubble__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      Bubble__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Bubble_GetBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBounce", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]), 
      Bubble_OnBounce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      Bubble_OnBump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      Bubble_OnPlayerReset
    );

    $.Method({Static:false, Public:true }, "Pop", 
      JSIL.MethodSignature.Action($.Boolean), 
      Bubble_Pop
    );

    $.Field({Static:false, Public:true }, "_normalizedVelocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "moveSpeed", $.Single);

    $.Field({Static:false, Public:false}, "_age", $.Single);

    $.Field({Static:false, Public:false}, "_currentFrame", $.Int32);

    $.Field({Static:false, Public:false}, "_timePerFrame", $.Single);

    $.Field({Static:false, Public:false}, "_frames", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_repeatedFrameCount", $.Int32);

    $.Field({Static:false, Public:false}, "_lifeTime", $.Single);

    $.Field({Static:false, Public:true }, "bubbleOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+PlayerBubbleSpawner */ 

(function PlayerBubbleSpawner$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm06.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single]))) ();
  };


  function PlayerBubbleSpawner__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function PlayerBubbleSpawner__Update (time) {
    this.position = this._game.player.position.MemberwiseClone();
    this.timer = +this.timer - +time;
    if ((+this._game.player.velocity.Y > 0) && ((this.bubbleCount | 0) === 0)) {
      this.bubbleCount = 1;
      this.timer = +$T02().Lerp(0.05, 0.25, Math.fround($T04().random.NextDouble()));
    }
    if ((+this.timer <= 0) && ((this.bubbleCount | 0) <= 0)) {
      this.bubbleCount = ($T04().random.Next(1, 4) | 0);
      this.timer = +$T02().Lerp(0.15, 0.25, Math.fround($T04().random.NextDouble()));
    } else {
      if (+this.timer <= 0) {
        this.bubbleCount = (((this.bubbleCount | 0) - 1) | 0);
        (this._game).AddEntity$b1($T05())(new ($T05())(new ($T07())(0, 256, 16, 16), $T08().op_Addition(this.position.MemberwiseClone(), $S00().CallStatic($T08(), "op_Division", null, $S01().Construct(((0 - +this._game.player.characterExtraHeight) - 16)), 2).MemberwiseClone()).MemberwiseClone(), -10, 10, 0, -1, 1.5, 0.5, 4, 0.1, 0.45, true, 0));
        if ((this.bubbleCount | 0) === 0) {
          this.timer = +$T02().Lerp(1, 1.5, Math.fround($T04().random.NextDouble()));
        } else {
          this.timer = +$T02().Lerp(0.15, 0.25, Math.fround($T04().random.NextDouble()));
        }
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+PlayerBubbleSpawner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlayerBubbleSpawner__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      PlayerBubbleSpawner__Update
    );

    $.Field({Static:false, Public:true }, "bubbleCount", $.Int32);

    $.Field({Static:false, Public:true }, "timer", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Whale */ 

(function Whale$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Whale_CurrentState)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GameStates)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Bubble)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Whale__ctor () {
    this.mouthCloseTime = 1;
    $T00().prototype._ctor.call(this);
  }; 

  function Whale__Draw (b) {
    var source_rect_offset = new ($T02())();
    var draw_offset = new ($T02())();
    if ((this._currentFrame | 0) > 0) {
      source_rect_offset.X = ((Math.imul(85, (((this._currentFrame | 0) - 1) | 0)) + 1) | 0);
      source_rect_offset.Y = 112;
      draw_offset.X = 3;
      draw_offset.Y = -3;
    }
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T04().op_Addition(this.get_drawnPosition().MemberwiseClone(), $S02().Construct(85, 0)).MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(86, 288, 75, 112), 
      $T06().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(0, 112), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.29
    );
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T04().op_Addition(
          this.get_drawnPosition().MemberwiseClone(), 
          $T08().PointToVector2(draw_offset.MemberwiseClone()).MemberwiseClone()
        ).MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(source_rect_offset.X, ((288 + (source_rect_offset.Y | 0)) | 0), 85, 112), 
      $T06().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(0, 112), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.28
    );
  }; 

  function Whale__Initialize () {
    this._currentState = $T09().Idle;
    this._stateTimer = +$T08().Lerp(1, 2, Math.fround($T0B().random.NextDouble()));
    this._basePosition.Y = +((((this._game.screenHeight | 0) / 2) | 0) + 56);
    $T00().prototype._Initialize.call(this);
  }; 

  function Whale__Update (time) {
    $T00().prototype._Update.call(this, time);
    this._basePosition.Y = +$T08().MoveTowards(this._basePosition.Y, +this._game.player.position.Y + 32, 48 * +time);
    this.position.X = ((+this._game.screenLeftBound - 128) + +(this._game.screenWidth)) + (Math.fround(Math.cos(+(((+(this._game).get_totalTime() * 3.1415926535897931) / 2.2999999523162842)))) * 24);
    this.position.Y = +this._basePosition.Y + (Math.fround(Math.sin(+(((+(this._game).get_totalTime() * 3.1415926535897931) / 3)))) * 32);
    if (+this.position.Y > +(this._game.screenHeight)) {
      this.position.Y = +(this._game.screenHeight);
    }
    if (+this.position.Y < 120) {
      this.position.Y = 120;
    }
    this._stateTimer = +this._stateTimer - +time;
    if (this._currentState === $T09().Idle) {
      this._currentFrame = 0;
      if ((+this._stateTimer < 0) && (this._game.gameState !== $T0F().Cutscene)) {
        this._currentState = $T09().OpenMouth;
        this._stateTimer = +this.mouthCloseTime;
        $T0B().playSound("croak");
      }
    } else {
      if (this._currentState === $T09().OpenMouth) {
        this._currentFrame = (($T08().Lerp(3, 0, +((+this._stateTimer / +this.mouthCloseTime)))) | 0);
        if (+this._stateTimer < 0) {
          this._currentState = $T09().FireBubbles;
          this._stateTimer = 4;
        }
        this._nextFire = 0;
      } else {
        if (this._currentState === $T09().FireBubbles) {
          this._currentFrame = 3;
          this._nextFire = +this._nextFire - +time;
          if (+this._nextFire <= 0) {
            $T0B().playSound("dwop");
            this._nextFire = 0.3;
            var shoot_speed = 32;
            var shoot_spread = 45;
            if (+(this._game.generatorPosition.X) >= +((+(this._game.distanceToTravel) / 2))) {
              shoot_speed = +$T08().Lerp(32, 64, Math.fround($T0B().random.NextDouble()));
              shoot_spread = 60;
            }
            (this._game).AddEntity$b1($T10())(new ($T10())((180 + +$T08().Lerp(0 - shoot_spread, shoot_spread, Math.fround($T0B().random.NextDouble()))), shoot_speed)).position = $T04().op_Addition(this.position.MemberwiseClone(), $S02().Construct(48, -40)).MemberwiseClone();
            (this._game).AddEntity$b1($T11())(new ($T11())(new ($T05())(0, 256, 16, 16), $T04().op_Addition(this.position.MemberwiseClone(), $S02().Construct(96, -100)).MemberwiseClone(), -10, 10, 0, -1, 1, 0.5, 4, 0.25, 0.45, false, 0));
          }
          if (+this._stateTimer < 0) {
            this._currentState = $T09().CloseMouth;
            this._stateTimer = +this.mouthCloseTime;
          }
        } else {
          if (this._currentState === $T09().CloseMouth) {
            this._currentFrame = (($T08().Lerp(0, 3, +((+this._stateTimer / +this.mouthCloseTime)))) | 0);
            if (+this._stateTimer < 0) {
              this._currentState = $T09().Idle;
              this._stateTimer = 2;
            }
          }
        }
      }
    }
  }; 

  function Whale_OnPlayerReset () {
    this._currentState = $T09().Idle;
    this._stateTimer = 2;
  }; 

  function Whale_SetState (new_state, state_timer) {
    this._currentState = new_state;
    this._stateTimer = +state_timer;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+Whale", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Whale__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Whale__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Initialize", 
      JSIL.MethodSignature.Void, 
      Whale__Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      Whale__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      Whale_OnPlayerReset
    );

    $.Method({Static:false, Public:true }, "SetState", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Whale+CurrentState"), $.Single]), 
      Whale_SetState
    );

    $.Field({Static:false, Public:false}, "_currentState", $asm00.TypeRef("StardewValley.Minigames.MineCart+Whale+CurrentState"));

    $.Field({Static:false, Public:false}, "_stateTimer", $.Single);

    $.Field({Static:false, Public:true }, "mouthCloseTime", $.Single);

    $.Field({Static:false, Public:false}, "_nextFire", $.Single);

    $.Field({Static:false, Public:false}, "_currentFrame", $.Int32);

    $.Field({Static:false, Public:false}, "_basePosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum StardewValley.Minigames.MineCart+Whale+CurrentState */ 

JSIL.MakeEnum(
  {
    FullName: "StardewValley.Minigames.MineCart+Whale+CurrentState", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Idle: 0, 
    OpenMouth: 1, 
    FireBubbles: 2, 
    CloseMouth: 3, 
  }
);

/* class StardewValley.Minigames.MineCart+EndingJunimo */ 

(function EndingJunimo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm06.System.Int32, $asm06.System.Int32, 
        $asm06.System.Int32
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };


  function EndingJunimo__ctor (special) {
    $T01().prototype._ctor.call(this);
    this._special = special;
  }; 

  function EndingJunimo__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      $T03().mouseCursors, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(((294 + Math.imul(((((+(this._game).get_totalTimeMS() % 400) | 0) / 100) | 0), 16)) | 0), 1432, 16, 16), 
      this._color.MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      +(((+(this._game).GetPixelScale() * 2) / 3)), 
      $T07().None, 
      0.25
    );
  }; 

  function EndingJunimo__Initialize () {
    var flag = this._special || 
    (+$T03().random.NextDouble() < 0.01);
    if (flag) {
      switch ($T03().random.Next(8)) {
        case 0: 
          this._color = $T09().get_Red().MemberwiseClone();
          break;

        case 1: 
          this._color = $T09().get_Goldenrod().MemberwiseClone();
          break;

        case 2: 
          this._color = $T09().get_Yellow().MemberwiseClone();
          break;

        case 3: 
          this._color = $T09().get_Lime().MemberwiseClone();
          break;

        case 4: 
          this._color = $S03().Construct(0, 255, 180);
          break;

        case 5: 
          this._color = $S03().Construct(0, 100, 255);
          break;

        case 6: 
          this._color = $T09().get_MediumPurple().MemberwiseClone();
          break;

        case 7: 
          this._color = $T09().get_Salmon().MemberwiseClone();
          break;

      }
      var flag2 = +$T03().random.NextDouble() < 0.01;
      if (flag2) {
        this._color = $T09().get_White().MemberwiseClone();
      }
    } else {
      switch ($T03().random.Next(8)) {
        case 0: 
          this._color = $T09().get_LimeGreen().MemberwiseClone();
          break;

        case 1: 
          this._color = $T09().get_Orange().MemberwiseClone();
          break;

        case 2: 
          this._color = $T09().get_LightGreen().MemberwiseClone();
          break;

        case 3: 
          this._color = $T09().get_Tan().MemberwiseClone();
          break;

        case 4: 
          this._color = $T09().get_GreenYellow().MemberwiseClone();
          break;

        case 5: 
          this._color = $T09().get_LawnGreen().MemberwiseClone();
          break;

        case 6: 
          this._color = $T09().get_PaleGreen().MemberwiseClone();
          break;

        case 7: 
          this._color = $T09().get_Turquoise().MemberwiseClone();
          break;

      }
    }
    this._velocity.X = +$T0A().RandomFloat(-10, -40, null);
    this._velocity.Y = +$T0A().RandomFloat(-20, -60, null);
  }; 

  function EndingJunimo__Update (time) {
    this.position = $T06().op_Addition(this.position.MemberwiseClone(), $S04().CallStatic($T06(), "op_Multiply", null, time, this._velocity.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
    this._velocity.Y = +this._velocity.Y + (210 * +time);
    var floor_y = +(this._game).GetTrackForXPosition(this.position.X).position.Y;
    if (+this.position.Y >= floor_y) {
      var flag2 = +$T03().random.NextDouble() < 0.10000000149011612;
      if (flag2) {
        $T03().playSound("junimoMeep1");
      }
      this.position.Y = floor_y;
      this._velocity.Y = +$T0A().RandomFloat(-50, -90, null);
      if (+this.position.X < +this._game.player.position.X) {
        this._velocity.X = +$T0A().RandomFloat(10, 40, null);
      }
      if (+this.position.X > +this._game.player.position.X) {
        this._velocity.X = +$T0A().RandomFloat(10, 40, null) * -1;
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+EndingJunimo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      EndingJunimo__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      EndingJunimo__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Initialize", 
      JSIL.MethodSignature.Void, 
      EndingJunimo__Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      EndingJunimo__Update
    );

    $.Field({Static:false, Public:false}, "_color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "_velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "_special", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+FallingBoulderSpawner */ 

(function FallingBoulderSpawner$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_FallingBoulder)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };


  function FallingBoulderSpawner__ctor () {
    this.period = 2.33;
    $T00().prototype._ctor.call(this);
  }; 

  function FallingBoulderSpawner__Update (time) {
    $T02().prototype._Update.call(this, time);
    this.currentTime = +this.currentTime + +time;
    if (+this.currentTime >= +this.period) {
      this.currentTime = 0;
      var fallingBoulder = (this._game).AddEntity$b1($T03())(new ($T03())());
      fallingBoulder.position = this.position.MemberwiseClone();
      fallingBoulder.InitializeObstacle(this._track);
    }
  }; 

  function FallingBoulderSpawner_GetBounds () {
    return new ($T05())(0, 0, 0, 0);
  }; 

  function FallingBoulderSpawner_GetLocalBounds () {
    return new ($T05())(0, 0, 0, 0);
  }; 

  function FallingBoulderSpawner_InitializeObstacle (track) {
    this._track = track;
    this.currentTime = Math.fround($T08().random.NextDouble()) * +this.period;
    this.position.Y = -32;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+FallingBoulderSpawner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      FallingBoulderSpawner__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      FallingBoulderSpawner__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      FallingBoulderSpawner_GetBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      FallingBoulderSpawner_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      FallingBoulderSpawner_InitializeObstacle
    );

    $.Field({Static:false, Public:true }, "period", $.Single);

    $.Field({Static:false, Public:true }, "currentTime", $.Single);

    $.Field({Static:false, Public:false}, "_track", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+WillOWisp */ 

(function WillOWisp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm01.Microsoft.Xna.Framework.Vector2, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm06.System.Single]))) ();
  };


  function WillOWisp__ctor () {
    this.scale = 1;
    this.nextDebris = 0.1;
    $T00().prototype._ctor.call(this);
  }; 

  function WillOWisp__Draw (b) {
    var tail_scale = new ($T02())();
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T02().op_Addition(this.get_drawnPosition().MemberwiseClone(), this.offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(192, 80, 16, 16), 
      $T06().get_White().MemberwiseClone(), 
      (+this._age * 200) * 0.0174532924, 
      $S02().Construct(8, 8), 
      +(this._game).GetPixelScale() * +this.scale, 
      $T07().None, 
      0.27
    );
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T02().op_Addition(this.get_drawnPosition().MemberwiseClone(), this.offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(160, 112, 32, 32), 
      $T06().get_White().MemberwiseClone(), 
      (+this._age * 60) * 0.0174532924, 
      $S02().Construct(16, 16), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.29
    );
    if (+this._age > 0.25) {
      (tail_scale = tail_scale.MemberwiseClone(), 
        $T02().prototype._ctor.call(tail_scale, this.tailLength, this.scale));
      if (+this.tailLength > 0.5) {
        $S03().CallVirtual("Draw", null, b, 
          this._game.texture, 
          $S01().CallVirtual("TransformDraw", null, this._game, $T02().op_Addition(this.get_drawnPosition().MemberwiseClone(), this.offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
          new ($T05())(((208 + Math.imul(((((+(+this._age / 0.1)) | 0) % 3) | 0), 16)) | 0), 80, 16, 16), 
          $T06().get_White().MemberwiseClone(), 
          this.tailRotation, 
          $S02().Construct(16, 8), 
          $S04().CallStatic($T02(), "op_Multiply", null, tail_scale.MemberwiseClone(), (this._game).GetPixelScale()).MemberwiseClone(), 
          $T07().None, 
          0.44
        );
      }
    }
  }; 

  function WillOWisp__Update (time) {
    this._age = +this._age + +time;
    var old_offset = this.offset.MemberwiseClone();
    this.offset.Y = Math.fround((Math.sin(+(((+this._age * 15) * 3.14159274) / 180))) - 1) * 32;
    this.offset.X = Math.fround(Math.cos(+((((+this._age * 15) * 3) * 3.14159274) / 180))) * 64;
    this.offset.Y = +this.offset.Y + (Math.fround(Math.sin(+((((+this._age * 15) * 6) * 3.14159274) / 180))) * 16);
    var delta = $T02().op_Subtraction(this.offset.MemberwiseClone(), old_offset.MemberwiseClone()).MemberwiseClone();
    this.tailRotation = Math.fround(Math.atan2(delta.Y, delta.X));
    this.tailLength = +delta.Length();
    this.scale = +$T0B().Lerp(0.5, 0.6, Math.fround(Math.sin(+(((+this._age * 200) * 3.14159274) / 180))) + 0.5);
    this.nextDebris = +this.nextDebris - +time;
    if (+this.nextDebris <= 0) {
      this.nextDebris = 0.1;
      (this._game).AddEntity$b1($T0C())(new ($T0C())(new ($T05())(192, 96, 16, 16), $T02().op_Addition(
            $S02().Construct(+(this.GetBounds().Center.X), +(this.GetBounds().Bottom)), 
            $S02().Construct(+($T0E().random.Next(-4, 5)), +($T0E().random.Next(-4, 5)))
          ).MemberwiseClone(), +($T0E().random.Next(-30, 31)), +($T0E().random.Next(-30, -19)), 0.25, -0.15, 1, 1, 4, 0.25, 0.46, false, 0)).visible = this.visible;
    }
  }; 

  function WillOWisp_GetBounds () {
    var bounds = $T00().prototype.GetBounds.call(this).MemberwiseClone();
    bounds.X = (((bounds.X | 0) + ((this.offset.X) | 0)) | 0);
    bounds.Y = (((bounds.Y | 0) + ((this.offset.Y) | 0)) | 0);
    return bounds;
  }; 

  function WillOWisp_GetLocalBounds () {
    return new ($T05())(-5, -5, 10, 10);
  }; 

  function WillOWisp_OnBump (player) {
    this.Destroy();
    $T0E().playSound("ghost");

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {
      (this._game).AddEntity$b1($T0C())(new ($T0C())(new ($T05())(192, 96, 16, 16), $T02().op_Addition(
            $S02().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Bottom())), 
            $S02().Construct(+($T0E().random.Next(-4, 5)), +($T0E().random.Next(-4, 5)))
          ).MemberwiseClone(), +($T0E().random.Next(-50, 51)), +($T0E().random.Next(-50, 51)), 0.25, -0.15, 1, 1, 4, 0.25, 0.28, false, 0));
    }
    return $T00().prototype.OnBump.call(this, player);
  }; 

  function WillOWisp_ShouldReap () {
    return $T04().prototype.ShouldReap.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+WillOWisp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      WillOWisp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      WillOWisp__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      WillOWisp__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      WillOWisp_GetBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      WillOWisp_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      WillOWisp_OnBump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      WillOWisp_ShouldReap
    );

    $.Field({Static:false, Public:false}, "_age", $.Single);

    $.Field({Static:false, Public:false}, "offset", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "tailUpdateTime", $.Single);

    $.Field({Static:false, Public:true }, "tailRotation", $.Single);

    $.Field({Static:false, Public:true }, "tailLength", $.Single);

    $.Field({Static:false, Public:true }, "scale", $.Single);

    $.Field({Static:false, Public:true }, "nextDebris", $.Single);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+FallingBoulder */ 

(function FallingBoulder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")])]))) ();
  };


  function FallingBoulder__ctor () {
    this._fallSpeed = 96;
    $T00().prototype._ctor.call(this);
  }; 

  function FallingBoulder__Draw (b) {
    var effect = $T02().None;
    if (((Math.floor(+(+this._age / 0.5))) % 2) === 0) {
      effect = $T02().FlipHorizontally;
    }
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T07())(0, 32, 16, 16), 
      this._game.caveTint.MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      effect, 
      0.45
    );
  }; 

  function FallingBoulder__Update (time) {
    this._age = +this._age + +time;
    var flag = (this._tracks !== null) && 
    (((this._tracks).get_Count() | 0) > 0);
    if (flag) {
      var flag2 = (this._tracks).get_Item(0) === null;
      if (flag2) {
        (this._tracks).RemoveAt(0);
      } else {
        var flag3 = +this.position.Y >= +(((this._tracks).get_Item(0)).GetYAtPoint(this.position.X));
        if (flag3) {
          this._currentFallSpeed = -30;
          (this._tracks).RemoveAt(0);
          if (this.IsOnScreen()) {
            $T0D().playSound("hammer");
          }

          for (var i = 0; i < 3; i = ((i + 1) | 0)) {
            ((this._game).AddEntity$b1($T0F())(new ($T0F())(new ($T07())(16, 80, 16, 16), $S02().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Bottom())), +($T0D().random.Next(-30, 31)), +($T0D().random.Next(-30, -19)), 0.25, 1, 0.5, 1, 1, 0.1, 0.45, false, 0))).SetColor(this._game.caveTint.MemberwiseClone());
          }
        }
      }
    }
    if (+this._currentFallSpeed < +this._fallSpeed) {
      this._currentFallSpeed = +this._currentFallSpeed + (210 * +time);
      if (+this._currentFallSpeed > +this._fallSpeed) {
        this._currentFallSpeed = +this._fallSpeed;
      }
    }
    this.position.Y = +this.position.Y + (+time * +this._currentFallSpeed);
  }; 

  function FallingBoulder_InitializeObstacle (track) {
    $T00().prototype.InitializeObstacle.call(this, track);
    var tracks = (this._game).GetTracksForXPosition(this.position.X);
    var flag = tracks !== null;
    if (flag) {
      this._tracks = $S03().Construct(tracks);
    }
  }; 

  function FallingBoulder_OnBounce (player) {
    var flag = !$T12().$Is(player);
    if (flag) {
      var result = false;
    } else {
      this._wasBouncedOn = true;
      player.Bounce(0);
      $T0D().playSound("hammer");

      for (var i = 0; i < 3; i = ((i + 1) | 0)) {
        ((this._game).AddEntity$b1($T0F())(new ($T0F())(new ($T07())(16, 80, 16, 16), $S02().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Top())), +($T0D().random.Next(-30, 31)), +($T0D().random.Next(-30, -19)), 0.25, 1, 0.5, 1, 1, 0.1, 0.45, false, 0))).SetColor(this._game.caveTint.MemberwiseClone());
      }
      result = true;
    }
    return result;
  }; 

  function FallingBoulder_OnBump (player) {
    var wasBouncedOn = this._wasBouncedOn;
    return (wasBouncedOn || $T00().prototype.OnBump.call(this, player));
  }; 

  function FallingBoulder_OnPlayerReset () {
    this.Destroy();
  }; 

  function FallingBoulder_ShouldReap () {
    return ((+this.position.Y > +((this._game.screenHeight | 0) + 32)) || $T06().prototype.ShouldReap.call(this));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+FallingBoulder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      FallingBoulder__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      FallingBoulder__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      FallingBoulder__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      FallingBoulder_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBounce", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]), 
      FallingBoulder_OnBounce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      FallingBoulder_OnBump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      FallingBoulder_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      FallingBoulder_ShouldReap
    );

    $.Field({Static:false, Public:false}, "_age", $.Single);

    $.Field({Static:false, Public:false}, "_tracks", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]));

    $.Field({Static:false, Public:false}, "_currentFallSpeed", $.Single);

    $.Field({Static:false, Public:false}, "_fallSpeed", $.Single);

    $.Field({Static:false, Public:false}, "_wasBouncedOn", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+CosmeticFallingBoulder */ 

(function CosmeticFallingBoulder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_FallingBoulder)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function CosmeticFallingBoulder__ctor (yBreakPosition, color, fallSpeed, delayBeforeAppear) {
    $T02().prototype._ctor.call(this);
    this.yBreakPosition = +yBreakPosition;
    this.color = color.MemberwiseClone();
    this._fallSpeed = +fallSpeed;
    this.delayBeforeAppear = +delayBeforeAppear;
    if (+delayBeforeAppear > 0) {
      this.visible = false;
    }
  }; 

  function CosmeticFallingBoulder__Draw (b) {
    var effect = $T04().None;
    if (((Math.floor(+(+this._age / 0.5))) % 2) === 0) {
      effect = $T04().FlipHorizontally;
    }
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T09())(0, 32, 16, 16), 
      this.color.MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      effect, 
      0.15
    );
  }; 

  function CosmeticFallingBoulder__Update (time) {
    if (+this.delayBeforeAppear > 0) {
      this.delayBeforeAppear = +this.delayBeforeAppear - +time;
      if (+this.delayBeforeAppear > 0) {
        return;
      }
      this.visible = true;
    }
    this._age = +this._age + +time;
    if (+this.position.Y >= +this.yBreakPosition) {
      this._currentFallSpeed = -30;
      if (this.IsOnScreen()) {
        $T0B().playSound("hammer");
      }

      for (var i = 0; i < 3; i = ((i + 1) | 0)) {
        ((this._game).AddEntity$b1($T0D())(new ($T0D())(new ($T09())(16, 80, 16, 16), $S02().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Bottom())), +($T0B().random.Next(-30, 31)), +($T0B().random.Next(-30, -19)), 0.25, 1, 0.5, 1, 1, 0.1, 0.45, false, 0))).SetColor(this._game.caveTint.MemberwiseClone());
      }
      this._destroyed = true;
    }
    if (+this._currentFallSpeed < +this._fallSpeed) {
      this._currentFallSpeed = +this._currentFallSpeed + (210 * +time);
      if (+this._currentFallSpeed > +this._fallSpeed) {
        this._currentFallSpeed = +this._fallSpeed;
      }
    }
    this.position.Y = +this.position.Y + (+time * +this._currentFallSpeed);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+FallingBoulder"), 
      Name: "StardewValley.Minigames.MineCart+CosmeticFallingBoulder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $.Single
        ]), 
      CosmeticFallingBoulder__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      CosmeticFallingBoulder__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      CosmeticFallingBoulder__Update
    );

    $.Field({Static:false, Public:false}, "yBreakPosition", $.Single);

    $.Field({Static:false, Public:false}, "delayBeforeAppear", $.Single);

    $.Field({Static:false, Public:false}, "color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+NoxiousGas */ 

(function NoxiousGas$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Single, [
        $asm06.System.Single, $asm06.System.Single, 
        $asm06.System.Single
      ]))) ();
  };


  function NoxiousGas__ctor () {
    this._riseSpeed = -90;
    $T00().prototype._ctor.call(this);
  }; 

  function NoxiousGas__Draw (b) {
    var effect = $T02().None;
    if (((Math.floor(+(+this._age / 0.5))) % 2) === 0) {
      effect = $T02().FlipHorizontally;
    }
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T07())(368, 784, 16, 16), 
      $T08().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      +(this._game).GetPixelScale() * +$S03().CallStatic($T0A(), "Clamp", null, +((+this._age / 0.5)), 0, 1), 
      effect, 
      0.44
    );
  }; 

  function NoxiousGas__Update (time) {
    this._age = +this._age + +time;
    if (+this._currentRiseSpeed > +this._riseSpeed) {
      this._currentRiseSpeed = +this._currentRiseSpeed - (40 * +time);
      if (+this._currentRiseSpeed < +this._riseSpeed) {
        this._currentRiseSpeed = +this._riseSpeed;
      }
    }
    this.position.Y = +this.position.Y + (+time * +this._currentRiseSpeed);
  }; 

  function NoxiousGas_InitializeObstacle (track) {
    $T00().prototype.InitializeObstacle.call(this, track);
  }; 

  function NoxiousGas_OnBounce (player) {
    return false;
  }; 

  function NoxiousGas_OnBump (player) {
    return $T00().prototype.OnBump.call(this, player);
  }; 

  function NoxiousGas_OnPlayerReset () {
    this.Destroy();
  }; 

  function NoxiousGas_ShouldReap () {
    return ((+this.position.Y < -32) || $T06().prototype.ShouldReap.call(this));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+NoxiousGas", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NoxiousGas__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      NoxiousGas__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      NoxiousGas__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      NoxiousGas_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBounce", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]), 
      NoxiousGas_OnBounce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      NoxiousGas_OnBump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      NoxiousGas_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      NoxiousGas_ShouldReap
    );

    $.Field({Static:false, Public:false}, "_age", $.Single);

    $.Field({Static:false, Public:false}, "_currentRiseSpeed", $.Single);

    $.Field({Static:false, Public:false}, "_riseSpeed", $.Single);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MineCartSlime */ 

(function MineCartSlime$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function MineCartSlime__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MineCartSlime__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T04())(0, 32, 16, 16), 
      this._game.caveTint.MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T06().None, 
      0.45
    );
  }; 

  function MineCartSlime__Update (time) {
  }; 

  function MineCartSlime_GetLocalBounds () {
    return $T00().prototype.GetLocalBounds.call(this);
  }; 

  function MineCartSlime_InitializeObstacle (track) {
    $T00().prototype.InitializeObstacle.call(this, track);
  }; 

  function MineCartSlime_OnPlayerReset () {
  }; 

  function MineCartSlime_ShouldReap () {
    return false;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+MineCartSlime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MineCartSlime__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      MineCartSlime__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      MineCartSlime__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      MineCartSlime_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      MineCartSlime_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      MineCartSlime_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCartSlime_ShouldReap
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+SlimeTrack */ 

(function SlimeTrack$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function SlimeTrack__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function SlimeTrack__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T04())(0, 192, 32, 16), 
      $T05().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.45
    );
  }; 

  function SlimeTrack__Update (time) {
  }; 

  function SlimeTrack_GetLocalBounds () {
    return $T00().prototype.GetLocalBounds.call(this);
  }; 

  function SlimeTrack_InitializeObstacle (track) {
    $T00().prototype.InitializeObstacle.call(this, track);
  }; 

  function SlimeTrack_OnPlayerReset () {
  }; 

  function SlimeTrack_ShouldReap () {
    return false;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+SlimeTrack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SlimeTrack__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      SlimeTrack__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      SlimeTrack__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      SlimeTrack_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      SlimeTrack_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      SlimeTrack_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      SlimeTrack_ShouldReap
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+HugeSlime */ 

(function HugeSlime$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm01.Microsoft.Xna.Framework.Vector2, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };


  function HugeSlime__ctor () {
    this._timeUntilHop = 30;
    this._maxFallSpeed = 300;
    this._lastTrackY = 300;
    this.spriteScale = $S00().Construct(1, 1);
    this._desiredScale = $S00().Construct(1, 1);
    this._scaleSpeed = 4;
    this._jumpStrength = -200;
    $T01().prototype._ctor.call(this);
  }; 

  function HugeSlime__Draw (b) {
    var source_rect = new ($T03())(160, 176, 96, 80);
    if ((this._currentFrame | 0) === 0) {
      (source_rect = source_rect.MemberwiseClone(), 
        $T03().prototype._ctor.call(source_rect, 160, 176, 96, 80));
    } else {
      if ((this._currentFrame | 0) === 1) {
        (source_rect = source_rect.MemberwiseClone(), 
          $T03().prototype._ctor.call(source_rect, 160, 256, 96, 80));
      } else {
        if ((this._currentFrame | 0) === 2) {
          (source_rect = source_rect.MemberwiseClone(), 
            $T03().prototype._ctor.call(source_rect, 160, 336, 96, 64));
        }
      }
    }
    $S01().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S02().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      source_rect.MemberwiseClone(), 
      $T06().get_White().MemberwiseClone(), 
      0, 
      $S00().Construct((+(source_rect.Width) * 0.5), +(source_rect.Height)), 
      $S03().CallStatic($T00(), "op_Multiply", null, (this._game).GetPixelScale(), this.spriteScale.MemberwiseClone()).MemberwiseClone(), 
      $T07().None, 
      0.45
    );
  }; 

  function HugeSlime__Initialize () {
    $T05().prototype._Initialize.call(this);
    this._game.slimeBossPosition = +(this._game.slimeResetPosition);
    this._grounded = false;
  }; 

  function HugeSlime__Update (time) {
    var track = (this._game).GetTrackForXPosition(this.position.X);
    var track_height = +((this._game.screenHeight | 0) + 32);
    if (track !== null) {
      this._lastTrackY = +(track.GetYAtPoint(this.position.X));
      track_height = +this._lastTrackY;
    }
    this._game.slimeBossPosition += +this._game.slimeBossSpeed * +time;
    var grounded = this._grounded;
    if (grounded) {
      this._timeUntilHop = +this._timeUntilHop - +time;
      if (+this._timeUntilHop <= 0) {
        this._grounded = false;
        this.spriteScale = $S00().Construct(1.1, 0.75);
        this._desiredScale = $S00().Construct(1, 1);
        this._scaleSpeed = 1;
        this._yVelocity = +this._jumpStrength;
        $T0B().playSound("dwoop");

        for (var i = 0; i < 8; i = ((i + 1) | 0)) {
          (this._game).AddEntity$b1($T0D())(new ($T0D())(new ($T03())(192, 112, 16, 16), $T00().op_Addition(
                $S00().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Bottom())), 
                $S00().Construct(+($T0B().random.Next(-32, 33)), +($T0B().random.Next(-32, 0)))
              ).MemberwiseClone(), +($T0B().random.Next(-10, 11)), +($T0B().random.Next(-50, -29)), 0.25, 0.25, 1, 1, 4, 0.25, 0.46, false, 0));
        }
      } else {
        if (+this._timeUntilHop <= 0.25) {
          if (!this._hasPeparedToJump) {
            this.spriteScale = $S00().Construct(0.9, 1.1);
            this._desiredScale = $S00().Construct(1, 1);
            this._scaleSpeed = 1;
            this._currentFrame = 2;
            this._hasPeparedToJump = true;
          }
        } else {
          this._desiredScale = $S00().Construct(1, 1);
          this._scaleSpeed = 4;
        }
      }
    } else {
      this._currentFrame = 1;
      if (+this.position.X > +this._game.slimeBossPosition) {
        this.position.X = +$T0F().MoveTowards(this.position.X, this._game.slimeBossPosition, (+this._game.slimeBossSpeed * +time) * 8);
      } else {
        this.position.X = +$T0F().MoveTowards(this.position.X, this._game.slimeBossPosition, (+this._game.slimeBossSpeed * +time) * 2);
      }
      this._yVelocity = +this._yVelocity + (200 * +time);
      this.position.Y = +this.position.Y + (+this._yVelocity * +time);
      if ((+this.position.Y > +this._lastTrackY) && (+this._yVelocity < 0)) {
        this._yVelocity = +this._jumpStrength;
      }
      if (+this._yVelocity < 0) {
        this._desiredScale = $S00().Construct(0.9, 1.1);
        this._scaleSpeed = 5;
      } else {
        if (+this._yVelocity > 0) {
          this._desiredScale = $S00().Construct(1, 1);
          this._scaleSpeed = 0.25;
        }
      }
      var flag9 = (+this.position.Y > track_height) && 
      (+this._yVelocity > 0);
      if (flag9) {
        $T0B().playSound("slimedead");
        $T0B().playSound("breakingGlass");

        for (var j = 0; j < 8; j = ((j + 1) | 0)) {
          (this._game).AddEntity$b1($T0D())(new ($T0D())(new ($T03())(192, 112, 16, 16), $T00().op_Addition(
                $S00().Construct(+((this.GetBounds()).get_Center().X), +((this.GetBounds()).get_Bottom())), 
                $S00().Construct(+($T0B().random.Next(-32, 33)), +($T0B().random.Next(-32, 0)))
              ).MemberwiseClone(), +($T0B().random.Next(-80, 81)), +($T0B().random.Next(-10, 1)), 0.25, 0.25, 1, 1, 4, 0.25, 0.46, false, 0));
        }
        this._game.shakeMagnitude = 1.5;
        this.position.Y = track_height;
        this._grounded = true;
        this._timeUntilHop = 0.5;
        this._currentFrame = 2;
        this._hasPeparedToJump = false;
        this.spriteScale = $S00().Construct(1.1, 0.75);
      }
    }
    this.spriteScale.X = +$T0F().MoveTowards(this.spriteScale.X, this._desiredScale.X, +this._scaleSpeed * +time);
    this.spriteScale.Y = +$T0F().MoveTowards(this.spriteScale.Y, this._desiredScale.Y, +this._scaleSpeed * +time);
  }; 

  function HugeSlime_GetLocalBounds () {
    return new ($T03())(-40, -60, 80, 60);
  }; 

  function HugeSlime_InitializeObstacle (track) {
    $T01().prototype.InitializeObstacle.call(this, track);
  }; 

  function HugeSlime_OnPlayerReset () {
    this._game.slimeBossPosition = +this._game.checkpointPosition + +(this._game.slimeResetPosition);
  }; 

  function HugeSlime_ShouldReap () {
    return false;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+HugeSlime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HugeSlime__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      HugeSlime__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Initialize", 
      JSIL.MethodSignature.Void, 
      HugeSlime__Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      HugeSlime__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      HugeSlime_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InitializeObstacle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+Track")), 
      HugeSlime_InitializeObstacle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      HugeSlime_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShouldReap", 
      JSIL.MethodSignature.Return($.Boolean), 
      HugeSlime_ShouldReap
    );

    $.Field({Static:false, Public:false}, "_timeUntilHop", $.Single);

    $.Field({Static:false, Public:false}, "_yVelocity", $.Single);

    $.Field({Static:false, Public:false}, "_grounded", $.Boolean);

    $.Field({Static:false, Public:false}, "_maxFallSpeed", $.Single);

    $.Field({Static:false, Public:false}, "_lastTrackY", $.Single);

    $.Field({Static:false, Public:true }, "spriteScale", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "_currentFrame", $.Int32);

    $.Field({Static:false, Public:false}, "_desiredScale", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "_scaleSpeed", $.Single);

    $.Field({Static:false, Public:false}, "_jumpStrength", $.Single);

    $.Field({Static:false, Public:false}, "_hasPeparedToJump", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Roadblock */ 

(function Roadblock$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Roadblock__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function Roadblock__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T04())(16, 0, 16, 16), 
      $T05().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T07().None, 
      0.45
    );
  }; 

  function Roadblock__Update (time) {
  }; 

  function Roadblock_CanSpawnHere (track) {
    var flag = track === null;
    if (flag) {
      var result = false;
    } else {
      var flag2 = track.trackType > $T0B().Straight;
      result = !flag2;
    }
    return result;
  }; 

  function Roadblock_GetLocalBounds () {
    return new ($T04())(-4, -12, 8, 12);
  }; 

  function Roadblock_OnBounce (player) {
    var flag = !$T0D().$Is(player);
    if (flag) {
      var result = false;
    } else {
      this.ShootDebris(
        $T0F().random.Next(-10, -4), 
        $T0F().random.Next(-60, -19)
      );
      this.ShootDebris(
        $T0F().random.Next(5, 11), 
        $T0F().random.Next(-60, -19)
      );
      this.ShootDebris(
        $T0F().random.Next(-20, -9), 
        $T0F().random.Next(-40, 0)
      );
      this.ShootDebris(
        $T0F().random.Next(10, 21), 
        $T0F().random.Next(-40, 0)
      );
      $T0F().playSound("woodWhack");
      player.velocity.Y = 0;
      player.velocity.Y = 0;
      this.Destroy();
      result = true;
    }
    return result;
  }; 

  function Roadblock_OnBump (player) {
    this.ShootDebris(
      $T0F().random.Next(10, 41), 
      $T0F().random.Next(-40, 0)
    );
    this.ShootDebris(
      $T0F().random.Next(10, 41), 
      $T0F().random.Next(-40, 0)
    );
    this.ShootDebris(
      $T0F().random.Next(5, 31), 
      $T0F().random.Next(-60, -19)
    );
    this.ShootDebris(
      $T0F().random.Next(5, 31), 
      $T0F().random.Next(-60, -19)
    );
    $T0F().playSound("woodWhack");
    this.Destroy();
    return false;
  }; 

  function Roadblock_ShootDebris (x, y) {
    (this._game).AddEntity$b1($T11())(new ($T11())(new ($T04())(48, 48, 16, 16), $T12().PointToVector2((this.GetBounds()).get_Center().MemberwiseClone()).MemberwiseClone(), +x, +y, 0.25, 1, 1, 1, 1, 0.1, 0.45, false, 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"), 
      Name: "StardewValley.Minigames.MineCart+Roadblock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Roadblock__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Roadblock__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      Roadblock__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanSpawnHere", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      Roadblock_CanSpawnHere
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Roadblock_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBounce", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")]), 
      Roadblock_OnBounce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnBump", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")]), 
      Roadblock_OnBump
    );

    $.Method({Static:false, Public:true }, "ShootDebris", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Roadblock_ShootDebris
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MineDebris */ 

(function MineDebris$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function MineDebris__ctor (source_rect, spawn_position, dx, dy, flip_rate, gravity_multiplier, life_time, scale, num_animation_frames, animation_interval, draw_depth, holdLastFrame, timeBeforeDisplay) {
    this._scale = 1;
    this._color = $T05().get_White().MemberwiseClone();
    this.depth = 0.45;
    $T06().prototype._ctor.call(this);
    this.reset(
      source_rect.MemberwiseClone(), 
      spawn_position.MemberwiseClone(), 
      dx, 
      dy, 
      flip_rate, 
      gravity_multiplier, 
      life_time, 
      scale, 
      num_animation_frames, 
      animation_interval, 
      draw_depth, 
      holdLastFrame, 
      timeBeforeDisplay
    );
  }; 

  function MineDebris__Draw (b) {
    var effect = $T08().None;
    if ((+this.flipRate > 0) && (((Math.floor(+(+this._age / +this.flipRate))) % 2) === 0)) {
      effect = $T08().FlipHorizontally;
    }
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T01().op_Addition(
          this.get_drawnPosition().MemberwiseClone(), 
          $S02().Construct(0, (Math.fround(Math.sin((+(this._game).get_totalTime() + this.position.X))) * +this.ySinWaveMagnitude))
        ).MemberwiseClone()).MemberwiseClone(), 
      this._GetSourceRect().MemberwiseClone(), 
      this._color.MemberwiseClone(), 
      0, 
      $S02().Construct(+((+(this._sourceRect.Width) / 2)), +((+(this._sourceRect.Height) / 2))), 
      +(this._game).GetPixelScale() * +this._scale, 
      effect, 
      this.depth
    );
  }; 

  function MineDebris__GetSourceRect () {
    return new ($T00())((((this._sourceRect.X | 0) + Math.imul(this._currentAnimationFrame, this._sourceRect.Width)) | 0), this._sourceRect.Y, this._sourceRect.Width, this._sourceRect.Height);
  }; 

  function MineDebris__Update (time) {
    if (+this.timeBeforeDisplay > 0) {
      this.timeBeforeDisplay = +this.timeBeforeDisplay - +time;
      if (+this.timeBeforeDisplay > 0) {
        return;
      }
      this.visible = true;
      if (this.startSound !== null) {
        $T0C().playSound(this.startSound);
      }
    }
    this.position.X = +this.position.X + (+this._dX * +time);
    this.position.Y = +this.position.Y + (+this._dY * +time);
    this._dY = +this._dY + ((210 * +time) * +this._gravityMultiplier);
    this._age = +this._age + +time;
    if (+this._age >= +this._lifeTime) {
      if (this.destroySound !== null) {
        $T0C().playSound(this.destroySound);
      }
      this.Destroy();
    } else {
      this._animationTimer = +this._animationTimer + +time;
      if (+this._animationTimer >= +this._animationInterval) {
        this._animationTimer = 0;
        this._currentAnimationFrame = (((this._currentAnimationFrame | 0) + 1) | 0);
        if (this._holdLastFrame && ((this._currentAnimationFrame | 0) >= (((this._numAnimationFrames | 0) - 1) | 0))) {
          this._currentAnimationFrame = (((this._numAnimationFrames | 0) - 1) | 0);
        } else {
          this._currentAnimationFrame = (((this._currentAnimationFrame | 0) % (this._numAnimationFrames | 0)) | 0);
        }
      }
      $T06().prototype._Update.call(this, time);
    }
  }; 

  function MineDebris_reset (source_rect, spawn_position, dx, dy, flip_rate, gravity_multiplier, life_time, scale, num_animation_frames, animation_interval, draw_depth, holdLastFrame, timeBeforeDisplay) {
    this._sourceRect = source_rect.MemberwiseClone();
    this._dX = +dx;
    this._dY = +dy;
    this._lifeTime = +life_time;
    this.flipRate = +flip_rate;
    this.position = spawn_position.MemberwiseClone();
    this._gravityMultiplier = +gravity_multiplier;
    this._scale = +scale;
    this._numAnimationFrames = (num_animation_frames | 0);
    this._animationInterval = +animation_interval;
    this.depth = +draw_depth;
    this._holdLastFrame = holdLastFrame;
    this._currentAnimationFrame = 0;
    this.timeBeforeDisplay = +timeBeforeDisplay;
    if (+timeBeforeDisplay > 0) {
      this.visible = false;
    }
  }; 

  function MineDebris_SetColor (color) {
    this._color = color.MemberwiseClone();
  }; 

  function MineDebris_SetDestroySound (sound) {
    this.destroySound = sound;
  }; 

  function MineDebris_SetStartSound (sound) {
    this.startSound = sound;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+MineDebris", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 13, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $.Single, 
          $.Single, $.Boolean, 
          $.Single
        ]), 
      MineDebris__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      MineDebris__Draw
    );

    $.Method({Static:false, Public:false}, "_GetSourceRect", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      MineDebris__GetSourceRect
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      MineDebris__Update
    );

    $.Method({Static:false, Public:true }, "reset", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $.Single, 
          $.Single, $.Boolean, 
          $.Single
        ]), 
      MineDebris_reset
    );

    $.Method({Static:false, Public:true }, "SetColor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Color")), 
      MineDebris_SetColor
    );

    $.Method({Static:false, Public:true }, "SetDestroySound", 
      JSIL.MethodSignature.Action($.String), 
      MineDebris_SetDestroySound
    );

    $.Method({Static:false, Public:true }, "SetStartSound", 
      JSIL.MethodSignature.Action($.String), 
      MineDebris_SetStartSound
    );

    $.Field({Static:false, Public:false}, "_sourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "_dX", $.Single);

    $.Field({Static:false, Public:false}, "_dY", $.Single);

    $.Field({Static:false, Public:false}, "_age", $.Single);

    $.Field({Static:false, Public:false}, "_lifeTime", $.Single);

    $.Field({Static:false, Public:false}, "_gravityMultiplier", $.Single);

    $.Field({Static:false, Public:false}, "_scale", $.Single);

    $.Field({Static:false, Public:false}, "_color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "_numAnimationFrames", $.Int32);

    $.Field({Static:false, Public:false}, "_holdLastFrame", $.Boolean);

    $.Field({Static:false, Public:false}, "_animationInterval", $.Single);

    $.Field({Static:false, Public:false}, "_currentAnimationFrame", $.Int32);

    $.Field({Static:false, Public:false}, "_animationTimer", $.Single);

    $.Field({Static:false, Public:true }, "ySinWaveMagnitude", $.Single);

    $.Field({Static:false, Public:true }, "flipRate", $.Single);

    $.Field({Static:false, Public:true }, "depth", $.Single);

    $.Field({Static:false, Public:false}, "timeBeforeDisplay", $.Single);

    $.Field({Static:false, Public:false}, "destroySound", $.String);

    $.Field({Static:false, Public:false}, "startSound", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Pickup */ 

(function Pickup$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Pickup__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function Pickup__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T03())(16, 16, 16, 16), 
      $T04().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 8), 
      (this._game).GetPixelScale(), 
      $T06().None, 
      0.45
    );
  }; 

  function Pickup_Collect (player) {
    $T08().playSound("Pickup_Coin15");
    this.Destroy();
  }; 

  function Pickup_GetBounds () {
    var bounds = this.GetLocalBounds();
    bounds.X = (((bounds.X | 0) + ((this.position.X) | 0)) | 0);
    bounds.Y = (((bounds.Y | 0) + ((this.position.Y) | 0)) | 0);
    return bounds;
  }; 

  function Pickup_GetLocalBounds () {
    return new ($T03())(-4, -4, 8, 8);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+Pickup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Pickup__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Pickup__Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Collect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")), 
      Pickup_Collect
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Pickup_GetBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Pickup_GetLocalBounds
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("StardewValley.Minigames.MineCart+ICollideable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Fruit */ 

(function Fruit$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_CollectableFruits)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Pickup)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Fruit__ctor (fruit_type) {
    $T01().prototype._ctor.call(this);
    this._fruitType = fruit_type;
  }; 

  function Fruit__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(($asm00.StardewValley.Minigames.MineCart_CollectableFruits.$Cast(160 + $asm00.StardewValley.Minigames.MineCart_CollectableFruits.$Cast($T00().$Cast(16) * this._fruitType))).valueOf(), 0, 16, 16), 
      $T06().get_White().MemberwiseClone(), 
      0, 
      $S02().Construct(8, 8), 
      (this._game).GetPixelScale(), 
      $T08().None, 
      0.43
    );
  }; 

  function Fruit_Collect (player) {
    (this._game).CollectFruit(this._fruitType);
    (this._game).AddEntity$b1($T0A())(new ($T0A())(new ($T05())(0, 250, 5, 5), this.position.MemberwiseClone(), 0, 0, 0, 0, 0.6, 1, 6, 0.1, 0.45, false, 0));

    for (var i = 0; i < 4; i = ((i + 1) | 0)) {
      var interval = +$T0D().Lerp(0.1, 0.2, Math.fround($T0F().random.NextDouble()));
      (this._game).AddEntity$b1($T0A())(new ($T0A())(new ($T05())(0, 250, 5, 5), $T07().op_Addition(this.position.MemberwiseClone(), $S02().Construct(+($T0F().random.Next(-8, 9)), +($T0F().random.Next(-8, 9)))).MemberwiseClone(), 0, 0, 0, 0, (interval * 6), 1, 6, interval, 0.45, false, 0));
    }
    $T0F().playSound("eat");
    this.Destroy();
  }; 

  function Fruit_GetLocalBounds () {
    return new ($T05())(-6, -6, 12, 12);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Pickup"), 
      Name: "StardewValley.Minigames.MineCart+Fruit", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+CollectableFruits")), 
      Fruit__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Fruit__Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Collect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")), 
      Fruit_Collect
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Fruit_GetLocalBounds
    );

    $.Field({Static:false, Public:false}, "_fruitType", $asm00.TypeRef("StardewValley.Minigames.MineCart+CollectableFruits"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Coin */ 

(function Coin$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Pickup)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Coin__ctor () {
    this.flashSpeed = 0.25;
    this.flashDelay = 0.5;
    $T00().prototype._ctor.call(this);
  }; 

  function Coin__Draw (b) {
    var time = ((
      this.collected
         ? 450
         : 900)
     | 0);
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(Math.imul(9, (((((((this._game).get_totalTimeMS()) | 0) % time) | 0) / ((time / 12) | 0)) | 0)), 273, 9, 9), 
      $T06().op_Multiply($T06().get_White().MemberwiseClone(), 1 - +((+this.afterCollectionTimer / 0.4))).MemberwiseClone(), 
      0, 
      $S02().Construct(4, 4), 
      (this._game).GetPixelScale(), 
      $T08().None, 
      0.45
    );
  }; 

  function Coin__Update (time) {
    this.age = +this.age + +time;
    if (+this.age > (+this.flashDelay + (+this.flashSpeed * 3))) {
      this.age = 0;
    }
    var flag2 = this.collected;
    if (flag2) {
      this.afterCollectionTimer = +this.afterCollectionTimer + +time;
      if (+time > 0) {
        this.position.Y = +this.position.Y - (3 - ((+this.afterCollectionTimer * 8) * +time));
      }
      if (+this.afterCollectionTimer > 0.4) {
        this.Destroy();
      }
    }
    $T04().prototype._Update.call(this, time);
  }; 

  function Coin_Collect (player) {
    if (!this.collected) {
      (this._game).CollectCoin(1);
      $T0C().playSound("junimoKart_coin");
      (this._game).AddEntity$b1($T0D())(new ($T0D())(new ($T05())(0, 250, 5, 5), this.position.MemberwiseClone(), 0, 0, 0, 0, 0.6, 1, 6, 0.1, 0.45, false, 0));

      for (var i = 0; i < 4; i = ((i + 1) | 0)) {
        var interval = +$T0E().Lerp(0.1, 0.2, Math.fround($T0C().random.NextDouble()));
        (this._game).AddEntity$b1($T0D())(new ($T0D())(new ($T05())(0, 250, 5, 5), $T07().op_Addition(this.position.MemberwiseClone(), $S02().Construct(+($T0C().random.Next(-8, 9)), +($T0C().random.Next(-8, 9)))).MemberwiseClone(), 0, 0, 0, 0, (interval * 6), 1, 6, interval, 0.45, false, 0));
      }
      this.collectYDelta = -3;
      this.collected = true;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Pickup"), 
      Name: "StardewValley.Minigames.MineCart+Coin", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Coin__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Coin__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      Coin__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Collect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+PlayerMineCartCharacter")), 
      Coin_Collect
    );

    $.Field({Static:false, Public:true }, "age", $.Single);

    $.Field({Static:false, Public:true }, "afterCollectionTimer", $.Single);

    $.Field({Static:false, Public:true }, "collected", $.Boolean);

    $.Field({Static:false, Public:true }, "flashSpeed", $.Single);

    $.Field({Static:false, Public:true }, "flashDelay", $.Single);

    $.Field({Static:false, Public:true }, "collectYDelta", $.Single);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+Track */ 

(function Track$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function Track__ctor (type, showSecondTile) {
    $T02().prototype._ctor.call(this);
    this.trackType = type;
    this._showSecondTile = showSecondTile;
  }; 

  function Track__Draw (b) {
    var tint = this._game.trackTint.MemberwiseClone();
    var flag = this.highlighted;
    if (flag) {
      tint = $T04().get_Yellow().MemberwiseClone();
    }
    if (this.trackType === $T00().SlimeUpSlope) {
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (+this.get_drawnPosition().Y - 32))).MemberwiseClone(), 
        new ($T07())(192, 144, 16, 32), 
        tint.MemberwiseClone(), 
        0, 
        $T06().get_Zero().MemberwiseClone(), 
        (this._game).GetPixelScale(), 
        $T08().None, 
        0.5 + (+this.get_drawnPosition().Y * 1E-05)
      );
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (+this.get_drawnPosition().Y - 32))).MemberwiseClone(), 
        new ($T07())(($asm00.StardewValley.Minigames.MineCart_Track_TrackType.$Cast(160 + $asm00.StardewValley.Minigames.MineCart_Track_TrackType.$Cast(this.trackType * $T00().$Cast(16)))).valueOf(), 144, 16, 32), 
        $T04().get_White().MemberwiseClone(), 
        0, 
        $T06().get_Zero().MemberwiseClone(), 
        (this._game).GetPixelScale(), 
        $T08().None, 
        (0.5 + (+this.get_drawnPosition().Y * 1E-05)) - 0.0001
      );
    } else {
      if ((this.trackType >= $T00().MushroomLeft) && (this.trackType <= $T00().MushroomRight)) {
        var flag4 = $T09().op_Equality(JSIL.GetType(this), $thisType.__Type__);
        if (flag4) {
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (+this.get_drawnPosition().Y - 32))).MemberwiseClone(), 
            new ($T07())(((304 + Math.imul(((this.trackType - $T00().MushroomLeft) | 0), 16)) | 0), 736, 16, 48), 
            $T04().get_White().MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            0.5 + (+this.get_drawnPosition().Y * 1E-05)
          );
        } else {
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (+this.get_drawnPosition().Y - 32))).MemberwiseClone(), 
            new ($T07())(((352 + Math.imul(((this.trackType - $T00().MushroomLeft) | 0), 16)) | 0), 736, 16, 48), 
            $T04().get_White().MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            0.5 + (+this.get_drawnPosition().Y * 1E-05)
          );
        }
      } else {
        if (((this._game.currentTheme | 0) === 4) && ((this.trackType === $T00().UpSlope) || 
            (this.trackType === $T00().DownSlope))) {
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (+this.get_drawnPosition().Y - 32))).MemberwiseClone(), 
            new ($T07())(((256 + Math.imul(((this.trackType - $T00().UpSlope) | 0), 16)) | 0), 144, 16, 32), 
            tint.MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            0.5 + (+this.get_drawnPosition().Y * 1E-05)
          );
        } else {
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (+this.get_drawnPosition().Y - 32))).MemberwiseClone(), 
            new ($T07())(($asm00.StardewValley.Minigames.MineCart_Track_TrackType.$Cast(160 + $asm00.StardewValley.Minigames.MineCart_Track_TrackType.$Cast(this.trackType * $T00().$Cast(16)))).valueOf(), 144, 16, 32), 
            tint.MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            0.5 + (+this.get_drawnPosition().Y * 1E-05)
          );
        }
      }
    }
    if (!((this.trackType === $T00().MushroomLeft) || (this.trackType === $T00().MushroomRight))) {
      var darkness = 0;
      if (this.trackType === $T00().MushroomMiddle) {

        for (var y2 = +this.get_drawnPosition().Y; y2 < +(this._game.screenHeight); y2 += +((this._game.tileSize | 0) * 4)) {
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (y2 + 16))).MemberwiseClone(), 
            new ($T07())(320, 784, 16, 64), 
            $T04().get_White().MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            (0.5 + (+this.get_drawnPosition().Y * 1E-05)) + 0.01
          );
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, (y2 + 16))).MemberwiseClone(), 
            new ($T07())(368, 784, 16, 64), 
            $T04().op_Multiply(this._game.trackShadowTint.MemberwiseClone(), darkness).MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            (0.5 + (+this.get_drawnPosition().Y * 1E-05)) + 0.005
          );
          darkness += 0.1;
        }
      } else {
        var flipper = this._showSecondTile;

        for (var y3 = +this.get_drawnPosition().Y; y3 < +(this._game.screenHeight); y3 += +(this._game.tileSize)) {
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, y3)).MemberwiseClone(), 
            (
              ((this._game.currentTheme | 0) === 4)
                 ? new ($T07())(((16 + Math.imul((
                        flipper
                           ? 1
                           : 0)
                      , 16)) | 0), 160, 16, 16)
                 : new ($T07())(((16 + Math.imul((
                        flipper
                           ? 1
                           : 0)
                      , 16)) | 0), 32, 16, 16))
            .MemberwiseClone(), 
            tint.MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            (0.5 + (+this.get_drawnPosition().Y * 1E-05)) + 0.01
          );
          $S00().CallVirtual("Draw", null, b, 
            this._game.texture, 
            $S01().CallVirtual("TransformDraw", null, this._game, $S02().Construct(this.get_drawnPosition().X, y3)).MemberwiseClone(), 
            (
              ((this._game.currentTheme | 0) === 4)
                 ? new ($T07())(((16 + Math.imul((
                        flipper
                           ? 1
                           : 0)
                      , 16)) | 0), 160, 16, 16)
                 : new ($T07())(((16 + Math.imul((
                        flipper
                           ? 1
                           : 0)
                      , 16)) | 0), 32, 16, 16))
            .MemberwiseClone(), 
            $T04().op_Multiply(this._game.trackShadowTint.MemberwiseClone(), darkness).MemberwiseClone(), 
            0, 
            $T06().get_Zero().MemberwiseClone(), 
            (this._game).GetPixelScale(), 
            $T08().None, 
            (0.5 + (+this.get_drawnPosition().Y * 1E-05)) + 0.005
          );
          darkness += 0.1;
          flipper = !flipper;
        }
      }
    }
  }; 

  function Track_CanLandHere (test_position) {
    var track_y = (this.GetYAtPoint(test_position.X) | 0);
    return ((+test_position.Y >= +(track_y - 2)) && (+test_position.Y <= +(track_y + 8)));
  }; 

  function Track_GetYAtPoint (x) {
    var local_x = ((+x - +this.position.X) | 0);
    if (this.trackType === $T00().UpSlope) {
      var result = (((+this.position.Y - 2) - +local_x) | 0);
    } else {
      if (this.trackType === $T00().DownSlope) {
        result = ((((+this.position.Y - 2) - 16) + +local_x) | 0);
      } else {
        if (this.trackType === $T00().IceDownSlope) {
          result = ((((+this.position.Y - 2) - 16) + +local_x) | 0);
        } else {
          if (this.trackType === $T00().SlimeUpSlope) {
            result = (((+this.position.Y - 2) - +local_x) | 0);
          } else {
            result = ((+this.position.Y - 2) | 0);
          }
        }
      }
    }
    return result;
  }; 

  function Track_highlight () {
    this.highlighted = true;
  }; 

  function Track_toString () {
    var position = this.position.MemberwiseClone();
    return (position.toString() + ":" + (this.trackType).toString());
  }; 

  function Track_WhileCartGrounded (character, time) {
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+Track", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"), $.Boolean]), 
      Track__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Track__Draw
    );

    $.Method({Static:false, Public:true }, "CanLandHere", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Track_CanLandHere
    );

    $.Method({Static:false, Public:true }, "GetYAtPoint", 
      new JSIL.MethodSignature($.Int32, [$.Single]), 
      Track_GetYAtPoint
    );

    $.Method({Static:false, Public:false}, "highlight", 
      JSIL.MethodSignature.Void, 
      Track_highlight
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Track_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WhileCartGrounded", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter"), $.Single]), 
      Track_WhileCartGrounded
    );

    $.Field({Static:false, Public:true }, "obstacle", $asm00.TypeRef("StardewValley.Minigames.MineCart+Obstacle"));

    $.Field({Static:false, Public:false}, "_showSecondTile", $.Boolean);

    $.Field({Static:false, Public:true }, "trackType", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"));

    $.Field({Static:false, Public:true }, "highlighted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum StardewValley.Minigames.MineCart+Track+TrackType */ 

JSIL.MakeEnum(
  {
    FullName: "StardewValley.Minigames.MineCart+Track+TrackType", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    Straight: 0, 
    UpSlope: 2, 
    DownSlope: 3, 
    IceDownSlope: 4, 
    SlimeUpSlope: 5, 
    MushroomLeft: 6, 
    MushroomMiddle: 7, 
    MushroomRight: 8, 
  }
);

/* class StardewValley.Minigames.MineCart+BalanceTrack */ 

(function BalanceTrack$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_BalanceTrack), null))) ();
  };


  function BalanceTrack__ctor (type, showSecondTile) {
    this.moveSpeed = 128;
    $T02().prototype._ctor.call(this, type, showSecondTile);
    this.connectedTracks = $S00().Construct();
    this.counterBalancedTracks = $S00().Construct();
  }; 

  function BalanceTrack_OnPlayerReset () {
    this.position.Y = +this.startY;
  }; 

  function BalanceTrack_WhileCartGrounded (character, time) {
    var $temp00, $temp01;

    for (var a$0 = this.connectedTracks._items, i$0 = 0, l$0 = (this.connectedTracks._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var connectedTrack = a$0[i$0];
      var expr_24_cp_0_cp_0 = connectedTrack;
      expr_24_cp_0_cp_0.position.Y = +expr_24_cp_0_cp_0.position.Y + (+this.moveSpeed * +time);
    }

    for (var a$1 = this.counterBalancedTracks._items, i$1 = 0, l$1 = (this.counterBalancedTracks._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var counterBalancedTrack = a$1[i$1];
      var expr_6E_cp_0_cp_0 = counterBalancedTrack;
      expr_6E_cp_0_cp_0.position.Y = +expr_6E_cp_0_cp_0.position.Y - (+this.moveSpeed * +time);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), 
      Name: "StardewValley.Minigames.MineCart+BalanceTrack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"), $.Boolean]), 
      BalanceTrack__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnPlayerReset", 
      JSIL.MethodSignature.Void, 
      BalanceTrack_OnPlayerReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WhileCartGrounded", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter"), $.Single]), 
      BalanceTrack_WhileCartGrounded
    );

    $.Field({Static:false, Public:true }, "connectedTracks", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:true }, "counterBalancedTracks", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:true }, "startY", $.Single);

    $.Field({Static:false, Public:true }, "moveSpeed", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+MineCartCharacter */ 

(function MineCartCharacter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_BaseCharacter)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_PlayerMineCartCharacter)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm06.System.Int32))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.StardewValley.Minigames.MineCart_Track))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm01.Microsoft.Xna.Framework.Vector2, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm06.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };


  function MineCartCharacter__ctor () {
    this.jumpStrength = 300;
    this.maxFallSpeed = 150;
    this.jumpGravity = 3400;
    this.fallGravity = 3000;
    this.jumpFloatDuration = 0.1;
    this._speedMultiplier = 1;
    this._jumpMomentumThreshhold = -30;
    this._grounded = true;
    this.cartScale = $T00().get_One().MemberwiseClone();
    this.currentTrackType = $T01().None;
    $T02().prototype._ctor.call(this);
  }; 

  function MineCartCharacter__Draw (b) {
    var right = new ($T00())(), up = new ($T00())();
    if ((((((this._game.respawnCounter | 0) / 200) | 0) % 2) | 0) === 0) {
      var rad_rotation = +(((+this.rotation * 3.14159274) / 180));
      (right = right.MemberwiseClone(), 
        $T00().prototype._ctor.call(right, Math.fround(Math.cos(rad_rotation)), 0 - Math.fround(Math.sin(rad_rotation))));
      (up = up.MemberwiseClone(), 
        $T00().prototype._ctor.call(up, Math.fround(Math.sin(rad_rotation)), 0 - Math.fround(Math.cos(rad_rotation))));
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $T00().op_Addition(
            $T00().op_Addition(
              this.get_drawnPosition().MemberwiseClone(), 
              $S02().CallStatic($T00(), "op_Multiply", null, up.MemberwiseClone(), 0 - +this.minecartBumpOffset).MemberwiseClone()
            ).MemberwiseClone(), 
            $S02().CallStatic($T00(), "op_Multiply", null, up.MemberwiseClone(), 4).MemberwiseClone()
          ).MemberwiseClone()).MemberwiseClone(), 
        new ($T09())(0, 0, 16, 16), 
        $T0A().get_White().MemberwiseClone(), 
        rad_rotation, 
        $S03().Construct(8, 14), 
        $S02().CallStatic($T00(), "op_Multiply", null, this.cartScale.MemberwiseClone(), (this._game).GetPixelScale()).MemberwiseClone(), 
        $T0B().None, 
        0.45
      );
      $S00().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S01().CallVirtual("TransformDraw", null, this._game, $T00().op_Addition(
            $T00().op_Addition(
              this.get_drawnPosition().MemberwiseClone(), 
              $S02().CallStatic($T00(), "op_Multiply", null, up.MemberwiseClone(), 0 - +this.minecartBumpOffset).MemberwiseClone()
            ).MemberwiseClone(), 
            $S02().CallStatic($T00(), "op_Multiply", null, up.MemberwiseClone(), 4).MemberwiseClone()
          ).MemberwiseClone()).MemberwiseClone(), 
        new ($T09())(0, 16, 16, 16), 
        $T0A().get_White().MemberwiseClone(), 
        rad_rotation, 
        $S03().Construct(8, 14), 
        $S02().CallStatic($T00(), "op_Multiply", null, this.cartScale.MemberwiseClone(), (this._game).GetPixelScale()).MemberwiseClone(), 
        $T0B().None, 
        0.4
      );
      $S04().CallVirtual("Draw", null, b, 
        $T0C().mouseCursors, 
        $S01().CallVirtual("TransformDraw", null, this._game, $T00().op_Addition($T00().op_Addition(
              $T00().op_Addition(
                $T00().op_Addition(
                  this.get_drawnPosition().MemberwiseClone(), 
                  $S02().CallStatic($T00(), "op_Multiply", null, right.MemberwiseClone(), -2).MemberwiseClone()
                ).MemberwiseClone(), 
                $S02().CallStatic($T00(), "op_Multiply", null, up.MemberwiseClone(), 0 - +this.minecartBumpOffset).MemberwiseClone()
              ).MemberwiseClone(), 
              $S02().CallStatic($T00(), "op_Multiply", null, up.MemberwiseClone(), 12).MemberwiseClone()
            ).MemberwiseClone(), $S03().Construct(0, (0 - +this.characterExtraHeight))).MemberwiseClone()).MemberwiseClone(), 
        new ($T09())(((294 + Math.imul(((((+(this._game).get_totalTimeMS() % 400) | 0) / 100) | 0), 16)) | 0), 1432, 16, 16), 
        $T0A().get_Lime().MemberwiseClone(), 
        0, 
        $S03().Construct(8, 8), 
        +(((+(this._game).GetPixelScale() * 2) / 3)), 
        $T0B().None, 
        0.425
      );
    }
  }; 

  function MineCartCharacter__Update (time) {
    if ((this._game.respawnCounter | 0) > 0) {
      this.characterExtraHeight = 0;
      this.rotation = 0;
      this._jumpBuffer = 0;
      this.jumpGracePeriod = 0;
      this.gravity = 0;
      this.velocity.Y = 0;
      this.minecartBumpOffset = 0;
      this.SnapToFloor();
    } else {
      $T08().prototype._Update.call(this, time);
      if (+this.jumpGracePeriod > 0) {
        this.jumpGracePeriod = +this.jumpGracePeriod - +time;
      }
      if (!(!this._grounded || 
          (+this._jumpBuffer <= 0)) && this._game.isJumpPressed) {
        this._jumpBuffer = 0;
        this.Jump();
      } else {
        if (+this._jumpBuffer > 0) {
          this._jumpBuffer = +this._jumpBuffer - +time;
        }
      }
      var found_valid_ground = false;
      var old_track_type = this.currentTrackType;
      var track2 = this.GetTrack(new ($T00())());
      var flag5 = (track2 !== null) && 
      this._grounded;
      if (flag5) {
        track2.WhileCartGrounded(this, time);
      }
      var grounded = this._grounded;
      var flag6 = (+this.velocity.Y >= 0) && 
      (track2 !== null);
      if (flag6) {
        this.position.Y = +(track2.GetYAtPoint(this.position.X));
        this.currentTrackType = track2.trackType;
        if (!this._grounded) {
          this.cartScale = $S03().Construct(1.5, 0.5);
          this.rotation = 0;
          this.OnLand();
        }
        found_valid_ground = true;
        this.velocity.Y = 0;
        this._grounded = true;
      } else {
        if (this._grounded && (+this.velocity.Y >= 0)) {
          track2 = this.GetTrack($S03().Construct(0, 2));
          var flag9 = track2 !== null;
          if (flag9) {
            this.position.Y = +(track2.GetYAtPoint(this.position.X));
            this.currentTrackType = track2.trackType;
            found_valid_ground = true;
            this.velocity.Y = 0;
            this._grounded = true;
          }
        }
      }
      var flag10 = !found_valid_ground;
      if (flag10) {
        var grounded2 = this._grounded;
        if (grounded2) {
          this.gravity = 0;
          this.velocity.Y = +this.GetMaxFallSpeed();
          if (!this.IsJumping()) {
            this.OnFall();
            this.jumpGracePeriod = 0.2;
          }
        }
        this.currentTrackType = $T01().None;
        this._grounded = false;
      }
      var ground_rotation = 0;
      if (this.currentTrackType === $T01().Straight) {
        ground_rotation = 0;
      } else {
        if (this.currentTrackType === $T01().UpSlope) {
          ground_rotation = -45;
        } else {
          if (this.currentTrackType === $T01().DownSlope) {
            ground_rotation = 30;
          }
        }
      }
      if (this.IsJumping()) {
        this.rotation = +$T0F().MoveTowards(this.rotation, -45, 300 * +time);
        this.characterExtraHeight = 0;
      } else {
        if (!this._grounded) {
          this.rotation = +$T0F().MoveTowards(this.rotation, 0, 100 * +time);
          this.characterExtraHeight = +$T0F().MoveTowards(this.characterExtraHeight, 16, 24 * +time);
        } else {
          this.rotation = +$T0F().MoveTowards(this.rotation, ground_rotation, 360 * +time);
          this.characterExtraHeight = +$T0F().MoveTowards(this.characterExtraHeight, 0, 128 * +time);
        }
      }
      this.cartScale.X = +$T0F().MoveTowards(this.cartScale.X, 1, 4 * +time);
      this.cartScale.Y = +$T0F().MoveTowards(this.cartScale.Y, 1, 4 * +time);
      var flag17 = grounded && 
      (old_track_type !== this.currentTrackType);
      if (flag17) {
        var flag18 = ((+this.rotation < 0) && 
          (ground_rotation > 0)) || 
        ((+this.rotation > 0) && 
          (ground_rotation < 0));
        if (flag18) {
          this.rotation = 0;
        }
        this.OnTrackChange();
      }
      if (+this.forcedJumpTime > 0) {
        this.forcedJumpTime = +this.forcedJumpTime - +time;
        var grounded3 = this._grounded;
        if (grounded3) {
          this.forcedJumpTime = 0;
        }
      }
      if (!this._grounded) {
        var jumping = this._jumping;
        if (jumping) {
          this._jumpFloatAge = +this._jumpFloatAge + +time;
          if (+this._jumpFloatAge < +this.jumpFloatDuration) {
            this.gravity = 0;
            this.velocity.Y = +$T0F().Lerp(0, 0 - +this.jumpStrength, +((+this._jumpFloatAge / +this.jumpFloatDuration)));
          } else {
            if (+this.velocity.Y <= (+this._jumpMomentumThreshhold * 2)) {
              this.gravity = +this.gravity + (+time * +this.jumpGravity);
            } else {
              this.velocity.Y = +this._jumpMomentumThreshhold;
              this.ReleaseJump();
            }
          }
        } else {
          this.gravity = +this.gravity + (+time * +this.fallGravity);
        }
        this.velocity.Y = +this.velocity.Y + (+time * +this.gravity);
      } else {
        this._jumping = false;
      }
      if ((this._game.currentTheme | 0) === 5) {
        this._speedMultiplier = 1;
      }
      if (this.currentTrackType === $T01().SlimeUpSlope) {
        this._speedMultiplier = 0.5;
      } else {
        if (this.currentTrackType === $T01().IceDownSlope) {
          this._speedMultiplier = +$T0F().MoveTowards(this._speedMultiplier, 3, +time * 2);
        } else {
          var grounded4 = this._grounded;
          if (grounded4) {
            this._speedMultiplier = +$T0F().MoveTowards(this._speedMultiplier, 1, +time * 6);
          }
        }
      }
      if (!$T10().$Is(this)) {
        this._speedMultiplier = 1;
      }
      this.position.X = +this.position.X + ((+time * +this.velocity.X) * +this._speedMultiplier);
      this.position.Y = +this.position.Y + (+time * +this.velocity.Y);
      if (+this.velocity.Y > 0) {
        this._jumping = false;
      }
      if (+this.velocity.Y > +this.GetMaxFallSpeed()) {
        this.velocity.Y = +this.GetMaxFallSpeed();
      }
      var hasJustSnapped = this._hasJustSnapped;
      if (hasJustSnapped) {
        this._hasJustSnapped = false;
      }
    }
  }; 

  function MineCartCharacter_Bounce (forced_bounce_time) {
    this.forcedJumpTime = +forced_bounce_time;
    this._jumping = true;
    this.gravity = 0;
    this.cartScale = $S03().Construct(0.5, 1.5);
    this.velocity.Y = 0 - +this.jumpStrength;
    this._grounded = false;
  }; 

  function MineCartCharacter_ForceGrounded () {
    this._grounded = true;
    this.gravity = 0;
    this.velocity.Y = 0;
  }; 

  function MineCartCharacter_GetMaxFallSpeed () {
    if ((this._game.currentTheme | 0) === 2) {
      var result = 75;
    } else {
      result = +this.maxFallSpeed;
    }
    return result;
  }; 

  function MineCartCharacter_GetTrack (offset) {
    var offsets = JSIL.Array.New($T12(), [0, 4, -4]);
    var array = offsets;

    for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
      var x_offset = (array[j] | 0);
      var test_position = $T00().op_Addition($T00().op_Addition(this.position.MemberwiseClone(), offset.MemberwiseClone()).MemberwiseClone(), $S03().Construct(+x_offset, 0));
      var tracks = (this._game).GetTracksForXPosition(test_position.X);
      if (tracks !== null) {

        for (var i = 0; i < (tracks.get_Count() | 0); i = ((i + 1) | 0)) {
          var flag2 = (tracks.get_Item(i)).CanLandHere(test_position);
          if (flag2) {
            var result = tracks.get_Item(i);
            return result;
          }
        }
      }
    }
    result = null;
    return result;
  }; 

  function MineCartCharacter_IsGrounded () {
    return this._grounded;
  }; 

  function MineCartCharacter_IsJumping () {
    return this._jumping;
  }; 

  function MineCartCharacter_Jump () {
    if (this._grounded || (+this.jumpGracePeriod > 0)) {
      this._jumping = true;
      this.gravity = 0;
      this._jumpFloatAge = 0;
      this.cartScale = $S03().Construct(0.5, 1.5);
      this.OnJump();
      this.velocity.Y = 0 - +this.jumpStrength;
      this._grounded = false;
    }
  }; 

  function MineCartCharacter_OnDie () {
    this.cartScale = $T00().get_One().MemberwiseClone();
    this._speedMultiplier = 1;
  }; 

  function MineCartCharacter_OnFall () {
  }; 

  function MineCartCharacter_OnJump () {
  }; 

  function MineCartCharacter_OnLand () {
  }; 

  function MineCartCharacter_OnTrackChange () {
  }; 

  function MineCartCharacter_QueueJump () {
    this._jumpBuffer = 0.25;
  }; 

  function MineCartCharacter_ReleaseJump () {
    if (!((+this.forcedJumpTime > 0) || 
        !this._jumping) && (+this.velocity.Y < 0)) {
      this._jumping = false;
      this.gravity = 0;
      if (+this.velocity.Y < +this._jumpMomentumThreshhold) {
        this.velocity.Y = +this._jumpMomentumThreshhold;
      }
    }
  }; 

  function MineCartCharacter_SnapToFloor () {
    var position_tracks = (this._game).GetTracksForXPosition(this.position.X);
    if (position_tracks !== null) {
      var flag2 = 0 < (position_tracks.get_Count() | 0);
      if (flag2) {
        var track = position_tracks.get_Item(0);
        this.position.Y = +(track.GetYAtPoint(this.position.X));
        this._grounded = true;
        this.gravity = 0;
        this.velocity.Y = 0;
        this.characterExtraHeight = 0;
        this.minecartBumpOffset = 0;
        this._hasJustSnapped = true;
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+BaseCharacter"), 
      Name: "StardewValley.Minigames.MineCart+MineCartCharacter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      MineCartCharacter__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      MineCartCharacter__Update
    );

    $.Method({Static:false, Public:true }, "Bounce", 
      JSIL.MethodSignature.Action($.Single), 
      MineCartCharacter_Bounce
    );

    $.Method({Static:false, Public:true }, "ForceGrounded", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_ForceGrounded
    );

    $.Method({Static:false, Public:true }, "GetMaxFallSpeed", 
      JSIL.MethodSignature.Return($.Single), 
      MineCartCharacter_GetMaxFallSpeed
    );

    $.Method({Static:false, Public:true }, "GetTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      MineCartCharacter_GetTrack
    );

    $.Method({Static:false, Public:true }, "IsGrounded", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCartCharacter_IsGrounded
    );

    $.Method({Static:false, Public:true }, "IsJumping", 
      JSIL.MethodSignature.Return($.Boolean), 
      MineCartCharacter_IsJumping
    );

    $.Method({Static:false, Public:true }, "Jump", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_Jump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnDie", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_OnDie
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnFall", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_OnFall
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnJump", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_OnJump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnLand", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_OnLand
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnTrackChange", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_OnTrackChange
    );

    $.Method({Static:false, Public:true }, "QueueJump", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_QueueJump
    );

    $.Method({Static:false, Public:true }, "ReleaseJump", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_ReleaseJump
    );

    $.Method({Static:false, Public:true }, "SnapToFloor", 
      JSIL.MethodSignature.Void, 
      MineCartCharacter_SnapToFloor
    );

    $.Field({Static:false, Public:true }, "minecartBumpOffset", $.Single);

    $.Field({Static:false, Public:true }, "jumpStrength", $.Single);

    $.Field({Static:false, Public:true }, "maxFallSpeed", $.Single);

    $.Field({Static:false, Public:true }, "jumpGravity", $.Single);

    $.Field({Static:false, Public:true }, "fallGravity", $.Single);

    $.Field({Static:false, Public:true }, "jumpFloatDuration", $.Single);

    $.Field({Static:false, Public:true }, "gravity", $.Single);

    $.Field({Static:false, Public:false}, "_jumpBuffer", $.Single);

    $.Field({Static:false, Public:false}, "_jumpFloatAge", $.Single);

    $.Field({Static:false, Public:false}, "_speedMultiplier", $.Single);

    $.Field({Static:false, Public:false}, "_jumpMomentumThreshhold", $.Single);

    $.Field({Static:false, Public:true }, "jumpGracePeriod", $.Single);

    $.Field({Static:false, Public:true }, "respawnCounter", $.Single);

    $.Field({Static:false, Public:false}, "_grounded", $.Boolean);

    $.Field({Static:false, Public:false}, "_jumping", $.Boolean);

    $.Field({Static:false, Public:true }, "jumpHeld", $.Boolean);

    $.Field({Static:false, Public:true }, "rotation", $.Single);

    $.Field({Static:false, Public:true }, "cartScale", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "currentTrackType", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track+TrackType"));

    $.Field({Static:false, Public:true }, "characterExtraHeight", $.Single);

    $.Field({Static:false, Public:false}, "_hasJustSnapped", $.Boolean);

    $.Field({Static:false, Public:true }, "forcedJumpTime", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+PlayerMineCartCharacter */ 

(function PlayerMineCartCharacter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GameStates)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.JunimoKart.ICue)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.StardewValley.Utility)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Pickup)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Obstacle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track_TrackType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineDebris)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Object)) ();
  };


  function PlayerMineCartCharacter__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function PlayerMineCartCharacter__Update (time) {
    var $temp00;
    if (this.IsActive()) {
      var old_x_pos = ((+(+this.position.X / +(this._game.tileSize))) | 0);
      var old_y_velocity = +this.velocity.Y;
      if (!((this._game.gameState === $T04().Cutscene) || 
          !this._jumping || 
          this._game.isJumpPressed) && !this._game.gamePaused) {
        this.ReleaseJump();
      }
      $T00().prototype._Update.call(this, time);
      if (this._grounded && ((this._game.respawnCounter | 0) <= 0)) {
        var flag4 = (this._game.minecartLoop).get_IsPaused() && 
        ((this._game.currentTheme | 0) !== 7);
        if (flag4) {
          (this._game.minecartLoop).Resume();
        }
        var flag5 = (old_x_pos !== ((+(+this.position.X / +(this._game.tileSize))) | 0)) && 
        (+$T08().random.NextDouble() < 0.5);
        if (flag5) {
          this.minecartBumpOffset = +(-+($T08().random.Next(1, 3)));
        }
      } else {
        if (!this._grounded) {
          var flag7 = !(this._game.minecartLoop).get_IsPaused();
          if (flag7) {
            (this._game.minecartLoop).Pause();
          }
          this.minecartBumpOffset = 0;
        }
      }
      this.minecartBumpOffset = +$T09().MoveTowards(this.minecartBumpOffset, 0, +time * 20);

      for (var a$0 = (this._game).GetOverlaps$b1($T0A())(this)._items, i$0 = 0, l$0 = ((this._game).GetOverlaps$b1($T0A())(this)._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var overlap = a$0[i$0];
        overlap.Collect(this);
      }
      var obstacle = (this._game).GetOverlap$b1($T0C())(this);
      var flag8 = !(((this._game).GetOverlap$b1($T0C())(this) === null) || 
        (!((+this.velocity.Y <= 0) && 
            (old_y_velocity <= 0) && 
            (+this.position.Y >= (+obstacle.position.Y - 1))) && 
          obstacle.OnBounce(this))) && 
      !obstacle.OnBump(this);
      if (flag8) {
        (this._game).Die();
      }
    }
  }; 

  function PlayerMineCartCharacter_GetBounds () {
    var bounds = this.GetLocalBounds();
    bounds.X = (((bounds.X | 0) + ((this.position.X) | 0)) | 0);
    bounds.Y = (((bounds.Y | 0) + ((this.position.Y) | 0)) | 0);
    return bounds;
  }; 

  function PlayerMineCartCharacter_GetLocalBounds () {
    return new ($T0D())(-4, -12, 8, 12);
  }; 

  function PlayerMineCartCharacter_OnFall () {
    (this._game).createSparkShower();
  }; 

  function PlayerMineCartCharacter_OnJump () {
  }; 

  function PlayerMineCartCharacter_OnLand () {
    if (this.currentTrackType === $T0E().SlimeUpSlope) {
      $T08().playSound("slimeHit");
    } else {
      if ((this.currentTrackType >= $T0E().MushroomLeft) && (this.currentTrackType <= $T0E().MushroomRight)) {
        $T08().playSound("slimeHit");
        var purple = false;
        var flag3 = $T0F().op_Inequality(JSIL.GetType(this.GetTrack(new ($T10())())), $T11().__Type__);
        if (flag3) {
          purple = true;
        }

        for (var i = 0; i < 3; i = ((i + 1) | 0)) {
          (this._game).AddEntity$b1($T12())(new ($T12())(new ($T0D())(((362 + ((
                    purple
                       ? 5
                       : 0)
                   | 0)) | 0), 802, 5, 4), this.position.MemberwiseClone(), +($T08().random.Next(-30, 31)), +($T08().random.Next(-50, -39)), 0, 1, 0.75, 1, 1, 1, 0.15, false, 0));
        }
        return;
      }
    }
    (this._game).createSparkShower();
  }; 

  function PlayerMineCartCharacter_OnTrackChange () {
    if (!(this._hasJustSnapped || !this._grounded)) {
      if (this.currentTrackType === $T0E().SlimeUpSlope) {
        $T08().playSound("slimeHit");
      } else {
        if ((this.currentTrackType >= $T0E().MushroomLeft) && (this.currentTrackType <= $T0E().MushroomRight)) {
          return;
        }
      }
      (this._game).createSparkShower();
    }
  }; 

  function PlayerMineCartCharacter_toString () {
    return $T13().Format("{0}: {1}, Grounded:{2}, Jumping:{3}, Held:{4}", JSIL.Array.New($T14(), [(this.position).toString(), this.currentTrackType, $T05().$Box(this._grounded), $T05().$Box(this._jumping), $T05().$Box(this.jumpHeld)]));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter"), 
      Name: "StardewValley.Minigames.MineCart+PlayerMineCartCharacter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlayerMineCartCharacter__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      PlayerMineCartCharacter__Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      PlayerMineCartCharacter_GetBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalBounds", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      PlayerMineCartCharacter_GetLocalBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnFall", 
      JSIL.MethodSignature.Void, 
      PlayerMineCartCharacter_OnFall
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnJump", 
      JSIL.MethodSignature.Void, 
      PlayerMineCartCharacter_OnJump
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnLand", 
      JSIL.MethodSignature.Void, 
      PlayerMineCartCharacter_OnLand
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnTrackChange", 
      JSIL.MethodSignature.Void, 
      PlayerMineCartCharacter_OnTrackChange
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      PlayerMineCartCharacter_toString
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("StardewValley.Minigames.MineCart+ICollideable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+CheckpointIndicator */ 

(function CheckpointIndicator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };


  function CheckpointIndicator__ctor () {
    this.swayRotation = 120;
    $T00().prototype._ctor.call(this);
  }; 

  function CheckpointIndicator__Draw (b) {
    var rad_rotation = +(((+this.rotation * 3.14159274) / 180));
    var lantern_offset = $S00().Construct(0, -12);
    $S01().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S02().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T05())(16, 112, 16, 16), 
      this._game.trackTint.MemberwiseClone(), 
      0, 
      $S00().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T06().None, 
      0.31
    );
    var activated = this._activated;
    if (activated) {
      $S01().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S02().CallVirtual("TransformDraw", null, this._game, $T03().op_Addition(this.get_drawnPosition().MemberwiseClone(), lantern_offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
        new ($T05())(48, 112, 16, 16), 
        $T08().get_White().MemberwiseClone(), 
        rad_rotation, 
        $T03().op_Addition($S00().Construct(8, 16), lantern_offset.MemberwiseClone()).MemberwiseClone(), 
        (this._game).GetPixelScale(), 
        $T06().None, 
        0.3
      );
    } else {
      $S01().CallVirtual("Draw", null, b, 
        this._game.texture, 
        $S02().CallVirtual("TransformDraw", null, this._game, $T03().op_Addition(this.get_drawnPosition().MemberwiseClone(), lantern_offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
        new ($T05())(32, 112, 16, 16), 
        $T08().get_White().MemberwiseClone(), 
        rad_rotation, 
        $T03().op_Addition($S00().Construct(8, 16), lantern_offset.MemberwiseClone()).MemberwiseClone(), 
        (this._game).GetPixelScale(), 
        $T06().None, 
        0.3
      );
    }
  }; 

  function CheckpointIndicator__Update (time) {
    if (this._activated) {
      this.swayTimer = +this.swayTimer + (+time * 6.28318548);
      if (this.swayTimer >= 6.2831853071795862) {
        this.swayTimer = 0;
        this.swayRotation = +this.swayRotation - 20;
        if (+this.swayRotation <= 30) {
          this.swayRotation = 30;
        }
      }
      this.rotation = Math.fround(Math.sin(this.swayTimer)) * +this.swayRotation;
    }
  }; 

  function CheckpointIndicator_Activate () {
    if (!this._activated) {
      $T0B().playSound("fireball");
      this._activated = true;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+CheckpointIndicator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CheckpointIndicator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      CheckpointIndicator__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      CheckpointIndicator__Update
    );

    $.Method({Static:false, Public:true }, "Activate", 
      JSIL.MethodSignature.Void, 
      CheckpointIndicator_Activate
    );

    $.Constant({Static:true , Public:true }, "CENTER_TO_POST_BASE_OFFSET", $.Int32, 5);

    $.Field({Static:false, Public:true }, "rotation", $.Single);

    $.Field({Static:false, Public:false}, "_activated", $.Boolean);

    $.Field({Static:false, Public:true }, "swayRotation", $.Single);

    $.Field({Static:false, Public:true }, "swayTimer", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+GoalIndicator */ 

(function GoalIndicator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm06.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm06.System.Single, $asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm06.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };


  function GoalIndicator__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function GoalIndicator__Draw (b) {
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, this.get_drawnPosition().MemberwiseClone()).MemberwiseClone(), 
      new ($T03())(16, 128, 16, 16), 
      this._game.trackTint.MemberwiseClone(), 
      0, 
      $S02().Construct(8, 16), 
      (this._game).GetPixelScale(), 
      $T05().None, 
      0.31
    );
    var sign_offset = $S02().Construct(0, -8);
    $S00().CallVirtual("Draw", null, b, 
      this._game.texture, 
      $S01().CallVirtual("TransformDraw", null, this._game, $T04().op_Addition(this.get_drawnPosition().MemberwiseClone(), sign_offset.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
      new ($T03())(32, 128, 16, 16), 
      $T06().get_White().MemberwiseClone(), 
      +(((+this.rotation * 3.14159274) / 180)), 
      $T04().op_Addition($S02().Construct(8, 16), sign_offset.MemberwiseClone()).MemberwiseClone(), 
      (this._game).GetPixelScale(), 
      $T05().None, 
      0.3
    );
  }; 

  function GoalIndicator__Update (time) {
    var activated = this._activated;
    if (activated) {
      this.rotation = +this.rotation + +(((+time * 360) / 0.25));
    }
  }; 

  function GoalIndicator_Activate () {
    if (!this._activated) {
      this._activated = true;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("StardewValley.Minigames.MineCart+Entity"), 
      Name: "StardewValley.Minigames.MineCart+GoalIndicator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GoalIndicator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "_Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      GoalIndicator__Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "_Update", 
      JSIL.MethodSignature.Action($.Single), 
      GoalIndicator__Update
    );

    $.Method({Static:false, Public:true }, "Activate", 
      JSIL.MethodSignature.Void, 
      GoalIndicator_Activate
    );

    $.Field({Static:false, Public:true }, "rotation", $.Single);

    $.Field({Static:false, Public:false}, "_activated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class StardewValley.Minigames.MineCart+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm06.System.Single]))) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lAddTrack$gb__178_0 (o1, o2) {
    return $S00().CallStatic($T01(), "Sign", null, +o1.position.Y - +o2.position.Y);
  }; 

  function $l$gc_$linitLevelTransitions$gb__166_2 () {
    return (+$T03().random.NextDouble() <= 0.5);
  }; 

  function $l$gc_$linitLevelTransitions$gb__166_3 () {
    return (+$T03().random.NextDouble() <= 0.5);
  }; 

  function $l$gc_$linitLevelTransitions$gb__166_4 () {
    return (+$T03().random.NextDouble() <= 0.5);
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "StardewValley.Minigames.MineCart+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lAddTrack$gb__178_0", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track"), $asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]), 
      $l$gc_$lAddTrack$gb__178_0
    );

    $.Method({Static:false, Public:false}, "$linitLevelTransitions$gb__166_2", 
      JSIL.MethodSignature.Return($.Boolean), 
      $l$gc_$linitLevelTransitions$gb__166_2
    );

    $.Method({Static:false, Public:false}, "$linitLevelTransitions$gb__166_3", 
      JSIL.MethodSignature.Return($.Boolean), 
      $l$gc_$linitLevelTransitions$gb__166_3
    );

    $.Method({Static:false, Public:false}, "$linitLevelTransitions$gb__166_4", 
      JSIL.MethodSignature.Return($.Boolean), 
      $l$gc_$linitLevelTransitions$gb__166_4
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__166_2", $asm06.TypeRef("System.Func`1", [$.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__166_3", $asm06.TypeRef("System.Func`1", [$.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__166_4", $asm06.TypeRef("System.Func`1", [$.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__178_0", $asm06.TypeRef("System.Comparison`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("JunimoKart");
/* class JunimoKart.AI */ 

(function AI$Members () {
  var $, $thisType;

  function AI__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "JunimoKart.AI", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AI__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.RandomAI */ 

(function RandomAI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.JunimoKart.AI)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };


  function RandomAI__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function RandomAI_IsPressed (game) {
    return (($T03().random.Next(2) | 0) === 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("JunimoKart.AI"), 
      Name: "JunimoKart.RandomAI", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RandomAI__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsPressed", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart")]), 
      RandomAI_IsPressed
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.SimpleAI */ 

(function SimpleAI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.JunimoKart.AI)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GameStates)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Console)) ();
  };


  function SimpleAI__ctor () {
    this.jumpCount = 0;
    $T00().prototype._ctor.call(this);
  }; 

  function SimpleAI_IsPressed (game) {
    var flag = game.gameState === $T03().Title;
    if (flag) {
      var result = ($T05().random.Next(2) | 0) === 0;
    } else {
      if ((this.jumpCount | 0) > 0) {
        this.jumpCount = (((this.jumpCount | 0) - 1) | 0);
        result = true;
      } else {
        if (!(game.player).IsGrounded()) {
          result = false;
        } else {
          var current = game.GetTrackForXPosition(game.player.position.X);
          var inFront = game.GetTrackForXPosition(+game.player.position.X + 300);
          var flag4 = !((current === null) || 
            (inFront === null)) && 
          (+inFront.position.Y !== +current.position.Y);
          if (flag4) {
            this.jumpCount = ((5 - ((((+inFront.position.Y - +current.position.Y) | 0) / 5) | 0)) | 0);
            $T08().WriteLine(this.jumpCount);
            result = true;
          } else {
            result = false;
          }
        }
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("JunimoKart.AI"), 
      Name: "JunimoKart.SimpleAI", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SimpleAI__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsPressed", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart")]), 
      SimpleAI_IsPressed
    );

    $.Field({Static:false, Public:false}, "jumpCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.JumpAI */ 

(function JumpAI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.JunimoKart.JumpAI_Jump))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.JunimoKart.AI)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.JunimoKart.JumpAI_Jump)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Console)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_GameStates)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_MineCartCharacter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart_Track)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm00.JunimoKart.JumpAI_Jump), null))) ();
  };


  function JumpAI__ctor () {
    this.jumpCount = 0;
    this.goodJumps = $S00().Construct();
    $T01().prototype._ctor.call(this);
  }; 

  function JumpAI_getJumpCount (dx, dy) {
    var rand = ($T05().random.Next(1, 120) | 0);
    var flag = ($T05().random.Next(0, 10) | 0) === 0;
    if (flag) {
      var result = rand;
    } else {
      var flag2 = ((this.goodJumps).get_Count() | 0) === 0;
      if (flag2) {
        result = rand;
      } else {
        var best = (this.goodJumps).get_Item(0);
        var bestDis = 1.7976931348623157E+308;
        var bestError = 1.7976931348623157E+308;

      $loop0: 
        for (var i = 1; i < ((this.goodJumps).get_Count() | 0); i = ((i + 1) | 0)) {
          var candidate = (this.goodJumps).get_Item(i);
          var distance = +candidate.similarity(this.lastJump);
          var error = (Math.abs(candidate.error));
          var flag3 = (distance < bestDis) || 
          ((distance === bestDis) && 
            (error < bestError));
          if (flag3) {
            bestDis = distance;
            bestError = error;
            best = candidate;
            var flag4 = (distance === 0) && 
            (error === 0);
            if (flag4) {
              break $loop0;
            }
          }
        }
        $T0A().WriteLine($T0B().Format("For {0} found {1} at dis {2}", this.lastJump, $T03().$Box(best.jumpCount), $T08().$Box(bestDis)));
        var flag5 = bestDis > 0.05;
        if (flag5) {
          result = rand;
        } else {
          result = (best.jumpCount | 0);
        }
      }
    }
    return result;
  }; 

  function JumpAI_IsPressed (game) {
    var flag = game.gameState === $T0D().Title;
    if (flag) {
      var result = ($T05().random.Next(2) | 0) === 0;
    } else {
      var player = game.player;
      if ((this.jumpCount | 0) > 0) {
        this.jumpCount = (((this.jumpCount | 0) - 1) | 0);
        result = true;
      } else {
        var flag3 = +game.player.position.Y === -1000;
        if (flag3) {
          result = false;
        } else {
          if (!player.IsGrounded()) {
            var flag5 = +player.position.X >= +this.goal.X;
            if (flag5) {
            }
            result = false;
          } else {
            var current = game.GetTrackForXPosition(game.player.position.X);
            var flag6 = (current === this.goalTrack) && 
            (this.lastJump !== null);
            if (flag6) {
              this.lastJump.error = (Math.abs(((+this.goalTrack.position.X + 8) - +player.position.X)));
              (this.goodJumps).Add(this.lastJump);
              $T0A().WriteLine("Success!");
              this.lastJump = null;
            }
            var inFront = game.GetTrackForXPosition(+game.player.position.X + 120);
            var flag7 = (current !== null) && 
            (inFront !== null);
            if (flag7) {
              if (this.lastHighlight !== null) {
                this.lastHighlight.highlighted = false;
              }
              inFront.highlight();
              this.lastHighlight = inFront;
              var dx = +inFront.position.X - +current.position.X;
              var dy = +inFront.position.Y - +current.position.Y;
              dx *= 0.01;
              dy *= 0.01;
              this.goal = inFront.position.MemberwiseClone();
              this.goalTrack = inFront;
              var expr_1F4 = new ($T07())();
              expr_1F4.dx = dx;
              expr_1F4.dy = dy;
              this.lastJump = expr_1F4;
              this.jumpCount = (this.getJumpCount(dx, dy) | 0);
              this.lastJump.jumpCount = (this.jumpCount | 0);
              result = true;
            } else {
              result = false;
            }
          }
        }
      }
    }
    return result;
  }; 

  function JumpAI_recordError$00 (player) {
    this.recordError(player, player.position.Y);
  }; 

  function JumpAI_recordError$01 (player, y) {
    if (this.lastJump !== null) {
      var ex = (+this.goal.X + 8) - +player.position.X;
      var ey = +y - +this.goal.Y;
      ex *= 0.01;
      ey *= 0.01;
      var error = (Math.abs(ex)) + (Math.abs(ey));
      var flag2 = (Math.abs(error)) < 0.1;
      if (flag2) {
        $T0A().WriteLine($T0B().Format("Error {0}: {1} + {2} => {3}", JSIL.Array.New($T10(), [this.lastJump, $T02().$Box(ex), $T02().$Box(ey), $T02().$Box(error)])));
        this.lastJump.error = error;
        (this.goodJumps).Add(this.lastJump);
      }
      this.lastJump = null;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("JunimoKart.AI"), 
      Name: "JunimoKart.JumpAI", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      JumpAI__ctor
    );

    $.Method({Static:false, Public:false}, "getJumpCount", 
      new JSIL.MethodSignature($.Int32, [$.Single, $.Single]), 
      JumpAI_getJumpCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsPressed", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart")]), 
      JumpAI_IsPressed
    );

    $.Method({Static:false, Public:false}, "recordError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter")), 
      JumpAI_recordError$00
    );

    $.Method({Static:false, Public:false}, "recordError", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("StardewValley.Minigames.MineCart+MineCartCharacter"), $.Single]), 
      JumpAI_recordError$01
    );

    $.Field({Static:false, Public:false}, "jumpCount", $.Int32);

    $.Field({Static:false, Public:false}, "goal", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "goalTrack", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"));

    $.Field({Static:false, Public:false}, "goodJumps", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("JunimoKart.JumpAI+Jump")]));

    $.Field({Static:false, Public:false}, "lastJump", $asm00.TypeRef("JunimoKart.JumpAI+Jump"));

    $.Field({Static:false, Public:false}, "lastHighlight", $asm00.TypeRef("StardewValley.Minigames.MineCart+Track"));

    $.Constant({Static:true , Public:false}, "SCALE", $.Single, 0.01);

    $.Constant({Static:true , Public:false}, "MAX_ERROR", $.Single, 0.1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.JumpAI+Jump */ 

(function Jump$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Single)) ();
  };


  function Jump__ctor () {
  }; 

  function Jump_similarity (j) {
    return ((Math.pow(+this.dx - +j.dx, 2)) + (Math.pow(+this.dy - +j.dy, 2)));
  }; 

  function Jump_toString () {
    return $T02().Format("[{0:F2},{1:F2}]", $T03().$Box(this.dx), $T03().$Box(this.dy));
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "JunimoKart.JumpAI+Jump", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Jump__ctor
    );

    $.Method({Static:false, Public:true }, "similarity", 
      new JSIL.MethodSignature($.Double, [$.Type]), 
      Jump_similarity
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Jump_toString
    );

    $.Field({Static:false, Public:false}, "dx", $.Single);

    $.Field({Static:false, Public:false}, "dy", $.Single);

    $.Field({Static:false, Public:false}, "error", $.Single);

    $.Field({Static:false, Public:false}, "jumpCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.PlayerAI */ 

(function PlayerAI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.JunimoKart.AI)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.StardewValley.InputState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Buttons)) ();
  };


  function PlayerAI__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function PlayerAI_IsPressed (game) {
    var flag = $T05().input.GetMouseState().get_LeftButton() === $T06().Pressed;
    if (flag) {
      var result = true;
    } else {
      var flag2 = $T05().isOneOfTheseKeysDown($T05().input.GetKeyboardState().MemberwiseClone(), $T07().Space) || 
      $T05().isOneOfTheseKeysDown($T05().input.GetKeyboardState().MemberwiseClone(), $T07().Enter) || 
      $T05().input.GetKeyboardState().MemberwiseClone().IsKeyDown($T07().Space) || 
      $T05().input.GetKeyboardState().MemberwiseClone().IsKeyDown($T07().LeftShift);
      if (flag2) {
        result = true;
      } else {
        var flag3 = $T05().input.GetGamePadState().MemberwiseClone().IsButtonDown($T0A().A) || 
        $T05().input.GetGamePadState().MemberwiseClone().IsButtonDown($T0A().B);
        result = flag3;
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("JunimoKart.AI"), 
      Name: "JunimoKart.PlayerAI", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlayerAI__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsPressed", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("StardewValley.Minigames.MineCart")]), 
      PlayerAI_IsPressed
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.GameState */ 

(function GameState$Members () {
  var $, $thisType;

  function GameState__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "JunimoKart.GameState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GameState__ctor
    );

    $.Field({Static:false, Public:false}, "tracks", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("StardewValley.Minigames.MineCart+Track")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.Game1 */ 

(function Game1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.JunimoKart.ICue)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.JunimoKart.PlayerAI)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsProfile)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.StardewValley.InputState)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.StardewValley.Minigames.MineCart)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Random, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Input.Keys), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Microsoft.Xna.Framework.Graphics.Texture2D, [
        $asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice, $asm06.System.Int32, 
        $asm06.System.Int32, $asm06.System.Boolean, 
        $asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm06.System.Int32, $asm06.System.Int32, 
        $asm06.System.Int32, $asm06.System.Int32
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };


  function Game1__ctor (mode, theme) {
    this.lastPressed = $S01().Construct();
    $T06().prototype._ctor.call(this);
    this.mode = (mode | 0);
    this.theme = (theme | 0);
    this.graphics = new ($T07())(this);
    (this.graphics).set_PreferredBackBufferWidth(1200);
    (this.graphics).set_PreferredBackBufferHeight(660);
    (this.graphics).set_GraphicsProfile($T08().HiDef);
    $thisType.content = this.get_Content();
    (this.get_Content()).set_RootDirectory("Content");
    $thisType.game1 = this;
    $thisType.input = new ($T0A())();
  }; 

  function Game1_Draw (gameTime) {
    $T06().prototype.Draw.call(this, gameTime);
    $thisType.currentGameTime = gameTime;
    (this.get_GraphicsDevice()).Clear($T0D().get_Black().MemberwiseClone());
    $thisType.currentGameTime = gameTime;
    (this.cartGame).draw(this.spriteBatch);
  }; 

  function Game1_get_IsMainInstance () {
    return true;
  }; 

  function Game1_get_ticks () {
    return $thisType.currentGameTime.get_TotalGameTime().get_Ticks();
  }; 

  function Game1_getSourceRectForStandardTileSheet (tileSheet, tilePosition, width, height) {
    var flag = (width | 0) === -1;
    if (flag) {
      width = 64;
    }
    var flag2 = (height | 0) === -1;
    if (flag2) {
      height = 64;
    }
    return new ($T12())(((Math.imul(tilePosition, width) % (tileSheet.get_Width() | 0)) | 0), Math.imul(((Math.imul(tilePosition, width) / (tileSheet.get_Width() | 0)) | 0), height), width, height);
  }; 

  function Game1_HasKeyboardFocus () {
    return true;
  }; 

  function Game1_Initialize () {
    $T06().prototype.Initialize.call(this);
    $thisType.dialogueFont = $thisType.content.Load$b1($T13())("SpriteFont1");
    $thisType.debrisSpriteSheet = $thisType.content.Load$b1($T10())("debris");
    $thisType.mouseCursors = $thisType.content.Load$b1($T10())("Cursors");
    $thisType.viewport = (this.get_GraphicsDevice()).get_Viewport().MemberwiseClone();
    this.spriteBatch = new ($T14())((this.graphics).get_GraphicsDevice());
    var white3 = JSIL.Array.New($T0D(), 1);
    $thisType.staminaRect = $S02().Construct(this.get_GraphicsDevice(), 1, 1, false, $T16().Color);

    for (var i = 0; i < (white3.length | 0); i = ((i + 1) | 0)) {
      white3[i] = $S03().Construct(255, 255, 255, 255);
    }
    $S04().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], $thisType.staminaRect, white3);
    if (this.cartGame === null) {
      this.cartGame = new ($T0E())(this.theme, this.mode);
    }
  }; 

  function Game1_isOneOfTheseKeysDown (keyboardState, useToolButton) {
    return keyboardState.IsKeyDown(useToolButton);
  }; 

  function Game1_playSound (path) {
  }; 

  function Game1_playSoundPitched (v1, v2) {
  }; 

  function Game1_Update (gameTime) {
    var $temp00;
    $T06().prototype.Update.call(this, gameTime);
    $thisType.currentGameTime = gameTime;
    var newKeys = $S01().Construct();
    var pressedKeys = $T1B().GetState().MemberwiseClone().GetPressedKeys();

    for (var j = 0; j < (pressedKeys.length | 0); j = ((j + 1) | 0)) {
      var key = pressedKeys[j];
      newKeys.Add(key);
      var flag = !(this.lastPressed).Contains(key);
      if (flag) {
        (this.cartGame).receiveKeyPress(key);
      }
    }

    for (var a$0 = this.lastPressed._items, i$0 = 0, l$0 = (this.lastPressed._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var key2 = a$0[i$0];
      var flag2 = !newKeys.Contains(key2);
      if (flag2) {
        (this.cartGame).receiveKeyRelease(key2);
      }
    }
    this.lastPressed = newKeys;

    for (var i = 0; i < 1; i = ((i + 1) | 0)) {
      $thisType.input.UpdateStates();
      (this.cartGame).tick(gameTime);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "JunimoKart.Game1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Game1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game1_Draw
    );

    $.Method({Static:false, Public:true }, "get_IsMainInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game1_get_IsMainInstance
    );

    $.Method({Static:true , Public:true }, "get_ticks", 
      JSIL.MethodSignature.Return($.Int64), 
      Game1_get_ticks
    );

    $.Method({Static:true , Public:true }, "getSourceRectForStandardTileSheet", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Int32, 
          $.Int32, $.Int32
        ]), 
      Game1_getSourceRectForStandardTileSheet
    );

    $.Method({Static:false, Public:false}, "HasKeyboardFocus", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game1_HasKeyboardFocus
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Game1_Initialize
    );

    $.Method({Static:true , Public:false}, "isOneOfTheseKeysDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      Game1_isOneOfTheseKeysDown
    );

    $.Method({Static:true , Public:true }, "playSound", 
      JSIL.MethodSignature.Action($.String), 
      Game1_playSound
    );

    $.Method({Static:true , Public:false}, "playSoundPitched", 
      new JSIL.MethodSignature(null, [$.String, $.Int32]), 
      Game1_playSoundPitched
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game1_Update
    );

    $.Field({Static:true , Public:true }, "random", $asm06.TypeRef("System.Random"));

    $.Field({Static:true , Public:true }, "minecartHighScore", $.Int32, 0);

    $.Field({Static:true , Public:false}, "debrisSpriteSheet", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:false}, "staminaRect", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:false}, "mouseCursors", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:false}, "currentGameTime", $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"));

    $.Field({Static:true , Public:false}, "dialogueFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:true , Public:false}, "viewport", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport"));

    $.Field({Static:true , Public:false}, "content", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Field({Static:true , Public:false}, "game1", $.Type);

    $.Field({Static:true , Public:false}, "input", $asm00.TypeRef("StardewValley.InputState"));

    $.Field({Static:true , Public:false}, "playerOneIndex", $asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), function ($pi) {
        return $asm01.Microsoft.Xna.Framework.PlayerIndex.One;
      });

    $.Field({Static:true , Public:false}, "minecartLoop", $asm00.TypeRef("JunimoKart.ICue"));

    $.Field({Static:true , Public:false}, "currentMinigame", $.Object);

    $.Field({Static:true , Public:false}, "isUsingBackToFrontSorting", $.Boolean);

    $.Field({Static:false, Public:false}, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"));

    $.Field({Static:false, Public:false}, "spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"));

    $.Field({Static:false, Public:false}, "cartGame", $asm00.TypeRef("StardewValley.Minigames.MineCart"));

    $.Field({Static:false, Public:false}, "mode", $.Int32);

    $.Field({Static:false, Public:false}, "theme", $.Int32);

    $.Constant({Static:true , Public:true }, "MODE_ENDLESS", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "MODE_PROGRESS", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "SPEED", $.Int32, 1);

    $.Field({Static:true , Public:true }, "AI", $asm00.TypeRef("JunimoKart.AI"));

    $.Field({Static:false, Public:false}, "lastPressed", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]));


    function Game1__cctor () {
      $thisType.viewport = new $asm04.Microsoft.Xna.Framework.Graphics.Viewport();
      $thisType.random = $S00().Construct();
      $thisType.minecartHighScore = 0;
      $thisType.playerOneIndex = $T01().One;
      $thisType.minecartLoop = new ($T02())();
      $thisType.AI = new ($T03())();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Game1__cctor
    );

    $.Property({Static:false, Public:true }, "IsMainInstance", $.Boolean);

    $.Property({Static:true , Public:true }, "ticks", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.HighScores */ 

(function HighScores$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Comparison$b1.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.JunimoKart.HighScores_$l$gc)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Char)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm06.System.Char))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.JunimoKart.Properties.Settings)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Configuration.SettingsBase)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Func$b2.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32), $asm06.System.String))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Collections.Generic.IEnumerable$b1.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Linq.Enumerable)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.String))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Int32, [$asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32), $asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Comparison`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm06.TypeRef("System.String"), $asm06.TypeRef("System.Int32")])])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.String, [$asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32)]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"]))) ();
  };


  function HighScores_AddScore (v, score) {
    var arg_3D_1 = null;
    $thisType.Get();
    $thisType.scores.Add(new ($T04())(v, score));
    var arg_3D_0 = $thisType.scores;
    if ((arg_3D_1 = $T05().$l$g9__7_0) === null) {
      arg_3D_1 = $T05().$l$g9__7_0 = $T02().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm00.JunimoKart.HighScores_$l$gc, "$lAddScore$gb__7_0", $S00(), false, false));
    }
    $S01().Call($T03().prototype, "Sort", null, arg_3D_0, arg_3D_1);

    while (($thisType.scores.get_Count() | 0) > 5) {
      $thisType.scores.RemoveAt(5);
    }
    $thisType.Save();
  }; 

  function HighScores_Deserialize (value) {
    $thisType.scores = $S02().Construct();
    var lines = (JSIL.SplitString(value, JSIL.Array.New($T07(), ["\n"])));
    var array = lines;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var line = array[i];
      var parts = (JSIL.SplitString(line, JSIL.Array.New($T07(), [":"])));
      $thisType.scores.Add(new ($T04())(parts[0], $T01().Parse(parts[1])));
    }
  }; 

  function HighScores_Get () {
    if ($thisType.scores === null) {
      $thisType.Load();
    }
    return $thisType.scores;
  }; 

  function HighScores_Load () {
    var scoresString = $T09().get_Default().get_HighScores();
    var flag = (scoresString === null) || 
    ((scoresString.length | 0) === 0);
    if (flag) {
      $thisType.LoadDefault();
    } else {
      $thisType.Deserialize(scoresString);
    }
  }; 

  function HighScores_LoadDefault () {
    $thisType.scores = $S02().Construct();
    $thisType.scores.Add(new ($T04())("Lewis", 50000));
    $thisType.scores.Add(new ($T04())("Shane", 25000));
    $thisType.scores.Add(new ($T04())("Sam", 10000));
    $thisType.scores.Add(new ($T04())("Abigail", 5000));
    $thisType.scores.Add(new ($T04())("Vincent", 250));
  }; 

  function HighScores_Save () {
    $T09().get_Default().set_HighScores($thisType.Serialize());
    $T09().get_Default().Save();
  }; 

  function HighScores_Serialize () {
    var arg_2A_1 = null;
    var arg_2A_0 = $thisType.scores;
    if ((arg_2A_1 = $T05().$l$g9__2_0) === null) {
      arg_2A_1 = $T05().$l$g9__2_0 = $T0C().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm00.JunimoKart.HighScores_$l$gc, "$lSerialize$gb__2_0", $S03(), false, false));
    }
    return JSIL.JoinEnumerable("\n", $T0E().ToList$b1($T00())($S04().CallStatic($T0E(), "Select$b2", [$asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32), $asm06.System.String], arg_2A_0, arg_2A_1)));
  }; 

  JSIL.MakeStaticClass("JunimoKart.HighScores", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "AddScore", 
      new JSIL.MethodSignature(null, [$.String, $.Int32]), 
      HighScores_AddScore
    );

    $.Method({Static:true , Public:false}, "Deserialize", 
      JSIL.MethodSignature.Action($.String), 
      HighScores_Deserialize
    );

    $.Method({Static:true , Public:true }, "Get", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])), 
      HighScores_Get
    );

    $.Method({Static:true , Public:false}, "Load", 
      JSIL.MethodSignature.Void, 
      HighScores_Load
    );

    $.Method({Static:true , Public:false}, "LoadDefault", 
      JSIL.MethodSignature.Void, 
      HighScores_LoadDefault
    );

    $.Method({Static:true , Public:true }, "Save", 
      JSIL.MethodSignature.Void, 
      HighScores_Save
    );

    $.Method({Static:true , Public:false}, "Serialize", 
      JSIL.MethodSignature.Return($.String), 
      HighScores_Serialize
    );

    $.Field({Static:true , Public:false}, "scores", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.HighScores+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Collections.Generic.KeyValuePair$b2.Of($asm06.System.String, $asm06.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lAddScore$gb__7_0 (a, b) {
    return (((b.get_Value() | 0) - (a.get_Value() | 0)) | 0);
  }; 

  function $l$gc_$lSerialize$gb__2_0 (p) {
    return (p.get_Key() + ":" + (p.get_Value()).toString());
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "JunimoKart.HighScores+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lAddScore$gb__7_0", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])]), 
      $l$gc_$lAddScore$gb__7_0
    );

    $.Method({Static:false, Public:false}, "$lSerialize$gb__2_0", 
      new JSIL.MethodSignature($.String, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])]), 
      $l$gc_$lSerialize$gb__2_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__2_0", $asm06.TypeRef("System.Func`2", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__7_0", $asm06.TypeRef("System.Comparison`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class JunimoKart.ICue */ 

(function ICue$Members () {
  var $, $thisType;

  function ICue__ctor () {
  }; 

  function ICue_get_IsPaused () {
    return false;
  }; 

  function ICue_Pause () {
  }; 

  function ICue_Play () {
  }; 

  function ICue_Resume () {
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "JunimoKart.ICue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ICue__ctor
    );

    $.Method({Static:false, Public:true }, "get_IsPaused", 
      JSIL.MethodSignature.Return($.Boolean), 
      ICue_get_IsPaused
    );

    $.Method({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      ICue_Pause
    );

    $.Method({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Void, 
      ICue_Play
    );

    $.Method({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void, 
      ICue_Resume
    );

    $.Property({Static:false, Public:true }, "IsPaused", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class JunimoKart.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.JunimoKart.Game1)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };


  function Program_Main () {
    var game = new ($T00())(2, 0);
    game.Run();
  }; 

  JSIL.MakeStaticClass("JunimoKart.Program", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Void, 
      Program_Main
    )
      .Attribute($asm06.TypeRef("System.STAThreadAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("JunimoKart.Properties");
/* class JunimoKart.Properties.Resources */ 

(function Resources$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Resources.ResourceManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Globalization.CultureInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Resources.ResourceManager, [$asm06.System.String, $asm06.System.Reflection.Assembly]))) ();
  };


  function Resources__ctor () {
  }; 

  function Resources_get_Culture () {
    return $thisType.resourceCulture;
  }; 

  function Resources_get_ResourceManager () {
    if ($thisType.resourceMan === null) {
      var temp = $S00().Construct("JunimoKart.Properties.Resources", $thisType.__Type__.get_Assembly());
      $thisType.resourceMan = temp;
    }
    return $thisType.resourceMan;
  }; 

  function Resources_set_Culture (value) {
    $thisType.resourceCulture = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "JunimoKart.Properties.Resources", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Resources__ctor
    );

    $.Method({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Globalization.CultureInfo")), 
      Resources_get_Culture
    );

    $.Method({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Resources.ResourceManager")), 
      Resources_get_ResourceManager
    );

    $.Method({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Globalization.CultureInfo")), 
      Resources_set_Culture
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm06.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm06.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm06.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class JunimoKart.Properties.Settings */ 

(function Settings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Configuration.SettingsBase)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Configuration.ApplicationSettingsBase)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.String)) ();
  };


  function Settings__ctor () {
    $T01().prototype._ctor.call(this);
  }; 

  function Settings_get_Default () {
    return $thisType.defaultInstance;
  }; 

  function Settings_get_HighScores () {
    return $T02().$Cast(this.get_Item("HighScores"));
  }; 

  function Settings_set_HighScores (value) {
    this.set_Item("HighScores", value);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Configuration.ApplicationSettingsBase"), 
      Name: "JunimoKart.Properties.Settings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Settings__ctor
    );

    $.Method({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      Settings_get_Default
    );

    $.Method({Static:false, Public:true }, "get_HighScores", 
      JSIL.MethodSignature.Return($.String), 
      Settings_get_HighScores
    );

    $.Method({Static:false, Public:true }, "set_HighScores", 
      JSIL.MethodSignature.Action($.String), 
      Settings_set_HighScores
    );

    $.Field({Static:true , Public:false}, "defaultInstance", $.Type);


    function Settings__cctor () {
      $thisType.defaultInstance = $thisType.$Cast($T00().Synchronized(new $thisType()));
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Settings__cctor
    );

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:false, Public:true }, "HighScores", $.String)
      .Attribute($asm07.TypeRef("System.Configuration.UserScopedSettingAttribute"))
      .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
      .Attribute($asm07.TypeRef("System.Configuration.DefaultSettingValueAttribute"), function () { return [""]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm07.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.10.0.0"]; });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

